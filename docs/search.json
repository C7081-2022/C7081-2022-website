[
  {
    "objectID": "bmi/bmi.html",
    "href": "bmi/bmi.html",
    "title": "BMI data swag",
    "section": "",
    "text": "This is my BMI data\n\nbmi <- read.xlsx(\"bmi_male_and_female.xlsx\")"
  },
  {
    "objectID": "bmi/bmi.html#plot-bmi-data",
    "href": "bmi/bmi.html#plot-bmi-data",
    "title": "BMI data swag",
    "section": "Plot BMI data",
    "text": "Plot BMI data\nYou can also embed plots, for example:"
  },
  {
    "objectID": "bmi/bmi.html#gorilla-plot",
    "href": "bmi/bmi.html#gorilla-plot",
    "title": "BMI data swag",
    "section": "Gorilla plot",
    "text": "Gorilla plot\n\nplot(bmi ~ steps, data = bmi, \n     pch = 16, cex = .7, \n     col = c(rep(\"HotPink\", 921), \n             rep(\"navy\", 865)))"
  },
  {
    "objectID": "bmi/bmi.html#statistical-results",
    "href": "bmi/bmi.html#statistical-results",
    "title": "BMI data swag",
    "section": "Statistical results",
    "text": "Statistical results\nRaw ANOVA table.\n\n\nAnalysis of Variance Table\n\nResponse: bmi\n            Df Sum Sq Mean Sq F value Pr(>F)    \nsteps        1   3402  3402.2 153.716 <2e-16 ***\ngender       1     44    43.9   1.983 0.1592    \nResiduals 1783  39464    22.1                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "bmi/bmi.html#matts-summary",
    "href": "bmi/bmi.html#matts-summary",
    "title": "BMI data swag",
    "section": "Matt’s summary",
    "text": "Matt’s summary\n\npaste('Your R-sqared is: ', round(summary(lm0)$r.squared, 2))\n\n[1] \"Your R-sqared is:  0.08\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Welcome to C7081. This module is a survey of machine learning and statistical methods including supervised and unsupervised classification, regression, and tree-based methods. There is an emphasis on practical applications using a series of data stories and lab exercises, along with lectures on selected topics and readings. A prerequisite is a basic working knowledge of R programming and introductory statistics."
  },
  {
    "objectID": "index.html#c7081-resources",
    "href": "index.html#c7081-resources",
    "title": "Home",
    "section": "C7081 Resources",
    "text": "C7081 Resources\n\nTextbook: James et al. 2021 Introduction to statistical learning 2ed\nSlack workspace (for enrolled students)\nOffice hours (Slack, Fridays by appointment)"
  },
  {
    "objectID": "index.html#harper-adams-data-science",
    "href": "index.html#harper-adams-data-science",
    "title": "Home",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab00-guidance.html",
    "href": "lab00-guidance.html",
    "title": "Lab Guidance",
    "section": "",
    "text": "There are several recommendations you should follow to get the most out of these exercises and this module as a whole.\n\nSet up a separate script for each lab (e.g. an R script) to organize and document your work\nAnswer each question formally and fully\nUse a fully commented, reproducible script style with a Header, Contents, and clickable Section blocks. This will help you practice Best Practice (see what I did there?), and will make the script useful to yourself in the future as a reference (e.g., the next time you want to set up a K means analysis script…)\nType 100% of your own code: do not copy and paste anything (practice, practice + troubleshooting error messages for typos and other issues)\nConsider writing your lab scripts using R Markdown\nConsider setting up a Github repository for your lab scripts"
  },
  {
    "objectID": "lab00-guidance.html#harper-adams-data-science",
    "href": "lab00-guidance.html#harper-adams-data-science",
    "title": "Lab Guidance",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab00-welcome.html",
    "href": "lab00-welcome.html",
    "title": "Lab Welcome",
    "section": "",
    "text": "Yanai et al 2021 :: R script :: Markdown :: final data xlsx"
  },
  {
    "objectID": "lab00-welcome.html#lab-welcome-exercise",
    "href": "lab00-welcome.html#lab-welcome-exercise",
    "title": "Lab Welcome",
    "section": "Lab welcome exercise",
    "text": "Lab welcome exercise\nThis is a simple activity with a few parts to help get you into the mindset of practicing working with data. We will be doing work to allow you to use some specific skills, but the real point of this exercise is to begin to think about beginning to take responsibility for information you construct using data."
  },
  {
    "objectID": "lab00-welcome.html#bmi-data",
    "href": "lab00-welcome.html#bmi-data",
    "title": "Lab Welcome",
    "section": "1 BMI data",
    "text": "1 BMI data\n\n\n\n\nBMI chart\n\n\n\nThe Body Mass Index (BMI) is a numerical scale intended as a rough guideline to body weight relative to body size. There are a number of assumptions underlying the scale, and the BMI is considered imperfect, but is in wide use.\nThe BMI is calculated thus:\n\\(BMI = \\frac{weight(Kg)}{height(m^2)}\\)\nYou can calculate your own BMI here"
  },
  {
    "objectID": "lab00-welcome.html#data-should-be-tidy",
    "href": "lab00-welcome.html#data-should-be-tidy",
    "title": "Lab Welcome",
    "section": "2 Data should be tidy",
    "text": "2 Data should be tidy\n\n\n\n\nData should be tidy, like your room\n\n\n\nThe concept of tidy data is popular and widely considered best practice. The concept has been summarized in a highly cited paper by Wickham (2014).\nThe essence of the Tidy Data concept is:\n\nSimple data structure, one observation per row\nSimple variable names (informative, short, no spaces, weird characters)\nData explanation or “Data Dictionary” present\nNo extraneous information (like figures, summaries) embedded with the data storage"
  },
  {
    "objectID": "lab00-welcome.html#exercises",
    "href": "lab00-welcome.html#exercises",
    "title": "Lab Welcome",
    "section": "3 Exercises",
    "text": "3 Exercises\n\n3.1 Make tidy data\nUse the following tab-delimited data files: bmi_f.txt bmi_m.txt\nThe data look like this:\n\n\n\nbmi_f.txt\n\n\n\nID, subject ID within each file\nsteps, # steps / wk past 16 weeks\nbmi, bmi measure\nsex is indicated implicitly by males and females data being separated in different files\n\nYour task:\n\nConvert the data to a tidy data format in a single .xlsx file\nDo this using only R code\nData dictionary may be added with code or “manually”\nWe will scrutinize and discuss\n\n\n\n3.2 Analyse BMI data\nConsider three specific hypotheses:\n\nthat there is a statistically significant difference in the average number of steps taken by men and women\nthat there is a negative correlation between the number of steps and the BMI for women\nthat this correlation is positive for men\n\n\nPerform analysis ~30 mins\nDo not speak to others\nWe will discuss of findings as a group\n\n\n\n3.3 Make a data report using markdown\n\nMarkdown is a language\nR markdown is “R flavoured Markdown”\nFormat a “dynamic” report using R Markdown\n\nThe task here is to create a very brief report of your BMI analysis and findings, using R Markdown. The point here is really just to practice markdown and think of how to communicate results to others.\nA markdown document is “freeform” ; the structure I suggest here is a minimal example for good practice.\nTitle + other details - descriptive title, set in the YAML (“YAML ain’t Markup Language”: recursive acronym…) header Summary of major findings - written LAST\nBackground - like the introduction section in a scientific paper. The most important part is a list of OBJECTIVES\nResults Graphs, stats results, terse, clear, technical style\nBibliography (if relevant) References are usually cited in Background, or possibly in Results if there are methods citations\n\nMake your own report (~45 mins)\nStart a new R Markdown document in RStudio, HTML output (NB pdf, word options)\nStructured your doc with the sections: Title, Summary, Background, Results, Bibliography\nThere are usually several “unseen” sections that may contain your R code in code chunks\nWe will discuss and critique resulting reports and code (~45 mins)"
  },
  {
    "objectID": "lab00-welcome.html#resources",
    "href": "lab00-welcome.html#resources",
    "title": "Lab Welcome",
    "section": "Resources",
    "text": "Resources\nR Bootcamp Markdown page"
  },
  {
    "objectID": "lab00-welcome.html#harper-adams-data-science",
    "href": "lab00-welcome.html#harper-adams-data-science",
    "title": "Lab Welcome",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab01-lin-alg.html",
    "href": "lab01-lin-alg.html",
    "title": "Lab 01 Linear alg.",
    "section": "",
    "text": "Linear algebra is the (math) foundation of statistics and data science. While it is possible to practice data analysis without a robust knowledge of algebra, a little bit helps. The purpose here is to highlight and review the key linear algebra concepts and to demonstrate a few examples. By the end of this lab you should be able to:\n\nDescribe the structure of vectors and matrices\nPerform math functions with linear algebra structures\nDemonstrate awareness of linear algebra utility"
  },
  {
    "objectID": "lab01-lin-alg.html#vectors",
    "href": "lab01-lin-alg.html#vectors",
    "title": "Lab 01 Linear alg.",
    "section": "2 Vectors",
    "text": "2 Vectors\n\n2.1 The basic vector concept\nVectors can be conceptualized as a list of numerical values (elements) that may be arranged in columns or rows. A formal difference between column and row vectors is the notation for their arrangement, where a vector has n elements, a row vector is a matrix with \\([1 \\times n]\\) elements; a column vector has \\([n \\times 1]\\) elements.\nColumn vector:\n\\(a=\\begin{bmatrix} 2 \\\\ 1 \\\\ 3 \\end{bmatrix}\\)\nRow vector:\n\\(b=\\begin{bmatrix} 2, 1, 3 \\end{bmatrix}\\)\nVectors have a specific order such that:\n\\((2,1,3) \\neq (1,2,3)\\)\nWe can generalize the notation for a vector containing n elements as an n-vector such that:\n\\(a=\\begin{bmatrix} a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\)\nwhere each element \\(a_i\\) is a numerical value and the vector can be written as \\(a=(a_1,\\dots,a_n)\\).\nWe can represent vectors graphically, e.g. here is an example in R graphing 2 2-vectors.There are some conventions in geometry and math notation here, that are not necessarily the same as the way we store data structures in a programming language…\n\n# imagine two vectors that each contain the x,y coordinates of a point\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\n\n\n\n\n\n\nVectors in R are always printed in the ‘row format’, regardless of math notation.\n\na <- c(4,2,3)\na\n\n[1] 4 2 3\n\n\n\n\n2.2 Transposing\nTansposing a vector is when a column or row vector is turned into the opposite orientation. The transpose is notated with the symbol \\(\\intercal\\)\nColumn to row format\n\\(\\begin{bmatrix} 4 \\\\ 8 \\\\ 5 \\end{bmatrix} ^ \\intercal = [4, 8, 5]\\)\nRow to column format\n\\([4, 8, 5] ^ \\intercal = \\begin{bmatrix} 4 \\\\ 8 \\\\ 5 \\end{bmatrix}\\)\n\n# transpose in R\na <- c(5,7,6)\n\n# the t() function forces the object as a matrix\nt(a)\n\n     [,1] [,2] [,3]\n[1,]    5    7    6\n\n# multiple transpose, just to demonstrate\nt(t(a))\n\n     [,1]\n[1,]    5\n[2,]    7\n[3,]    6\n\n\n\n\n2.3 Multiplication\nA number \\(b\\) and a vector \\(a\\) can be multiplied together\n\\(b \\times a =\\begin{bmatrix} b \\times a_1 \\\\ b \\times a_2 \\\\ \\vdots \\\\ b \\times a_n \\end{bmatrix}\\)\nThus\n\\(5 \\times \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 10 \\\\ 15 \\end{bmatrix}\\)\n\n# vector multiplication in R\na <- c(2,4,5)\nb <- 3\n\na*b\n\n[1]  6 12 15\n\n\nGraphing vector multiplication\n\n# our 2 vectors from before\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\n\n\n\n\n\n\n\n\n2.4 Addition\nLet \\(a\\) and \\(b\\) be n-vectors, where \\(a\\) and \\(b\\) are of the same dimensions.\n\\(a + b = \\begin{bmatrix} a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix} + \\begin{bmatrix} b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_n \\end{bmatrix} = \\begin{bmatrix} a_1 + b_1 \\\\ a_2 + b_2 \\\\ \\vdots \\\\ a_n + b_n \\end{bmatrix} = b+a\\)\nWith numbers\n\\(a + b = \\begin{bmatrix} 1 \\\\ 3 \\\\ 5 \\end{bmatrix} + \\begin{bmatrix} 4 \\\\ 2 \\\\ 8 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 5 \\\\ 13 \\end{bmatrix}\\)\n\n# vector addition in R\na <- c(3, 5, 1)\nb <- c(14, 3, 5)\n\na + b\n\n[1] 17  8  6\n\n\n\n# our 2 vectors from before\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\nvec3 <- vec1 + vec2\n\n\n\n\n\n\n\n\n2.5 Vector inner product\nThe inner product of a vector is obtained by multiplying two vectors and summing the result (NB this is sometimes called the dot product).\n\\(\\sum a*b = a \\cdot b = a_1b_1 + \\dots + a_nb_n\\)\nwith numbers\n\\(\\sum (\\begin{bmatrix} 1 \\\\ 3 \\\\ 5 \\end{bmatrix} \\times \\begin{bmatrix} 4 \\\\ 2 \\\\ 8 \\end{bmatrix}) = \\sum \\begin{bmatrix} 4 \\\\ 6 \\\\ 40 \\end{bmatrix} == 50\\)\n\n# dot product in R\na <- c(1,3,5)\nb <- c(4,2,8)\n\nsum(a * b)\n\n[1] 50\n\n\n\n# alternative syntax for the dot product\na %*% b\n\n     [,1]\n[1,]   50\n\n\n\n\n2.6 Magnitude (aka the “norm”) of a vector\nThere are several ways to measure the “bigness” of a vector, sometimes called the norms. Although we will not go into detail here, there are two types of norm to be aware of. These may seem a little esoteric for our purposes here, but they are used “under the bonnet” for many statistical and machine learning calculations (thus, you may encounter them and should probably be aware of them).\nL1 norm (aka the outer norm) - this is the overall absolute magnitude of vector values\nL2 norm (aka the inner norm) this is the linear (“Euclidean”) distance of the vector from the origin (the zero value in n-dimensional space).\n\nL1 norm\nThe L1 norm is calculated by summing the absolute value of all vector elements.\nTake a vector \\(a = (2, -4, 5)\\)\n\\(||a||_1 = \\sum(|a_1|+ \\dots + |a_n|)\\)\n\\(||a||_1 = (2 + 4 + 5) = 11\\)\n\n\nL2 norm\nThe L2 norm is calculated by taking the square root of the summed values of the squared values of each element of a vector.\nTake a vector \\(b = (-1, 0, 3)\\)\n\\(||b||_2 = \\sqrt(b_1^2+ \\dots + b_n^2)\\)\n\\(||b||_2 = \\sqrt(1 + 0 + 9) = 3.16\\)\n\n# norms in R\na <- c(2, -4, 5)\nb <- c(-1, 0, 3)\n\nsum(abs(a)) # L1\n\n[1] 11\n\nsqrt(sum(b^2)) # L2\n\n[1] 3.162278\n\n# alternative calculation using the norm() function\n# ?norm\n\nnorm(matrix(a), type = \"O\") # L1\n\n[1] 11\n\nnorm(matrix(b), type = \"2\") # L2\n\n[1] 3.162278\n\n\n\n\n\n2.7 Special vectors\nThere are a few special cases of vectors we may encounter (but which are certainly there “doing work” for us), like the 0-vector and the 1-vector. These are simply vectors where all values assume either zero or one, respectively. These are often used in linear models to encode data for matrix calculations (but we will leave it at that for now).\n\n# 0-matrix, n=10\nrep(0, 10)\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n# 1-matrix, n=8\nrep(1, 8)\n\n[1] 1 1 1 1 1 1 1 1\n\n\n\n\n2.8 Orthogonal vectors\nOrthogonal vectors are used in a number of statistical methods, e.g. multivariate statistics like principal component analysis (PCA). Here, orthogonal means perpendicular. We determine orthogonality by taking the inner product of two vectors.\nTake two vectors \\(a\\) and \\(b\\), they are orthogonal if and only if\n\\(a \\perp b \\iff a \\cdot b = 0\\)\n\na <- c(3,-3)\nb <- c(3, 3)\n\nsum(a*b) # yep, a and b are orthogonal!\n\n[1] 0"
  },
  {
    "objectID": "lab01-lin-alg.html#matrices",
    "href": "lab01-lin-alg.html#matrices",
    "title": "Lab 01 Linear alg.",
    "section": "3 Matrices",
    "text": "3 Matrices\n\n3.1 Description\nMatrices are described by the number of rows and columns they have. We may say a matrix \\(A\\) to have dimensions \\(r \\times c\\), (rows \\(\\times\\) columns).\n\\(A = \\begin{bmatrix} a_{11} & a_{12} & \\dots & a_{1c} \\\\ a_{21} & a_{22} & \\dots & a_{2c} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{r1} & a_{r2} & \\dots & a_{rc} \\end{bmatrix}\\)\n\n# make matrix, vector assembled \"by column\"\nA <- matrix(c(4,3,6,2,7,4,4,5,4), ncol = 3)\nA\n\n     [,1] [,2] [,3]\n[1,]    4    2    4\n[2,]    3    7    5\n[3,]    6    4    4\n\n\nA matrix can be constructed “by row” as well in R, with very different consequences.\n\n# make matrix, vector assembled \"by row\"\nB <- matrix(c(4,3,6,2,7,4,4,5,4), ncol = 3, byrow=T)\nB\n\n     [,1] [,2] [,3]\n[1,]    4    3    6\n[2,]    2    7    4\n[3,]    4    5    4\n\n\n\n\n3.2 Multiplying matrices\nFor a number \\(\\alpha\\) and a matrix \\(A\\), the product of \\(\\alpha A\\) is the matrix obtained by multiplying each element of \\(A\\) to \\(\\alpha\\).\n\\(\\alpha = 3\\)\n\\(A = \\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix}\\)\n\\(3 \\times\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} = \\begin{bmatrix} 3 & 9 \\\\ 6 & 12 \\\\ 3 & 3 \\end{bmatrix}\\)\n\n# matrix multiplication in R\nalpha <- 3\nA <- matrix(c(1,3,2,4,1,1), byrow=T, ncol=2)\nalpha*A\n\n     [,1] [,2]\n[1,]    3    9\n[2,]    6   12\n[3,]    3    3\n\n\n\n\n3.3 Transpose for matrices\nMatrix trasposition works similarly to vector transpostiion and is also denoted by \\(\\intercal\\)\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix}^ \\intercal = \\begin{bmatrix} 1 & 2 & 1 \\\\ 3 & 4 & 1 \\end{bmatrix}\\)\n\n# Matrix transpose in R\nA <- matrix(c(1,3,2,4,1,1), byrow=T, ncol=2)\nt(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    1\n[2,]    3    4    1\n\n\n\n\n3.4 Sum of matrices\nLet \\(A\\) and \\(B\\) be matrices of dimensions \\(r \\times c\\). We sum the matrices together element-wise. The matrices must be of exactly the same dimensions.\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} - \\begin{bmatrix} 7 & 1 \\\\ 1 & 1 \\\\ 4 & 4 \\end{bmatrix} = \\begin{bmatrix} 8 & 4 \\\\ 3 & 5 \\\\ 5 & 5 \\end{bmatrix}\\)\n\n# Adding matrices in R\nA <- matrix(c(1,3,2,4,1,1), byrow=3, ncol=2)\nB <- matrix(c(7,1,1,1,4,4), byrow=3, ncol=2)\n\nA +B\n\n     [,1] [,2]\n[1,]    8    4\n[2,]    3    5\n[3,]    5    5\n\n\n\n\n3.5 Multiplying matrix x vector\nLet \\(A\\) be an \\(r \\times c\\) matrix and let \\(B\\) be a column vector with \\(c\\) dimensions Note the number of elements in one dimension (here \\(c\\)) must be the same.\n\\(\\begin{bmatrix} a_{11} & a_{12} & \\dots & a_{1c} \\\\ a_{21} & a_{22} & \\dots & a_{2c} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{r1} & a_{r2} & \\dots & a_{rc} \\end{bmatrix} \\times \\begin{bmatrix} b_{1} \\\\ b_{2} \\\\ \\vdots \\\\ b_{c} \\end{bmatrix} = \\begin{bmatrix} a_{11} b_{1} + a_{12} b_{2} + \\dots + a_{1c}b_{c} \\\\ a_{21} b_{1} + a_{22} b_{2} + \\dots + a_{2c} b_{c} \\\\ \\vdots \\\\ a_{r1} b_{1} + a_{r2} b_{2} + \\dots + a_{rc} b_{c} \\end{bmatrix}\\)\nFor example:\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} \\times \\begin{bmatrix} 7 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 \\cdot 7 + 3 \\cdot 1 \\\\ 2 \\cdot 7 + 4 \\cdot 1 \\\\ 1 \\cdot 7 + 1 \\cdot 1 \\end{bmatrix}\\begin{bmatrix} 10 \\\\ 18 \\\\ 8 \\end{bmatrix}\\)\n\n# Matrix x vector multiplication in R\nA <- matrix(c(1,3,2,4,1,1), byrow=3, ncol=2)\nC <- c(7,1)\n\n# NB the %*% syntax, correct for matrix x vector\nA %*% C\n\n     [,1]\n[1,]   10\n[2,]   18\n[3,]    8\n\n# NB this will also evaluate, but has a different result...\n# Can you tell what is going on here?\nA * C\n\n     [,1] [,2]\n[1,]    7    3\n[2,]    2   28\n[3,]    7    1\n\n\n\n\n3.6 Multiplying matrix x matrix\n(Here it gets tricky)\nLet \\(A\\) be an \\(r \\times c\\) matrix and \\(B\\) be a \\(c \\times t\\) matrix, where the number of columns in \\(A\\) is equal to the number of rows in \\(B\\).\n\n# Matrix x matrix multiplication in R\nA <- matrix(c(1, 3, 2, 2, 8, 9), ncol = 2)\nB <- matrix(c(5, 8, 4, 2), ncol = 2)\n\n# NB the %*% syntax\nA %*% B\n\n     [,1] [,2]\n[1,]   21    8\n[2,]   79   28\n[3,]   82   26\n\n\n\n\n3.7 Vectors as matrics\nVectors can be treated as matrices and in R can be coerced to matrix objects, where a column vector of length \\(r\\) becomes an \\(r \\times 1\\) matrix or a row vector of length \\(c\\) becomes a \\(1 \\times c\\) matrix\n\n# Vectors as matrices in R\n\n# Vanilla numeric vector\n(A <- c(4,5,8)); class(A)\n\n[1] 4 5 8\n\n\n[1] \"numeric\"\n\n# Column matrix\n(A <- matrix(c(4,5,8), nrow=3)); class(A)\n\n     [,1]\n[1,]    4\n[2,]    5\n[3,]    8\n\n\n[1] \"matrix\" \"array\" \n\n# Row matrix\n(A <- matrix(c(4,5,8), ncol=3)); class(A)\n\n     [,1] [,2] [,3]\n[1,]    4    5    8\n\n\n[1] \"matrix\" \"array\" \n\n\n\n\n3.8 Special matrics\n– Square matrix An n × n matrix\n– Symmetric matrix A is if \\(A = A^\\intercal\\).\n– 0-matrix A matrix with 0 on all entries, often written simply as 0.\n– 1-matrix A matrix with 1 on all entries, often written simply as J.\n– Diagonal matrix A square matrix with 0 on all off–diagonal entries and elements d1, d2, … , dn on the diagonal, often written diag{d1, d2, … , dn}\n– Identity matrix is one with with all 1s on the diagonal, denoted I and satisfies that IA = AI = A.\n\n# 0-matrix\nmatrix(0, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n# 1-matrix\nmatrix(1, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n\n# Diagonal matrix\ndiag(c(1, 2, 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    2    0\n[3,]    0    0    3\n\n# Identity matrix\ndiag(1, 3)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n# Note what happens when diag() is applied to a matrix\n(D <- diag(c(4,3,5)))\n\n     [,1] [,2] [,3]\n[1,]    4    0    0\n[2,]    0    3    0\n[3,]    0    0    5\n\ndiag(D)\n\n[1] 4 3 5\n\n(A <- matrix(c(1,3,2,2,6,8,9,3,4), ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    2    9\n[2,]    3    6    3\n[3,]    2    8    4\n\ndiag(A)\n\n[1] 1 6 4\n\n\n\n\n3.9 Inverse of a matrix\nThe inverse of an \\(n × n\\) matrix \\(A\\) is the \\(n × n\\) matrix \\(B\\) (which is which when multiplied with A gives the identity matrix I. That is, \\(AB = BA = I\\).\nThus\n\\(B\\) is the inverse of \\(A\\), written as \\(B = A^{−1}\\) and\n\\(A\\) is the inverse of \\(B\\), written as \\(A = B^{−1}\\)\nNumeric example\n$ A =\n\\[\\begin{bmatrix} 1 & 3 \\\\  2 & 4 \\end{bmatrix}\\]\n$\n$ B =\n\\[\\begin{bmatrix} -2 & 1.5 \\\\  1 & -0.5 \\end{bmatrix}\\]\n$\nWe can show \\(AB = BA = I\\), thus \\(B=A^{-1}\\)\n\n# Inverse of matrices\n\n(A <- matrix(c(1,3,2,4), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(B <- matrix(c(-2,1.5,1,-0.5), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\nA%*%B\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\nB%*%A == diag(1,2)\n\n     [,1] [,2]\n[1,] TRUE TRUE\n[2,] TRUE TRUE\n\n\n– Only square matrices can have an inverse, but not all square matrices have an inverse. – When the inverse exists, it is unique. – Finding the inverse of a large matrix A is numerically complicated (but computers do it for us).\n\n# Solving the inverse of a matrix in R using solve()\n\n(A <- matrix(c(1,3,2,4), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(B <- solve(A))\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\n# Prove the rule\nA %*% B\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1"
  },
  {
    "objectID": "lab01-lin-alg.html#special-topics",
    "href": "lab01-lin-alg.html#special-topics",
    "title": "Lab 01 Linear alg.",
    "section": "4 Special topics",
    "text": "4 Special topics\n\n4.1 Solving linear equations\nMatrix math is related to math that can be used to solve linear equation systems. This is a very large topic and we will only briefly touch upon it, but it is core in statistics and in machine learning. We can sometimes ignore the details, but awareness of this area of math will likely be beneficial.\nConsider these two linear equations\nEq 1: \\(x_1 + 3x_2 = 7\\)\nEq 2: \\(2x_1 + 4x_2 = 10\\)\nWe can write this “system” of equations in matrix form, from which is derived the notation for statistical linear models. Let’s define the matrices \\(A\\), \\(x\\) and \\(b\\) as:\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} = \\begin{bmatrix} 7 \\\\ 10 \\end{bmatrix}\\), i.e. \\(Ax = b\\)\nBecause \\(A^{-1}A = I\\) and \\(Ix=x\\):\n\\(x = A^{-1}b = \\begin{bmatrix} -2 & 1.5 \\\\ 1 & -0.5 \\end{bmatrix} \\begin{bmatrix} 7 \\\\ 10 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\)\nThis way of thinking is the foundation of the linear model and we can exploit it to isolate and “solve” for the x values. E.g. we can isolate and solve for \\(x_2\\) as:\nEq 1 (rerarranged): \\(x_2 = \\frac{7}{3}-\\frac{1}{3}x_1\\)\nEq 2 (rerarranged): \\(x_2 = \\frac{10}{4}-\\frac{2}{4}x_1\\)\n\\(x_2 = \\frac{7}{3}-\\frac{1}{3}x_1\\)\n\\(x_2 = \\frac{10}{4}-\\frac{2}{4}x_1\\)\nNow we can graphically represent these equations, which are two lines and which demonstrate the solutions\n\nplot(x=NULL, y=NULL,\n     xlim = c(-1,3), ylim = c(-1,3),\n     pch = 16, \n     xlab=expression('x'[1]), \n     ylab=expression('x'[2]))\nabline(h=c(-1:3),v=c(-1:3),\n       lty=2, col='green3')\nabline(h=0, v=0, lwd=2)\n\nabline(a=7/3, b=-1/3, col=\"red\", lwd=2)\nabline(a=10/4, b=-2/4, col=\"red\", lwd=2)\n\n\n\n\nThe lines represent the solved equations above, and it can be seen that they cross at a single point, the solutions for \\(x_1\\) and \\(x_2\\), \\(x_1 = 1\\) and \\(x_2=2\\), respectively.\n\nA <- matrix(c(1, 2, 3, 4), ncol = 2)\nb <- c(7, 10)\n(x <- solve(A) %*% b)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\nWhile in this example we see exactly 1 solution, there are several possibilities in general:\n\nExactly one solution – when the lines intersect in one point\nNo solutions – when the lines are parallel but not identical\nInfinitely many solutions – when the lines coincide.\n\n\n\n4.2 Matrix equalities\nHere are a few additional properties of matrices\n\\((A + B)^\\intercal = A^\\intercal + B^\\intercal\\)\n\\((AB)^\\intercal = B^\\intercal A^\\intercal\\)\n\\(A(B + C) = AB + AC\\)\n\\(AB = AC \\not\\Rightarrow B = C\\)\n\\(AB \\neq BA\\) (in general)\n\\(AI = IA = A\\)\nIf \\(\\alpha\\) is a number then \\(\\alpha AB = A(\\alpha B)\\)\n\n\n4.3 Least squares\nConsider the following paired values\n\ndf <- data.frame(x=c(1,2,3,4,5),\n                 y=c(3.7, 4.2,4.9,5.7,6.0))\ndf\n\n  x   y\n1 1 3.7\n2 2 4.2\n3 3 4.9\n4 4 5.7\n5 5 6.0\n\n\nWe can plot these values and note that the relationship is approvimately linear (i.e., a straight line can be drawn that comes close to all the values)\n\n\n\n\n\nWe can notate the linear relationship between \\(x\\) and \\(y\\) with\n\\(y_i = \\beta_0 +\\beta_1x_i\\) for \\(i = 1, \\dots, 5\\)\nThis can be written in matrix form\n\\(y = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_5 \\end{bmatrix} \\approx \\begin{bmatrix} 1 & x_1 \\\\ 1 & x_2 \\\\ \\vdots & \\vdots \\\\1 & x_5 \\\\ \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\\\ \\beta_1\\end{bmatrix} = \\mathbf{X \\beta}\\)\nGiven that we have vectors \\(y\\) and \\(x\\), how can we find the vector \\(\\mathbf{\\beta}\\) to satisfy this equality such that \\(y=X \\beta\\)?\nActually, the answer is no because this would require the points to lie on an exactly straight line! However, it may be useful to find an estimate of \\(\\beta\\) such that \\(\\mathbf{X \\beta}\\) is “as close to \\(y\\) as possible”. Let’s call this estimate \\(\\hat{\\beta}\\)\nTo do this we would like to find \\(\\hat{\\beta}\\) that minimizes the equation\n\\(e=y- \\mathbf{X \\beta}\\)\nThe solution to this problem is the basis of linear regression and other linear statistical models:\n\\(\\hat{\\beta} = (X^\\intercal X)^{-1} X^\\intercal y\\)\n\ny <- c(3.7, 4.2,4.9,5.7,6.0)\nx <- c(1,2,3,4,5)\nX <- matrix(c(rep(1,5), x), ncol=2, byrow=F)\ncolnames(X) <- c('','x')\n\ny\n\n[1] 3.7 4.2 4.9 5.7 6.0\n\nX\n\n       x\n[1,] 1 1\n[2,] 1 2\n[3,] 1 3\n[4,] 1 4\n[5,] 1 5\n\n# this solves \"Beta hat\"\n# NB, the intercept and slope coeeficients for linear regression!\n(beta.hat <- solve(t(X) %*% X) %*% t(X) %*% y)\n\n  [,1]\n  3.07\nx 0.61"
  },
  {
    "objectID": "lab01-lin-alg.html#exercises",
    "href": "lab01-lin-alg.html#exercises",
    "title": "Lab 01 Linear alg.",
    "section": "5 Exercises",
    "text": "5 Exercises\n\n5.1 The bird table\nOn a sunny day, two tables are standing in an English country garden. On each table are *birds of unknown species are sitting having the time of their lives. A bird from the first table says to those on the second table: “Hi – if one of you come to our table then there will be the same number of us on each table”. “Yeah, right”, says a bird from the second table, “but if one of you comes to our table, then we will be twice as many on our table as on yours”.\n*(because this is a maths question, here we have the ability to assume by birds we may mean something theoretical, and the count of which may assume any value from the infinite set of integers positive or negative…)\nQuestion: How many birds are on each table?\n\nWrite up two equations with two unknowns\nSolve these equations using the methods you have learned from linear algebra\nSimply finding the solution by trial–and–error is invalid (and will probably lead to frustration, especially if the question is taken literally - i.e., USE THE TOOLS we practiced)"
  },
  {
    "objectID": "lab01-lin-alg.html#resources",
    "href": "lab01-lin-alg.html#resources",
    "title": "Lab 01 Linear alg.",
    "section": "Resources",
    "text": "Resources\nHere are a few web resources for self learning if you wish to go farther\n3Blue1Brown Essence of linear algebra\nKhan Academy linear algebra series\nCoursera Mathematics for machine learning linear algebra course (Imperial College London - free to audit)\nMIT x18.06 Gilbert Strang’s famous linear algebra course"
  },
  {
    "objectID": "lab01-lin-alg.html#harper-adams-data-science",
    "href": "lab01-lin-alg.html#harper-adams-data-science",
    "title": "Lab 01 Linear alg.",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab02-R-practice.html",
    "href": "lab02-R-practice.html",
    "title": "Lab 02 R practice",
    "section": "",
    "text": "The purpose of this lab is to practice some R basics that we will begin using right away. If you are already proficient in R and need no practice, feel free to skip ahead to the Exercises to test yourself."
  },
  {
    "objectID": "lab02-R-practice.html#basic-commands",
    "href": "lab02-R-practice.html#basic-commands",
    "title": "Lab 02 R practice",
    "section": "1 Basic commands",
    "text": "1 Basic commands\n\nc()\nR uses functions to perform operations. To run a function called funcname, we type funcname(input1, input2), where the inputs (or arguments) input1 and input2 tell R how to run the function. A function can have any number of inputs. For example, to create a vector of numbers, we use the function c() (for concatenate). Any numbers inside the parentheses are joined together. The following command instructs R to join together the numbers 1, 3, 2, and 5, and to save them as a vector named x. When we type x, it gives us back the vector.\n\nx <- c(1,3,2,5)\nx\n\n[1] 1 3 2 5\n\n\n\n\n<- value assignment\nWe can also “save things” (i.e. assign values) using = rather than <-, though the “arrow” syntax is the standard style in R:\n\nx = c(1,6,2)\nx\n\n[1] 1 6 2\n\ny = c(1,4,3) # why doesn't this \"print out\"?\n\n\n\nlength()\nHitting the up arrow multiple times will display the previous commands, which can then be edited. This is useful since one often wishes to repeat a similar command. In addition, typing ?funcname will always cause R to open a new help file window with additional information about the function funcname. We can tell R to add two sets of numbers together. It will then add the first number from x to the first number from y, and so on. However, x and y should be the same length. We can check their length using the length() function.\n\n\nls() , rm()\nThe ls() function allows us to look at a list of all of the objects, such as data and functions, that we have saved so far. The rm() function can be used to delete any that we don’t want.\n\nls()\n\n[1] \"x\" \"y\"\n\nrm(x,y)\nls()\n\ncharacter(0)\n\n\nIt’s also possible to remove all objects at once without explicitly naming them (handy of you have more than few data objects in you Global Environment):\n\nx = c(1,6,2)\ny = c(1,4,3)\nls()\n\n[1] \"x\" \"y\"\n\nrm(list=ls()) # do you see what the 'list' argument does here?\nls()\n\ncharacter(0)\n\n\n\n\nmatrix()\nThe matrix() function is used to create a matrix of numbers. Before we use the matrix() function, we can learn more about it to examine the arguments:\n\n# ?matrix\n\nThe help ﬁle reveals that the matrix() function takes a number of inputs, but for now we focus on the ﬁrst three: the data (the entries in the matrix), the number of rows, and the number of columns. First, we create a simple matrix.\n\nx <-  matrix( data=c(1 ,2 ,3 ,4) , nrow =2 , ncol =2)\nx\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nNote that we could just as well omit explicitly typing data=, nrow=, and ncol= in the matrix() command above: that is, we could just type:\n\nx <- matrix ( c(1 ,2 ,3 ,4) ,2 ,2)\n\nand this would have the same effect. However, it can sometimes be useful to specify the names of the arguments passed in, since otherwise R will assume that the function arguments are passed into the function in the same order that is given in the function’s help ﬁle. As this example illustrates, by default R creates matrices by successively ﬁlling in columns. Alternatively, the byrow=TRUE option can be used to populate the matrix in order of the rows.\n\nx <- matrix ( c(1 ,2 ,3 ,4) ,2 ,2, byrow=TRUE)\n\n\n\nsqrt() sqare root\nNotice that in the above command we did not assign the matrix to a value such as x. In this case the matrix is printed to the screen but is not saved for future calculations. The sqrt() function returns the square root of each element of a vector or matrix. The command x^2 raises each element of x to the power 2; any powers are possible, including fractional or negative powers.\n\nsqrt(x)\n\n         [,1]     [,2]\n[1,] 1.000000 1.414214\n[2,] 1.732051 2.000000\n\nx^2\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    9   16\n\n\n\n\nrnorm(), cor() random Gaussian numbers, correlation\nThe rnorm() function generates a vector of random normal variables, with ﬁrst argument n the sample size. Each time we call this function, we will get a diﬀerent answer. Here we create two correlated sets of numbers, x and y, and use the cor() function to compute the correlation between them.\n\nx <- rnorm(50)\ny <- x+ rnorm(50 , mean =50 , sd =.1)\ncor(x, y)\n\n[1] 0.9960191\n\n\n\n\nset.seed makes ‘pseudo-random’ events repeatable\nBy default, rnorm() creates standard normal random variables with a mean of 0 and a standard deviation of 1. However, the mean and standard devi- ation can be altered using the mean and sd arguments, as illustrated above. Sometimes we want our code to reproduce the exact same set of random numbers; we can use the set.seed() function to do this. The set.seed() function takes an (arbitrary) integer argument.\n\nrnorm(5); rnorm(5)\n\n[1] -0.3594552  1.2756491 -0.8241636 -0.1430807  1.2398465\n\n\n[1] -0.9295610  0.9780539 -0.3313065 -0.7062943  0.5457256\n\nset.seed(42); rnorm(5); set.seed(42); rnorm(5)\n\n[1]  1.3709584 -0.5646982  0.3631284  0.6328626  0.4042683\n\n\n[1]  1.3709584 -0.5646982  0.3631284  0.6328626  0.4042683\n\n\nWe will endeavor to use set.seed() throughout the labs whenever we perform calculations involving random quantities. In general this should allow the user to reproduce the results. However, it should be noted that as new versions of R become available discrepancies may form between the labs and the output from R.\n\n\nmean(), sd(), and var()\nThe mean() and var() functions can be used to compute the mean and variance of a vector of numbers. Applying sqrt() to the output of var() will give the standard deviation. Or we can simply use the sd() function.\n\nset.seed(3)\ny <- rnorm(100, 10, 1)\nmean(y)\n\n[1] 10.01104\n\nvar(y)\n\n[1] 0.7328675\n\nsqrt(y)\n\n  [1] 3.006338 3.115682 3.202934 2.974537 3.193084 3.167037 3.175755 3.334158\n  [9] 2.963299 3.356690 3.042239 2.978050 3.046907 3.201976 3.186228 3.113253\n [17] 3.007820 3.058064 3.350271 3.193714 3.069449 3.009601 3.129900 2.886785\n [25] 3.084728 3.042849 3.340751 3.318443 3.150860 2.977116 3.301609 3.294203\n [33] 3.275319 3.276660 3.106102 3.271928 3.361601 3.168320 3.003451 3.285386\n [41] 3.284282 3.112802 3.420363 3.034041 3.216899 2.781115 3.136526 3.336295\n [49] 3.089410 3.016759 3.275185 3.031593 3.204229 2.874498 2.930627 3.089733\n [57] 2.994079 3.370778 3.304157 3.035598 3.251695 3.304269 3.202544 3.217447\n [65] 3.342804 3.085313 3.095347 3.309851 2.951439 3.191582 3.157321 3.235289\n [73] 3.320271 3.204272 3.198723 3.278352 3.349189 3.222322 3.001991 3.137379\n [81] 3.425717 3.106075 3.269349 3.350284 3.285467 3.161265 3.196741 3.018863\n [89] 3.231062 3.018876 3.024265 3.001667 3.057633 3.324748 3.099858 3.151097\n [97] 3.088357 3.246676 3.306302 3.129014\n\nsd(y)\n\n[1] 0.8560768"
  },
  {
    "objectID": "lab02-R-practice.html#basic-graphics",
    "href": "lab02-R-practice.html#basic-graphics",
    "title": "Lab 02 R practice",
    "section": "2 Basic graphics",
    "text": "2 Basic graphics\n\nplot()\nThe plot() function is the primary way to plot data in R. For instance, plot(x,y) produces a scatterplot of the numbers in x versus the numbers in y. There are many additional options that can be passed in to the plot() function. For example, passing in the argument xlab will result in a label on the x-axis. To ﬁnd out more information about the plot() function, don’t forget to use ?plot.\n\nx <- rnorm(100)\ny <- rnorm(100)\nplot(x,y) # yuck\n\n\n\nplot(x,y, xlab=\" this is the x- axis\", \n     ylab =\" this is the y - axis\", \n     main =\" Plot of X vs Y \") # better\n\n\n\n\n\n\nOutput functions pdf(), png(), jpg()\nWe will often want to save the output of an R plot. The command that we use to do this will depend on the ﬁle type that we would like to create. For instance, to create a pdf, we use the pdf() function, and to create a jpeg, we use the jpeg() function, png(), etc.\n\n# This code will output a graph file to your working directory\npng(\"MyFigure.png\") # think of this as opening the file\nplot(x, y, pch=16, col =\"green\") # writing something for that file\ndev.off() # turning off the output to file\n\npng \n  2 \n\n\nThe function dev.off() indicates to R that we are done creating the plot. Alternatively, we can simply copy the plot window and paste it into an appropriate ﬁle type, such as a Word document.\n\n\nseq()\nThe function seq() can be used to create a sequence of numbers. For instance, seq(a,b) makes a vector of integers between a and b. There are many other options: for instance, seq(0,1,length=10) makes a sequence of 10 numbers that are equally spaced between 0 and 1. Typing 3:11 is a shorthand for seq(3,11) for integer arguments.\n\nx <- seq(1,10)\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx <- 1:10\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nx <- seq(-pi, pi, length = 50)\nx\n\n [1] -3.14159265 -3.01336438 -2.88513611 -2.75690784 -2.62867957 -2.50045130\n [7] -2.37222302 -2.24399475 -2.11576648 -1.98753821 -1.85930994 -1.73108167\n[13] -1.60285339 -1.47462512 -1.34639685 -1.21816858 -1.08994031 -0.96171204\n[19] -0.83348377 -0.70525549 -0.57702722 -0.44879895 -0.32057068 -0.19234241\n[25] -0.06411414  0.06411414  0.19234241  0.32057068  0.44879895  0.57702722\n[31]  0.70525549  0.83348377  0.96171204  1.08994031  1.21816858  1.34639685\n[37]  1.47462512  1.60285339  1.73108167  1.85930994  1.98753821  2.11576648\n[43]  2.24399475  2.37222302  2.50045130  2.62867957  2.75690784  2.88513611\n[49]  3.01336438  3.14159265"
  },
  {
    "objectID": "lab02-R-practice.html#special-plots",
    "href": "lab02-R-practice.html#special-plots",
    "title": "Lab 02 R practice",
    "section": "3 Special plots",
    "text": "3 Special plots\n\ncontour() plot\nWe will now create some more sophisticated plots. The contour() function produces a contour plot in order to represent three-dimensional data; it is like a topographical map. It takes three arguments:\n\nA vector of the x values (the ﬁrst dimension),\nA vector of the y values (the second dimension), and\nA matrix whose elements correspond to the z value (the third dimension) for each pair of (x,y) coordinates.\n\nAs with the plot() function, there are many other inputs that can be used to ﬁne tune the output of the contour() function. To learn more about these, take a look at the help ﬁle by typing ?contour.\n\n# don't worry too much about this code, but can you figure out what it does?\n\nx <- y <- 1:10\nf <- outer(x,y, function(x,y) cos(y)/(1+x^2))\ncontour(x,y,f)\n\n\n\nfa <- ( f- t(f))/2\ncontour (x,y, fa , nlevels = 15)\n\n\n\n\n\n\nimage() and persp()\nThe image() function works the same way as contour(), except that it produces a color-coded plot whose colors depend on the z value. This is known as a heatmap, and is sometimes used to plot temperature in weather forecasts. Alternatively, persp() can be used to produce a three-dimensional plot. The arguments theta and phi control the angles at which the plot is viewed.\n\nimage(x, y, fa)\n\n\n\npersp(x, y, fa)\n\n\n\npersp(x, y, fa, theta =30)\n\n\n\npersp(x, y, fa, theta =30, phi = 20) # not enough\n\n\n\npersp(x, y, fa, theta =30, phi = 70) # too much\n\n\n\npersp(x, y, fa, theta =30, phi = 40) # juust right"
  },
  {
    "objectID": "lab02-R-practice.html#data-operations",
    "href": "lab02-R-practice.html#data-operations",
    "title": "Lab 02 R practice",
    "section": "4 Data operations",
    "text": "4 Data operations\n\nIndexing values\nWe often wish to examine part of a set of data. Suppose that our data is stored in the matrix A.\n\nA <- matrix(1:16, 4, 4)\nA\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n[3,]    3    7   11   15\n[4,]    4    8   12   16\n\n\nThen submitting:\n\nA[2,3]\n\n[1] 10\n\n\nwill select the element corresponding to the second row and the third co umn. The ﬁrst number after the open-bracket symbol [ always refers to the row, and the second number always refers to the column. We can also select multiple rows and columns at a time, by providing vectors as the indices.\n\nA[c(1,3), c(2,4)]\n\n     [,1] [,2]\n[1,]    5   13\n[2,]    7   15\n\nA[1:3, 2:4]\n\n     [,1] [,2] [,3]\n[1,]    5    9   13\n[2,]    6   10   14\n[3,]    7   11   15\n\nA[1:2,]\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9   13\n[2,]    2    6   10   14\n\nA[,1:2]\n\n     [,1] [,2]\n[1,]    1    5\n[2,]    2    6\n[3,]    3    7\n[4,]    4    8\n\n\nThe last two examples include either no index for the columns or no index for the rows. These indicate that R should include all columns or all rows, respectively. R treats a single row or column of a matrix as a vector.\n\nA[1,]\n\n[1]  1  5  9 13\n\n\nThe use of a negative sign - in the index tells R to keep all rows or columns except those indicated in the index.\n\nA[-c(1,3),]\n\n     [,1] [,2] [,3] [,4]\n[1,]    2    6   10   14\n[2,]    4    8   12   16\n\nA[-c(1 ,3) ,-c(1 ,3 ,4)]\n\n[1] 6 8\n\n\n\n\ndim()\nThe dim() function outputs the number of rows followed by the number of columns of a given matrix.\n\ndim(A)\n\n[1] 4 4\n\n\n\n\nLoading data\nFor most analyses, the ﬁrst step involves importing a data set into R. The read.table() function is one of the primary ways to do this. The help ﬁle contains details about how to use this function. We can use the function write.table() to export data.\nBefore attempting to load a data set, we must make sure that R knows to search for the data in the proper directory. For example on a Windows system one could select the directory using the Change dir... option under the File menu. However, the details of how to do this depend on the operating system (e.g. Windows, Mac, Unix) that is being used.\nHere you will begin by loading in the Auto data set, which is part of the R library {ISLR2}, but to illustrate the read.table() function we load it now from a text ﬁle. The following command will load the Auto.data ﬁle into R and store it as an object called Auto, in a format referred to as a data frame.\n\n\nAuto data\nDownload the Auto.csv data file\nOnce the data has been loaded, the fix() function can be used to view it in a spreadsheet like window. However, the window must be closed before further R commands can be entered.\n\n# Your code may look similar\n# Auto <- read.csv(\"Auto.csv\")\n# fix(Auto)\n\nPeek at the data (note the view may wrap around the lines)\n\n\n  mpg cylinders displacement horsepower weight acceleration year origin\n1  18         8          307        130   3504         12.0   70      1\n2  15         8          350        165   3693         11.5   70      1\n3  18         8          318        150   3436         11.0   70      1\n4  16         8          304        150   3433         12.0   70      1\n5  17         8          302        140   3449         10.5   70      1\n6  15         8          429        198   4341         10.0   70      1\n                       name\n1 chevrolet chevelle malibu\n2         buick skylark 320\n3        plymouth satellite\n4             amc rebel sst\n5               ford torino\n6          ford galaxie 500\n\n\nNote that data like these are usually simply a text ﬁle, which you could alternatively open on your computer using a standard text editor. It is often a good idea to view a data set using a text editor or other software such as Excel before loading it into R…\nThis particular data set has probably not loaded correctly for you on the first try, because\n\nR has assumed that the variable names are part of the data and so has included them in the ﬁrst row.\nThe data set also includes a number of missing observations, indicated by a question mark ?.\nThere is a problematic character (at least one…) in the name variable on row 12.\n\nMissing values are a common occurrence in real data sets. Using the argument header=T (or header=TRUE) in the read.table() function tells R that the ﬁrst line of the ﬁle contains the variable names, and using the option na.strings tells R that any time it sees a particular character or set of characters (such as a question mark), it should be treated as a missing element of the data matrix.\n\n# try this\n# Auto <- read.csv(\"data/Auto.csv\", sep = ',', header = T , na.strings = \"?\")\n# fix(Auto)\n\nOnce the data are loaded correctly\n\n# try this\n\n# dim(Auto)\n# Auto[1:4, ]\n# names(Auto)\n\n\n\nGraphical and numerical summary\nWe can use the plot() function to produce scatterplots of the quantitative variables. However, simply typing the variable names will produce an error message, because R does not know to look inside the Auto data object for those variables.\n\n\n\n\n# try this\n# plot(cylinders, mpg) #error\n# Error in plot(cylinders, mpg) : object 'cylinders' not found\n\n\nplot( Auto$cylinders,  Auto$mpg )\n\n\n\n\n\n\nattach()\nTo refer to a variable explicitly, we can type the data set and the variable name joined with a $ (cash) symbol. Alternatively, we can use the attach() function in order to tell R to make the variables in this data frame available by name.\n\nattach(Auto)\nplot(cylinders, mpg)\n\n\n\n\nThe cylinders variable is stored as a numeric vector, so R has treated it as quantitative. However, since there are only a small number of possible values for cylinders, one may prefer to treat it as a qualitative variable. The as.factor() function converts quantitative variables into qualitative variables.\n\ncylinders <- as.factor(cylinders)\n\nIf a variable plotted on the x-axis is categorial, then boxplots will automatically be produced by the plot() function. As usual, a number of options can be speciﬁed in order to customize the plots.\n\nplot(cylinders, mpg)\n\n\n\nplot(cylinders, mpg, col =\"goldenrod\") # Ed's favourite R colour\n\n\n\nplot(cylinders, mpg, col =\"goldenrod\", varwidth = T)\n\n\n\nplot(cylinders, mpg, col =\"goldenrod\", varwidth = T , horizontal = T)\n\n\n\nplot(cylinders, mpg, col =\"goldenrod\", varwidth = T , \n     xlab=\"cylinders\", ylab =\"MPG\")\n\n\n\n\n\n\nhist()\nThe hist() function can be used to plot a histogram. Note that indexing the base color pallette numerically is possible, such that col=2 has the same effect as col=\"red\".\n\nhist(mpg)\n\n\n\nhist(mpg, col = 2)\n\n\n\nhist(mpg, col = 2, breaks = 15)\n\n\n\n\n\n\npairs()\nThe pairs() function creates a scatterplot matrix i.e. a scatterplot for every pair of variables for any given data set. We can also produce scatterplots for just a subset of the variables.\n\npairs(~ mpg + displacement + horsepower + weight + acceleration, Auto )\n\n\n\n\n\n\nidentify()\nIn conjunction with the plot() function, identify() provides a useful interactive method for identifying the value for a particular variable for points on a plot. We pass in three arguments to identify(): the x-axis variable, the y-axis variable, and the variable whose values we would like to see printed for each point. Then clicking on a given point in the plot will cause R to print the value of the variable of interest. Right-clicking on the plot will exit the identify() function (control-click on a Mac). The numbers printed under the identify() function correspond to the rows for the selected points.\n\nplot(horsepower, mpg)\n\n\n\n# this only works on your local machine - try it\n# identify(horsepower, mpg, name)\n\n\n\nsummary()\nThe summary() function produces a numerical summary of each variable in a particular data set.\n\nsummary(Auto)\n\n      mpg          cylinders      displacement     horsepower        weight    \n Min.   : 9.00   Min.   :3.000   Min.   : 68.0   Min.   : 46.0   Min.   :1613  \n 1st Qu.:17.00   1st Qu.:4.000   1st Qu.:105.0   1st Qu.: 75.0   1st Qu.:2225  \n Median :22.75   Median :4.000   Median :151.0   Median : 93.5   Median :2804  \n Mean   :23.45   Mean   :5.472   Mean   :194.4   Mean   :104.5   Mean   :2978  \n 3rd Qu.:29.00   3rd Qu.:8.000   3rd Qu.:275.8   3rd Qu.:126.0   3rd Qu.:3615  \n Max.   :46.60   Max.   :8.000   Max.   :455.0   Max.   :230.0   Max.   :5140  \n                                                                               \n  acceleration        year           origin                      name    \n Min.   : 8.00   Min.   :70.00   Min.   :1.000   amc matador       :  5  \n 1st Qu.:13.78   1st Qu.:73.00   1st Qu.:1.000   ford pinto        :  5  \n Median :15.50   Median :76.00   Median :1.000   toyota corolla    :  5  \n Mean   :15.54   Mean   :75.98   Mean   :1.577   amc gremlin       :  4  \n 3rd Qu.:17.02   3rd Qu.:79.00   3rd Qu.:2.000   amc hornet        :  4  \n Max.   :24.80   Max.   :82.00   Max.   :3.000   chevrolet chevette:  4  \n                                                 (Other)           :365  \n\n\nFor qualitative variables such as name, R will list the number of observations that fall in each category. We can also produce a summary of just a single variable.\n\nsummary(mpg)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   9.00   17.00   22.75   23.45   29.00   46.60 \n\n\n\n\nEnding your R session\nOnce we have ﬁnished using R, we type q() in order to shut it down, or quit. When exiting R, we have the option to save the current workspace so that all objects (such as data sets) that we have created in this R session will be available next time. Before exiting R, we may want to save a record of all of the commands that we typed in the most recent session; this can be accomplished using the savehistory() function. Next time we enter R, we can load that history using the loadhistory() function (useful in some circumstances)."
  },
  {
    "objectID": "lab02-R-practice.html#exercises",
    "href": "lab02-R-practice.html#exercises",
    "title": "Lab 02 R practice",
    "section": "5 Exercises",
    "text": "5 Exercises\n\nExercise 1\nThis exercise relates to the College data set csv file. It contains a number of variables for 777 different universities in the US. The variables are\n\nPrivate : Public/private indicator\nApps : Number of applications received\nAccept : Number of applicants accepted\nEnroll : Number of new students enrolled\nTop10perc : New students from top 10% of high school class\nTop25perc : New students from top 25% of high school class\nF.Undergrad : Number of full-time undergraduates\nP.Undergrad : Number of part-time undergraduates\nOutstate : Out-of-state tuition\nRoom.Board : Room and board costs\nBooks : Estimated book costs\nPersonal : Estimated personal spending\nPhD : Percent of faculty with Ph.D.’s\nTerminal : Percent of faculty with terminal degree\nS.F.Ratio : Student/faculty ratio\nperc.alumni : Percent of alumni who donate\nExpend : Instructional expenditure per student\nGrad.Rate : Graduation rate\n\nBefore reading the data into R, it can be viewed in Excel or a text editor.\n\n1.1\nUse the read.csv() function to read the data into R. Call the loaded data college. Make sure that you have the directory set to the correct location for the data.\n\n\n1.2\nLook at the data using the View() function. You should notice that the first column is just the name of each university. We don’t really want R to treat this as data. However, it may be handy to have these names for later. Try the following commands:\n\n# try this\n# rownames(college) <- college[, 1]\n# View(college) \n\nYou should see that there is now a row.names column with the name of each university recorded. This means that R has given each row a name corresponding to the appropriate university. R will not try to perform calculations on the row names. However, we still need to eliminate the first column in the data where the names are stored. Try\n\n# try this\n# college <- college[, 1]\n# View(college) \n\nNow you should see that the first data column is Private. Note that another column labeled row.names now appears before the Private column. However, this is not a data column but rather the name that R is giving to each row.\n\n\n1.3\nUse the summary() function to produce a numerical summary of the variables in the data set.\n\n\n1.4\nUse the pairs() function to produce a scatterplot matrix of the first ten columns or variables of the data. Recall that you can reference the first ten columns of a matrix A using A[,1:10].\n\n\n1.5\nUse the plot() function to produce side-by-side boxplots of Outstate versus Private. Briefly interpret the information the graph conveys.\n\n\n1.6\nCreate a new qualitative variable, called Elite, by binning the Top10perc variable. We are going to divide universities into two groups based on whether or not the proportion of students coming from the top 10% of their high school classes exceeds 50%.\n\n\n1.7\nUse the summary() function to see how many elite universities there are. Now use the plot() function to produce side-by-side boxplots of Outstate versus Elite. Briefly interpret the information the graph conveys.\n\n\n1.8\nUse the hist() function to produce some histograms with differing numbers of bins for a few of the quantitative variables. You may find the command par(mfrow = c(2, 2)) useful: it will divide the print window into four regions so that four plots can be made simultaneously. Modifying the arguments to this function will divide the screen in other ways."
  },
  {
    "objectID": "lab02-R-practice.html#harper-adams-data-science",
    "href": "lab02-R-practice.html#harper-adams-data-science",
    "title": "Lab 02 R practice",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab03-lin-reg.html",
    "href": "lab03-lin-reg.html",
    "title": "Lab 03 Linear regression",
    "section": "",
    "text": "The library() function is used to load libraries, or groups of functions and data sets that are not included in the base R distribution. Basic functions that perform least squares linear regression and other simple analyses come standard with the base distribution, but more exotic functions require additional libraries. Here we load the {MASS} package, which is a very large collection of data sets and functions. We also load the {ISLR} package, which includes the data sets associated with James et al. 2001.\n\nlibrary(MASS)\nlibrary(ISLR)\n\nIf you receive an error message when loading these libraries, it likely indicates that the corresponding library has not yet been installed on your system. Some libraries, such as {MASS}, come with R and do not need to be separately installed on your computer. However, other packages, such as {ISLR}, must be downloaded the ﬁrst time they are used. This can be done directly from within R. For example, on a Windows system, select the Install package option under the Packages tab. After you select any mirror site, a list of available packages will appear. Simply select the package you wish to install and R will automatically download the package. Alternatively, this can be done at the R command line via install.packages(\"ISLR\"). This installation only needs to be done the ﬁrst time you use a package. However, the library() function must be called each time you wish to use a given package.\n\n\n\nThe {MASS} library contains the Boston data set, which records medv (median house value) for 506 neighborhoods around the US city of Boston. We will seek to predict medv using 13 predictors such as rm (average number of rooms per house), age (average age of houses), and lstat (percent of households with low socioeconomic status).\n\nnames(Boston)\n\n [1] \"crim\"    \"zn\"      \"indus\"   \"chas\"    \"nox\"     \"rm\"      \"age\"    \n [8] \"dis\"     \"rad\"     \"tax\"     \"ptratio\" \"black\"   \"lstat\"   \"medv\"   \n\nhead(Boston)\n\n     crim zn indus chas   nox    rm  age    dis rad tax ptratio  black lstat\n1 0.00632 18  2.31    0 0.538 6.575 65.2 4.0900   1 296    15.3 396.90  4.98\n2 0.02731  0  7.07    0 0.469 6.421 78.9 4.9671   2 242    17.8 396.90  9.14\n3 0.02729  0  7.07    0 0.469 7.185 61.1 4.9671   2 242    17.8 392.83  4.03\n4 0.03237  0  2.18    0 0.458 6.998 45.8 6.0622   3 222    18.7 394.63  2.94\n5 0.06905  0  2.18    0 0.458 7.147 54.2 6.0622   3 222    18.7 396.90  5.33\n6 0.02985  0  2.18    0 0.458 6.430 58.7 6.0622   3 222    18.7 394.12  5.21\n  medv\n1 24.0\n2 21.6\n3 34.7\n4 33.4\n5 36.2\n6 28.7\n\n\n\n\n\nTo ﬁnd out more about the data set, we can type ?Boston. We will start by using the lm() function to ﬁt a simple linear regression model, with medv as the response and lstat as the predictor. The basic syntax is lm(y∼x,data), where y is the response, x is the predictor, and data is the data set in which these two variables are kept.\n\n# try this\n# lm.fit <- lm(medv~lstat)\n\nThe command causes an error because R does not know where to ﬁnd the variables medv and lstat. The next line tells R that the variables are in Boston. If we attach Boston, the ﬁrst line would work ﬁne because R now recognizes the variables. However, the data argument works here too.\n\nlm.fit <- lm(medv~lstat , data = Boston)\nattach(Boston)\nlm.fit <- lm(medv~lstat)\n\nIf we submit lm.fit, some basic information about the model is output. For more detailed information, we use summary(lm.fit). This gives us p-values and standard errors for the coeffcients, as well as the R2 statistic and F-statistic for the model.\n\nlm.fit\n\n\nCall:\nlm(formula = medv ~ lstat)\n\nCoefficients:\n(Intercept)        lstat  \n      34.55        -0.95  \n\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ lstat)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.168  -3.990  -1.318   2.034  24.500 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 34.55384    0.56263   61.41   <2e-16 ***\nlstat       -0.95005    0.03873  -24.53   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.216 on 504 degrees of freedom\nMultiple R-squared:  0.5441,    Adjusted R-squared:  0.5432 \nF-statistic: 601.6 on 1 and 504 DF,  p-value: < 2.2e-16\n\nnames(lm.fit)\n\n [1] \"coefficients\"  \"residuals\"     \"effects\"       \"rank\"         \n [5] \"fitted.values\" \"assign\"        \"qr\"            \"df.residual\"  \n [9] \"xlevels\"       \"call\"          \"terms\"         \"model\"        \n\ncoef(lm.fit)\n\n(Intercept)       lstat \n 34.5538409  -0.9500494 \n\n\nThe predict() function can be used to produce conﬁdence intervals and prediction intervals for the prediction of medv for a given value of lstat.\n\npredict(lm.fit, data.frame(lstat = ( c(5, 10, 15) )),\n        interval = \"confidence\") \n\n       fit      lwr      upr\n1 29.80359 29.00741 30.59978\n2 25.05335 24.47413 25.63256\n3 20.30310 19.73159 20.87461\n\npredict(lm.fit, data.frame(lstat = ( c(5, 10, 15) )),\n        interval = \"prediction\") \n\n       fit       lwr      upr\n1 29.80359 17.565675 42.04151\n2 25.05335 12.827626 37.27907\n3 20.30310  8.077742 32.52846\n\n\nFor instance, the 95% conﬁdence interval associated with a lstat value of 10 is (24.47, 25.63), and the 95% prediction interval is (12.828, 37.28). As expected, the conﬁdence and prediction intervals are centered around the same point (a predicted value of 25.05 for medv when lstat equals 10), but the latter are substantially wider.\nWe will now plot medv and lstat along with the least squares regression line using the plot() and abline() functions.\n\nplot(lstat , medv)\nabline(lm.fit)\n\n\n\n\nThere is some visual evidence for non-linearity in the relationship between lstat and medv. We will explore this issue later in this lab.\nThe abline() function can be used to draw any line, not just the least squares regression line. To draw a line with intercept a and slope b, we type abline(a,b). Below we experiment with some additional settings for plotting lines and points. The lwd=3 command causes the width of the regression line to be increased by a factor of 3; this works for the plot() and lines() functions also. We can also use the pch option to create different plotting symbols.\n\nplot(lstat , medv)\nabline(lm.fit, lwd = 3)\n\n\n\nplot(lstat , medv)\nabline(lm.fit, lwd = 3, col = \"red\")\n\n\n\nplot(lstat, medv, col = \"red\")\n\n\n\nplot(lstat, medv, pch = 20)\n\n\n\nplot(lstat, medv, pch =\"+\")\n\n\n\nplot(1:20, 1:20, pch = 1:20)\n\n\n\n\n\n\n\nNext we examine some diagnostic plots (discussed in Section 3.3.3 of James et al. 2021). Four diagnostic plots are automatically produced by applying the plot() function directly to the output from lm(). In general, this command will produce one plot at a time, and hitting Enter will generate the next plot. However, it is often convenient to view all four plots together. We can achieve this by using the par() function, which tells R to split the display screen into separate panels so that multiple plots can be viewed simultaneously. For example, par(mfrow=c(2,2)) divides the plotting region into a 2 × 2 grid of panels.\n\npar(mfrow = c(2, 2))\nplot(lm.fit)\n\n\n\n\nAlternatively, we can compute the residuals from a linear regression ﬁt using the residuals() function. The function rstudent() will return the studentized residuals, and we can use this function to plot the residuals against the ﬁtted values.\n\npar(mfrow = c(1, 3))\nplot(predict(lm.fit), residuals(lm.fit))\nplot(predict(lm.fit), rstudent(lm.fit))\nplot(residuals(lm.fit), rstudent(lm.fit)) # hmm actually these are the same\n\n\n\n\nOn the basis of the residual plots, there is some evidence of non-linearity. Leverage statistics can be computed for any number of predictors using the hatvalues() function.\n\npar(mfrow = c(1, 1))\nplot(hatvalues(lm.fit))\n\n\n\nwhich.max(hatvalues(lm.fit)) \n\n375 \n375 \n\n\nThe which.max() function identiﬁes the index of the largest element of a vector. In this case, it tells us which observation has the largest leverage statistic."
  },
  {
    "objectID": "lab03-lin-reg.html#multiple-regression",
    "href": "lab03-lin-reg.html#multiple-regression",
    "title": "Lab 03 Linear regression",
    "section": "2 Multiple regression",
    "text": "2 Multiple regression\nIn order to ﬁt a multiple linear regression model using least squares, we again use the lm() function. The syntax lm(y∼x1+x2+x3) is used to ﬁt a model with three predictors, x1, x2, and x3. The summary() function now outputs the regression coeﬃcients for all the predictors.\n\nlm.fit <- lm(medv ~ lstat + age, data = Boston )\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ lstat + age, data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.981  -3.978  -1.283   1.968  23.158 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 33.22276    0.73085  45.458  < 2e-16 ***\nlstat       -1.03207    0.04819 -21.416  < 2e-16 ***\nage          0.03454    0.01223   2.826  0.00491 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.173 on 503 degrees of freedom\nMultiple R-squared:  0.5513,    Adjusted R-squared:  0.5495 \nF-statistic:   309 on 2 and 503 DF,  p-value: < 2.2e-16\n\n\nThe Boston data set contains 13 variables, and so it would be cumbersome to have to type all of these in order to perform a regression using all of the predictors. Instead, we can use the following short-hand:\n\nlm.fit <- lm(medv ~ ., data = Boston)\nsummary(lm.fit)\n\n\nCall:\nlm(formula = medv ~ ., data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.595  -2.730  -0.518   1.777  26.199 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.646e+01  5.103e+00   7.144 3.28e-12 ***\ncrim        -1.080e-01  3.286e-02  -3.287 0.001087 ** \nzn           4.642e-02  1.373e-02   3.382 0.000778 ***\nindus        2.056e-02  6.150e-02   0.334 0.738288    \nchas         2.687e+00  8.616e-01   3.118 0.001925 ** \nnox         -1.777e+01  3.820e+00  -4.651 4.25e-06 ***\nrm           3.810e+00  4.179e-01   9.116  < 2e-16 ***\nage          6.922e-04  1.321e-02   0.052 0.958229    \ndis         -1.476e+00  1.995e-01  -7.398 6.01e-13 ***\nrad          3.060e-01  6.635e-02   4.613 5.07e-06 ***\ntax         -1.233e-02  3.760e-03  -3.280 0.001112 ** \nptratio     -9.527e-01  1.308e-01  -7.283 1.31e-12 ***\nblack        9.312e-03  2.686e-03   3.467 0.000573 ***\nlstat       -5.248e-01  5.072e-02 -10.347  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.745 on 492 degrees of freedom\nMultiple R-squared:  0.7406,    Adjusted R-squared:  0.7338 \nF-statistic: 108.1 on 13 and 492 DF,  p-value: < 2.2e-16\n\n\nWe can access the individual components of a summary object by name (type ?summary.lm to see what is available). Hence summary(lm.fit)$r.sq gives us the R2, and summary(lm.fit)$sigma gives us the RSE. The vif() function, part of the {car} package, can be used to compute variance inﬂation factors. Most VIF’s are low to moderate for this data (<= 4.0 is considered low). The {car} package is not part of the base R installation so it must be downloaded the ﬁrst time you use it via the install.packages option in R.\n\nlibrary(car)\n\nLoading required package: carData\n\nvif(lm.fit)\n\n    crim       zn    indus     chas      nox       rm      age      dis \n1.792192 2.298758 3.991596 1.073995 4.393720 1.933744 3.100826 3.955945 \n     rad      tax  ptratio    black    lstat \n7.484496 9.008554 1.799084 1.348521 2.941491 \n\n\nWhat if we would like to perform a regression using all of the variables but one? For example, in the above regression output, age has a high p-value. So we may wish to run a regression excluding this predictor. The following syntax results in a regression using all predictors except age.\n\nlm.fit1 <- lm(medv ~ . -age, data = Boston )\nsummary(lm.fit1 )\n\n\nCall:\nlm(formula = medv ~ . - age, data = Boston)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.6054  -2.7313  -0.5188   1.7601  26.2243 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  36.436927   5.080119   7.172 2.72e-12 ***\ncrim         -0.108006   0.032832  -3.290 0.001075 ** \nzn            0.046334   0.013613   3.404 0.000719 ***\nindus         0.020562   0.061433   0.335 0.737989    \nchas          2.689026   0.859598   3.128 0.001863 ** \nnox         -17.713540   3.679308  -4.814 1.97e-06 ***\nrm            3.814394   0.408480   9.338  < 2e-16 ***\ndis          -1.478612   0.190611  -7.757 5.03e-14 ***\nrad           0.305786   0.066089   4.627 4.75e-06 ***\ntax          -0.012329   0.003755  -3.283 0.001099 ** \nptratio      -0.952211   0.130294  -7.308 1.10e-12 ***\nblack         0.009321   0.002678   3.481 0.000544 ***\nlstat        -0.523852   0.047625 -10.999  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.74 on 493 degrees of freedom\nMultiple R-squared:  0.7406,    Adjusted R-squared:  0.7343 \nF-statistic: 117.3 on 12 and 493 DF,  p-value: < 2.2e-16\n\n\nAlternatively, the update() function can be used.\n\nlm.fit1 <- update(lm.fit , ~ . -age )\n\n\nInteraction terms\nit is easy to include interaction terms in a linear model using the lm() function. The syntax lstat:black tells R to include an interaction term between lstat and black. The syntax lstat*age simultaneously includes lstat, age, and the interaction term lstat:age as predictors; it is a shorthand for lstat + age + lstat:age.\n\nsummary(lm(medv ~ lstat * age , data = Boston ))\n\n\nCall:\nlm(formula = medv ~ lstat * age, data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-15.806  -4.045  -1.333   2.085  27.552 \n\nCoefficients:\n              Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 36.0885359  1.4698355  24.553  < 2e-16 ***\nlstat       -1.3921168  0.1674555  -8.313 8.78e-16 ***\nage         -0.0007209  0.0198792  -0.036   0.9711    \nlstat:age    0.0041560  0.0018518   2.244   0.0252 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.149 on 502 degrees of freedom\nMultiple R-squared:  0.5557,    Adjusted R-squared:  0.5531 \nF-statistic: 209.3 on 3 and 502 DF,  p-value: < 2.2e-16\n\n\n\n\nNon-linear transformation of predictors\nThe lm() function can also accommodate non-linear transformations of the predictors. For instance, given a predictor \\(X\\), we can create a predictor \\(X^2\\) using I(X^2). The function I() is needed since the ^ has a special meaning in a formula; wrapping as we do allows the standard usage in R, which is to raise X to the power 2. We now perform a regression of medv onto lstat and lstat\\(^2\\).\n\nlm.fit2 <- lm( medv ~ lstat + I(lstat^2))\nsummary(lm.fit2 )\n\n\nCall:\nlm(formula = medv ~ lstat + I(lstat^2))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-15.2834  -3.8313  -0.5295   2.3095  25.4148 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 42.862007   0.872084   49.15   <2e-16 ***\nlstat       -2.332821   0.123803  -18.84   <2e-16 ***\nI(lstat^2)   0.043547   0.003745   11.63   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.524 on 503 degrees of freedom\nMultiple R-squared:  0.6407,    Adjusted R-squared:  0.6393 \nF-statistic: 448.5 on 2 and 503 DF,  p-value: < 2.2e-16\n\n\n\n\nanova()\nThe near-zero p-value associated with the quadratic term suggests that it leads to an improved model. We use the anova() function to compare our models to further quantify the extent to which the quadratic ﬁt is superior to the linear ﬁt.\n\nlm.fit <- lm( medv ~ lstat)\nanova(lm.fit, lm.fit2)\n\nAnalysis of Variance Table\n\nModel 1: medv ~ lstat\nModel 2: medv ~ lstat + I(lstat^2)\n  Res.Df   RSS Df Sum of Sq     F    Pr(>F)    \n1    504 19472                                 \n2    503 15347  1    4125.1 135.2 < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nHere Model 1 represents the linear submodel containing only one predictor, lstat, while Model 2 corresponds to the larger quadratic model that has two predictors, lstat and lstat2. The anova() function performs a hypothesis test comparing the two models. The null hypothesis is that the two models ﬁt the data equally well, and the alternative hypothesis is that the full model is superior. Here the F-statistic is 135 and the associated p-value is virtually zero. This provides very clear evidence that the model containing the predictors lstat and lstat\\(^2\\) is far superior to the model that only contains the predictor lstat (based on the results that the RSS, the unexplained error, is higher in Model 1). This is not surprising, since earlier we saw evidence for non-linearity in the relationship between medv and lstat. If we type\n\npar(mfrow = c(2, 2))\nplot(lm.fit2)\n\n\n\npar(mfrow = c(1, 1))\n\nthen we see that when the lstat\\(^2\\) term is included in the model, there is little discernible pattern in the residuals.\n\n\npoly()\nIn order to create a cubic ﬁt, we can include a predictor of the form I(X^3). However, this approach can start to get cumbersome for higher-order polynomials. A better approach involves using the poly() function to create the polynomial within lm(). For example, the following command produces a fifth-order polynomial fit:\n\nlm.fit5 <- lm(medv ~ poly(lstat, 5))\nsummary(lm.fit5)\n\n\nCall:\nlm(formula = medv ~ poly(lstat, 5))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.5433  -3.1039  -0.7052   2.0844  27.1153 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)       22.5328     0.2318  97.197  < 2e-16 ***\npoly(lstat, 5)1 -152.4595     5.2148 -29.236  < 2e-16 ***\npoly(lstat, 5)2   64.2272     5.2148  12.316  < 2e-16 ***\npoly(lstat, 5)3  -27.0511     5.2148  -5.187 3.10e-07 ***\npoly(lstat, 5)4   25.4517     5.2148   4.881 1.42e-06 ***\npoly(lstat, 5)5  -19.2524     5.2148  -3.692 0.000247 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 5.215 on 500 degrees of freedom\nMultiple R-squared:  0.6817,    Adjusted R-squared:  0.6785 \nF-statistic: 214.2 on 5 and 500 DF,  p-value: < 2.2e-16\n\n\nThis suggests that including additional polynomial terms, up to ﬁfth order, leads to an improvement in the model ﬁt! However, further investigation of the data reveals that no polynomial terms beyond ﬁfth order have signiﬁ- cant p-values in a regression ﬁt.\n\n\nlog() transformation\nOf course, we are in no way restricted to using polynomial transformations of the predictors. Here we try a log() transformation.\n\nsummary(lm(medv~log(rm), data = Boston))\n\n\nCall:\nlm(formula = medv ~ log(rm), data = Boston)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-19.487  -2.875  -0.104   2.837  39.816 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -76.488      5.028  -15.21   <2e-16 ***\nlog(rm)       54.055      2.739   19.73   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.915 on 504 degrees of freedom\nMultiple R-squared:  0.4358,    Adjusted R-squared:  0.4347 \nF-statistic: 389.3 on 1 and 504 DF,  p-value: < 2.2e-16"
  },
  {
    "objectID": "lab03-lin-reg.html#qualitative-predictors",
    "href": "lab03-lin-reg.html#qualitative-predictors",
    "title": "Lab 03 Linear regression",
    "section": "3 Qualitative predictors",
    "text": "3 Qualitative predictors\nWe will now examine the Carseats data, which is part of the {ISLR} library. We will attempt to predict Sales (child car seat sales) in 400 locations based on a number of predictors.\n\n# fix(Carseats)\nnames(Carseats)\n\n [1] \"Sales\"       \"CompPrice\"   \"Income\"      \"Advertising\" \"Population\" \n [6] \"Price\"       \"ShelveLoc\"   \"Age\"         \"Education\"   \"Urban\"      \n[11] \"US\"         \n\n\nThe Carseats data includes qualitative predictors such as Shelveloc, an indicator of the quality of the shelving location (that is, the space within a store in which the car seat is displayed at each location). The predictor Shelveloc takes on three possible values, Bad, Medium, and Good.\nGiven a qualitative variable such as Shelveloc, R generates dummy variables automatically. Below we ﬁt a multiple regression model that includes some interaction terms.\n\nlm.fit <- lm(Sales ~ . + Income:Advertising + Price:Age , data = Carseats)\nsummary(lm.fit)\n\n\nCall:\nlm(formula = Sales ~ . + Income:Advertising + Price:Age, data = Carseats)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.9208 -0.7503  0.0177  0.6754  3.3413 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         6.5755654  1.0087470   6.519 2.22e-10 ***\nCompPrice           0.0929371  0.0041183  22.567  < 2e-16 ***\nIncome              0.0108940  0.0026044   4.183 3.57e-05 ***\nAdvertising         0.0702462  0.0226091   3.107 0.002030 ** \nPopulation          0.0001592  0.0003679   0.433 0.665330    \nPrice              -0.1008064  0.0074399 -13.549  < 2e-16 ***\nShelveLocGood       4.8486762  0.1528378  31.724  < 2e-16 ***\nShelveLocMedium     1.9532620  0.1257682  15.531  < 2e-16 ***\nAge                -0.0579466  0.0159506  -3.633 0.000318 ***\nEducation          -0.0208525  0.0196131  -1.063 0.288361    \nUrbanYes            0.1401597  0.1124019   1.247 0.213171    \nUSYes              -0.1575571  0.1489234  -1.058 0.290729    \nIncome:Advertising  0.0007510  0.0002784   2.698 0.007290 ** \nPrice:Age           0.0001068  0.0001333   0.801 0.423812    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.011 on 386 degrees of freedom\nMultiple R-squared:  0.8761,    Adjusted R-squared:  0.8719 \nF-statistic:   210 on 13 and 386 DF,  p-value: < 2.2e-16\n\n\n\ncontrasts()\nThe contrasts() function returns the coding that R uses for the dummy variables.\n\nattach(Carseats)\ncontrasts(ShelveLoc)\n\n       Good Medium\nBad       0      0\nGood      1      0\nMedium    0      1\n\n\nUse ?contrasts to learn about other contrasts, and how to set them. R has created a ShelveLocGood dummy variable that takes on a value of 1 if the shelving location is good, and 0 otherwise. It has also created a ShelveLocMedium dummy variable that equals 1 if the shelving location is medium, and 0 otherwise. A bad shelving location corresponds to a zero for each of the two dummy variables. The fact that the coeﬃcient for\nShelveLocGood in the regression output is positive indicates that a good shelving location is associated with high sales (relative to a bad location). And ShelveLocMedium has a smaller positive coeffcient, indicating that a medium shelving location leads to higher sales than a bad shelving location but lower sales than a good shelving location.\n\n\nWriting functions\nAs we have seen, R comes with many useful functions, and still more functions are available by way of R libraries. However, we will often be interested in performing an operation for which no function is available. In this setting, we may want to write our own function. For instance, below we provide a simple function that reads in the {ISLR} and {MASS} libraries, called LoadLibraries(). Before we have created the function, R returns an error if we try to call it.\n\n# try this\n# LoadLibraries()\n\nWe now create the function. The { symbol informs R that multiple commands are about to be input. Hitting Enter after typing { will cause R to print the + symbol. We can then input as many commands as we wish, hitting Enter after each one. Finally the } symbol informs R that no further commands will be entered.\n\nLoadLibraries <- function(){\n  library(ISLR)\n  library(MASS)\n  print (\"The libraries have been loaded.\")\n  }\n\nNow if we type in LoadLibraries,R will tell us what is in the function.\n\nLoadLibraries()\n\n[1] \"The libraries have been loaded.\""
  },
  {
    "objectID": "lab03-lin-reg.html#exercises",
    "href": "lab03-lin-reg.html#exercises",
    "title": "Lab 03 Linear regression",
    "section": "4 Exercises",
    "text": "4 Exercises\n\nExercise 1\nThe following questions involve the use of simple linear regression on the Auto data set.\n\n1.1\nUse the lm() function to perform a simple linear regression with mpg as the response and horsepower as the predictor. Use the summary() function to print the results. Comment on the output. For example:\n\nIs there a relationship between the predictor and the response?\nHow strong is the relationship between the predictor and the response?\nIs the relationship between the predictor and the response positive or negative?\nWhat is the predicted mpg associated with a horsepower of 98?\nWhat are the associated 95% confidence and prediction intervals?\n\n\n\n1.2\nPlot the response and the predictor. Use the abline() function to display the least squares regression line.\n\n\n1.3\nUse the plot() function to produce diagnostic plots of the least squares regression fit. Comment on any problems you see with the fit.\n\nThe following questions involve the use of simple linear regression on the Auto data set.\n\n\n1.4\nProduce a scatterplot matrix which includes all of the variables in the data set.\n\n\n1.5\nCompute the matrix of correlations between the variables using the function cor(). You will need to exclude the name variable, which is qualitative.\n\n\n1.6\nUse the lm() function to perform a multiple linear regression with mpg as the response and all other variables except name as the predictors. Use the summary() function to print the results. Comment on the output.\n\nIs there a relationship between the predictors and the re- sponse?\nWhich predictors appear to have a statistically significant relationship to the response?\nWhat does the coeﬃcient for the year variable suggest?\n\n\n\n1.7\nUse the plot() function to produce diagnostic plots of the linear regression fit. Comment on any problems you see with the fit. Do the residual plots suggest any unusually large outliers? Does the leverage plot identify any observations with unusually high leverage?\n\n\n1.8\nUse the * and : symbols to fit linear regression models with interaction eﬀects. Do any interactions appear to be statistically significant?\n\n\n1.9\nTry a few different transformations of the variables, such as log(X), X, X^2. Comment on your findings."
  },
  {
    "objectID": "lab03-lin-reg.html#resources",
    "href": "lab03-lin-reg.html#resources",
    "title": "Lab 03 Linear regression",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab03-lin-reg.html#harper-adams-data-science",
    "href": "lab03-lin-reg.html#harper-adams-data-science",
    "title": "Lab 03 Linear regression",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab04-classification.html",
    "href": "lab04-classification.html",
    "title": "Lab 04 Classification",
    "section": "",
    "text": "We will begin by examining some numerical and graphical summaries of the Smarket data, which is part of the {ISLR} library. This data set consists of percentage returns for the S&P 500 stock index over 1,250 days, from the beginning of 2001 until the end of 2005. For each date, the percentage returns is recorded for each of the five previous trading days, Lag1 through Lag5. Also recorded is Volume (the number of shares traded\non the previous day, in billions), Today (the percentage return on the date in question) and Direction (whether the market was Up or Down on this date).\n\nlibrary(ISLR)\nhead(Smarket)\n\n  Year   Lag1   Lag2   Lag3   Lag4   Lag5 Volume  Today Direction\n1 2001  0.381 -0.192 -2.624 -1.055  5.010 1.1913  0.959        Up\n2 2001  0.959  0.381 -0.192 -2.624 -1.055 1.2965  1.032        Up\n3 2001  1.032  0.959  0.381 -0.192 -2.624 1.4112 -0.623      Down\n4 2001 -0.623  1.032  0.959  0.381 -0.192 1.2760  0.614        Up\n5 2001  0.614 -0.623  1.032  0.959  0.381 1.2057  0.213        Up\n6 2001  0.213  0.614 -0.623  1.032  0.959 1.3491  1.392        Up\n\n\nThe cor() function produces a matrix that contains all of the pairwise correlations among the predictors in a data set. The ﬁrst command below gives an error message because the Direction variable is qualitative.\n\n# try this\n# cor(Smarket)\n\n\nError in cor(Smarket) : ‘x’ must be numeric\n\n\ncor(Smarket[,-9]) # 9th variable is \"Direction\"\n\n             Year         Lag1         Lag2         Lag3         Lag4\nYear   1.00000000  0.029699649  0.030596422  0.033194581  0.035688718\nLag1   0.02969965  1.000000000 -0.026294328 -0.010803402 -0.002985911\nLag2   0.03059642 -0.026294328  1.000000000 -0.025896670 -0.010853533\nLag3   0.03319458 -0.010803402 -0.025896670  1.000000000 -0.024051036\nLag4   0.03568872 -0.002985911 -0.010853533 -0.024051036  1.000000000\nLag5   0.02978799 -0.005674606 -0.003557949 -0.018808338 -0.027083641\nVolume 0.53900647  0.040909908 -0.043383215 -0.041823686 -0.048414246\nToday  0.03009523 -0.026155045 -0.010250033 -0.002447647 -0.006899527\n               Lag5      Volume        Today\nYear    0.029787995  0.53900647  0.030095229\nLag1   -0.005674606  0.04090991 -0.026155045\nLag2   -0.003557949 -0.04338321 -0.010250033\nLag3   -0.018808338 -0.04182369 -0.002447647\nLag4   -0.027083641 -0.04841425 -0.006899527\nLag5    1.000000000 -0.02200231 -0.034860083\nVolume -0.022002315  1.00000000  0.014591823\nToday  -0.034860083  0.01459182  1.000000000\n\n\nAs one might expect, the correlations between the lag variables and today’s returns are close to zero. In other words, there appears to be little correlation between today’s returns and previous days’ returns. The only substantial correlation is between Year and Volume. By plotting the data we see that Volume is increasing over time. In other words, the average number of shares traded daily increased from 2001 to 2005.\n\nattach(Smarket)\nplot(Volume,\n     pch = 16, col = \"goldenrod\", cex = 0.5) # pure vanity\n\n\n\n\n\n\n\nLogistic Regression is merely regression where the dependent variable is binary (up, down; yes, no; 0, 1; etc.).\nWe will ﬁt a logistic regression model in order to predict Direction using Lag1 through Lag5 and Volume. The glm() function ﬁts generalized linear models, a class of models that includes logistic regression, and allows us to model data that do not adhere to the Gaussian assumption. The syntax of the glm() function is similar to that of lm(), except that we must pass in the argument family=binomial in order to tell R to run a logistic regression rather than some other type of generalized linear model.\n\nglm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,\n               data = Smarket, \n               family = binomial )\nsummary(glm.fit)\n\n\nCall:\nglm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + \n    Volume, family = binomial, data = Smarket)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-1.446  -1.203   1.065   1.145   1.326  \n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)\n(Intercept) -0.126000   0.240736  -0.523    0.601\nLag1        -0.073074   0.050167  -1.457    0.145\nLag2        -0.042301   0.050086  -0.845    0.398\nLag3         0.011085   0.049939   0.222    0.824\nLag4         0.009359   0.049974   0.187    0.851\nLag5         0.010313   0.049511   0.208    0.835\nVolume       0.135441   0.158360   0.855    0.392\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1731.2  on 1249  degrees of freedom\nResidual deviance: 1727.6  on 1243  degrees of freedom\nAIC: 1741.6\n\nNumber of Fisher Scoring iterations: 3\n\n\nThe smallest p-value here is associated with Lag1. The negative coefficient for this predictor suggests that if the market had a positive return yesterday, then it is less likely to go up today. However, at a value of 0.15, the p-value is still relatively large, and so there is no clear evidence of a real association between Lag1 and Direction.\nWe use the coef() function in order to access just the coefficients for this fitted model. We can also use the summary() function to access particular aspects of the fitted model, such as the p-values for the coefficients.\n\ncoef(glm.fit) # just the coefficients\n\n (Intercept)         Lag1         Lag2         Lag3         Lag4         Lag5 \n-0.126000257 -0.073073746 -0.042301344  0.011085108  0.009358938  0.010313068 \n      Volume \n 0.135440659 \n\nsummary(glm.fit)$coef # part of the summary\n\n                Estimate Std. Error    z value  Pr(>|z|)\n(Intercept) -0.126000257 0.24073574 -0.5233966 0.6006983\nLag1        -0.073073746 0.05016739 -1.4565986 0.1452272\nLag2        -0.042301344 0.05008605 -0.8445733 0.3983491\nLag3         0.011085108 0.04993854  0.2219750 0.8243333\nLag4         0.009358938 0.04997413  0.1872757 0.8514445\nLag5         0.010313068 0.04951146  0.2082966 0.8349974\nVolume       0.135440659 0.15835970  0.8552723 0.3924004\n\nsummary(glm.fit)$coef[4] # just the 4th coefficient, Lag3\n\n[1] 0.01108511\n\n\n\n\n\nThe predict() function can be used to predict the probability that the market will go up, given values of the predictors. The type=\"response\" option tells R to output probabilities of the form \\(P(Y = 1|X)\\) (the probability that Y = the value of ‘1’, given some value of X), as opposed to other information such as the logit. If no data set is supplied to the predict() function, then the probabilities are computed for the training data that was used to ﬁt the logistic regression model. Here we can print the ﬁrst ten probabilities. We know that these values correspond to the probability of the market going up, rather than down, because the contrasts() function indicates that R has created a dummy variable with a 1 for Up.\n\nglm.probs <- predict(glm.fit, type = \"response\")\nglm.probs[1:10]\n\n        1         2         3         4         5         6         7         8 \n0.5070841 0.4814679 0.4811388 0.5152224 0.5107812 0.5069565 0.4926509 0.5092292 \n        9        10 \n0.5176135 0.4888378 \n\ncontrasts(Direction)\n\n     Up\nDown  0\nUp    1\n\n\nIn order to make a prediction as to whether the market will go up or down on a particular day, we can convert these predicted probabilities into class labels, Up or Down. The following two commands create a vector of class predictions based on whether the predicted probability of a market increase is greater than or less than 0.5.\n\nglm.pred <- rep(\"Down\", 1250) # make vector\nglm.pred[glm.probs > .5] <- \"Up\" # add Up values\n\n\n\n\nThe ﬁrst command creates a vector of 1,250 Down elements. The second line transforms to Up all of the elements for which the predicted probability of a market increase exceeds 0.5. Given these predictions, the table() function can be used to produce a confusion matrix in order to determine how many observations were correctly or incorrectly classiﬁed.\n\ntable(glm.pred, Direction) # confusion matrix\n\n        Direction\nglm.pred Down  Up\n    Down  145 141\n    Up    457 507\n\n(507+145)/1250 # proportion correct predictions out of 50/50 (like flipping a coin)\n\n[1] 0.5216\n\nmean(glm.pred == Direction) # fancier programmatic calculation\n\n[1] 0.5216\n\n\nThe diagonal elements of the confusion matrix indicate correct predictions, while the off-diagonals represent incorrect predictions. Hence our model correctly predicted that the market would go up on 507 days and that it would go down on 145 days, for a total of 507 + 145 = 652 correct predictions. The mean() function can be used to compute the fraction of days for which the prediction was correct. In this case, logistic regression correctly predicted the movement of the market 52.2% of the time.\nAt ﬁrst glance, it appears that the logistic regression model is working a little better than random guessing. However, this result is misleading because we trained and tested the model on the same set of 1,250 observations. In other words, \\(100-52.2 = 47.8\\)% is the training error rate. As we have seen previously, the training error rate is often overly optimistic because it tends to underestimate the test error rate. In order to better assess the accuracy of the logistic regression model in this setting, we can ﬁt the model using part of the data, and then examine how well it predicts the held out data. This will yield a more realistic error rate, in the sense that in practice we will be interested in our model’s performance not on the data that we used to ﬁt the model, but rather on days in the future for which the market’s movements are unknown.\nTo implement this strategy, we will ﬁrst create a vector corresponding to the observations from 2001 through 2004. We will then use this vector to create a “held out” data set of observations from 2005.\n\ntrain <- (Year < 2005)\nSmarket.2005 <- Smarket[!train, ]\ndim(Smarket.2005)\n\n[1] 252   9\n\nDirection.2005 <- Direction[!train]\n\n\n\n\nThe object train is a vector of 1,250 elements, corresponding to the observations in our data set. The elements of the vector that correspond to observations that occurred before 2005 are set to TRUE, whereas those that correspond to observations in 2005 are set to FALSE. The object train is a Boolean vector, since its elements are TRUE and FALSE. Boolean vectors can be used to obtain a subset of the rows or columns of a matrix. For instance, the command Smarket[train, ] would pick out a submatrix of the stock market data set, corresponding only to the dates before 2005, since those are the ones for which the elements of train are TRUE. The ! symbol can be used to reverse all of the elements of a Boolean vector.\nThat is, !train is a vector similar to train, except that the elements that are TRUE in train get swapped to FALSE in !train, and the elements that are FALSE in train get swapped to TRUE in !train. Therefore, Smarket[!train,] yields a submatrix of the stock market data containing only the observations for which train is FALSE. That is, the observations with dates in 2005. The output above indicates that there are 252 such observations.\n\n\n\nWe now ﬁt a logistic regression model using only the subset of the observations that correspond to dates before 2005, using the subset argument. We then obtain predicted probabilities of the stock market going up for each of the days in our test set. That is, for the days in 2005.\n\nglm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,\n               data = Smarket, family = binomial, subset = train )\nglm.probs <- predict(glm.fit, Smarket.2005, type = \"response\")\n\nNotice that we have trained and tested our model on two completely separate data sets: training was performed using only the dates before 2005, and testing was performed using only the dates in 2005. This is the whole point.\nFinally, we compute the predictions for 2005 and compare them to the actual movements of the market over that time period.\n\nglm.pred <- rep(\"Down\", 252)\nglm.pred[glm.probs > .5] <- \"Up\"\ntable(glm.pred, Direction.2005)\n\n        Direction.2005\nglm.pred Down Up\n    Down   77 97\n    Up     34 44\n\nmean(glm.pred == Direction.2005)\n\n[1] 0.4801587\n\nmean(glm.pred != Direction.2005)\n\n[1] 0.5198413\n\n\nThe != notation means not equal to, and so the last command computes the test set error rate. The results are rather disappointing: the test error rate is 52%, which is worse than random guessing! Of course this result is not all that surprising, given that one would not generally expect to be able to use previous days’ returns to predict future market performance. (After all, if it were easy to do so economics would not be a field of study)"
  },
  {
    "objectID": "lab04-classification.html#fine-tuning-models",
    "href": "lab04-classification.html#fine-tuning-models",
    "title": "Lab 04 Classification",
    "section": "2 Fine tuning models",
    "text": "2 Fine tuning models\nWe recall that the logistic regression model had very underwhelming p-values associated with all of the predictors, and that the smallest p-value, though not very small, corresponded to Lag1. Perhaps by removing the variables that appear not to be helpful in predicting Direction, we can obtain a more eﬀective model. After all, using predictors that have no relationship with the response tends to cause a deterioration in the test error rate (since such predictors cause an increase in variance without a corresponding decrease in bias), and so removing such predictors may in turn yield an improvement. Below we will refit the logistic regression using just Lag1 and Lag2, which seemed to have the highest predictive power in the original logistic regression model.\n\nglm.fit <- glm (Direction ~ Lag1 + Lag2, data = Smarket, \n                  family = binomial, subset = train)\nglm.probs <- predict(glm.fit, Smarket.2005, type = \"response\")\nglm.pred <- rep (\"Down\" ,252)\nglm.pred[glm.probs > .5] = \"Up\"\ntable(glm.pred, Direction.2005)\n\n        Direction.2005\nglm.pred Down  Up\n    Down   35  35\n    Up     76 106\n\nmean(glm.pred == Direction.2005)\n\n[1] 0.5595238\n\n106/(106+76) \n\n[1] 0.5824176\n\n\nNow the results appear to be a little better: 56% of the daily movements have been correctly predicted. It is worth noting that in this case, a much simpler strategy of predicting that the market will increase every day will also be correct 56% of the time! Hence, in terms of overall error rate, the logistic regression method is no better than the naïve approach. However, the confusion matrix shows that on days when logistic regression predicts an increase in the market, it has a 58% accuracy rate. This suggests a possible trading strategy of buying on days when the model predicts an increasing market, and avoiding trades on days when a decrease is predicted. Of course one would need to investigate more carefully whether this small improvement was real or just due to random chance.\n\nMore predict()\nSuppose that we want to predict the returns associated with particular values of Lag1 and Lag2. In particular, we want to predict Direction on a day when Lag1 and Lag2 equal 1.2 and 1.1, respectively, and on a day when they equal 1.5 and −0.8. We do this using the predict() function.\n\npredict(glm.fit, \n        newdata = data.frame(Lag1 = c(1.2, 1.5),\n                                      Lag2 =c(1.1, -0.8)), \n        type = \"response\")\n\n        1         2 \n0.4791462 0.4960939"
  },
  {
    "objectID": "lab04-classification.html#lda",
    "href": "lab04-classification.html#lda",
    "title": "Lab 04 Classification",
    "section": "3 LDA",
    "text": "3 LDA\n\nlda()\nWe use Linear Discriminant Analysis (LDA) to explore differences between data with two or more classes.\nNow we will perform LDA on the Smarket data. In R, we ﬁt a LDA model using the lda() function, which is part of the MASS library. Notice that the syntax for the lda() function is identical to that of lm(), and to that of glm() except for the absence of the family option. We ﬁt the model using only the observations before 2005.\n\nlibrary(MASS)\nlda.fit <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\nlda.fit\n\nCall:\nlda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\n\nPrior probabilities of groups:\n    Down       Up \n0.491984 0.508016 \n\nGroup means:\n            Lag1        Lag2\nDown  0.04279022  0.03389409\nUp   -0.03954635 -0.03132544\n\nCoefficients of linear discriminants:\n            LD1\nLag1 -0.6420190\nLag2 -0.5135293\n\nplot(lda.fit)\n\n\n\n\nThe LDA output indicates that \\(\\hat\\pi_1 = 0.492\\) and \\(\\hat\\pi_2 = 0.508\\); in other words, 49.2% of the training observations correspond to days during which the market went down. It also provides the group means; these are the average of each predictor within each class, and are used by LDA as estimates of \\(μ_k\\). These suggest that there is a tendency for the previous 2 days’ returns to be negative on days when the market increases, and a tendency for the previous days’ returns to be positive on days when the market declines. The coefficients of linear discriminants output provides the linear combination of Lag1 and Lag2 that are used to form the LDA decision rule.\nIn other words, these are the multipliers of the elements of X = x in (4.19). If −0.642 × Lag1− 0.514 × Lag2 is large, then the LDA classiﬁer will predict a market increase, and if it is small, then the LDA classifier will predict a market decline. The plot() function produces plots of the linear discriminants, obtained by computing 0.642 X Lag1 - 0.514 Lag2 for each of the training observations.\nThe predict() function returns a list with three elements. The ﬁrst element, class, contains LDA’s predictions about the movement of the market. The second element, posterior, is a matrix whose kth column contains the posterior probability that the corresponding observation belongs to the kth class. Finally, x contains the linear discriminants, described earlier.\n\nlda.pred = predict(lda.fit, Smarket.2005)\nnames(lda.pred)\n\n[1] \"class\"     \"posterior\" \"x\"        \n\n\nthe LDA and logistic regression predictions are almost identical for this example.\n\nlda.class = lda.pred$class\ntable(lda.class, Direction.2005)\n\n         Direction.2005\nlda.class Down  Up\n     Down   35  35\n     Up     76 106\n\nmean(lda.class == Direction.2005)\n\n[1] 0.5595238\n\n\nApplying a 50% threshold to the posterior probabilities allows us to recreate the predictions contained in lda.pred$class.\n\nsum( lda.pred$posterior[, 1] >= .5)\n\n[1] 70\n\nsum( lda.pred$posterior[, 1] < .5)\n\n[1] 182\n\n\nNotice that the posterior probability output by the model corresponds to the probability that the market will decrease:\n\nlda.pred$posterior[1:20, 1]\n\n      999      1000      1001      1002      1003      1004      1005      1006 \n0.4901792 0.4792185 0.4668185 0.4740011 0.4927877 0.4938562 0.4951016 0.4872861 \n     1007      1008      1009      1010      1011      1012      1013      1014 \n0.4907013 0.4844026 0.4906963 0.5119988 0.4895152 0.4706761 0.4744593 0.4799583 \n     1015      1016      1017      1018 \n0.4935775 0.5030894 0.4978806 0.4886331 \n\nlda.class[1:20] \n\n [1] Up   Up   Up   Up   Up   Up   Up   Up   Up   Up   Up   Down Up   Up   Up  \n[16] Up   Up   Down Up   Up  \nLevels: Down Up\n\n\nIf we wanted to use a posterior probability threshold other than 50% in order to make predictions, then we could easily do so. For instance, suppose that we wish to predict a market decrease only if we are very certain that the market will indeed decrease on that day. Say, if the posterior probability is at least 90%.\n\nsum(lda.pred$posterior[ , 1] > .9)\n\n[1] 0\n\n\nNo days in 2005 meet that threshold! In fact, the greatest posterior probability of decrease in all of 2005 was 52.02%."
  },
  {
    "objectID": "lab04-classification.html#qda",
    "href": "lab04-classification.html#qda",
    "title": "Lab 04 Classification",
    "section": "4 QDA",
    "text": "4 QDA\n\nqda() Quadratic Discriminant Analysis\nWe will now ﬁt a QDA model to the Smarket data. QDA is implemented in R using the qda() function, which is also part of the {MASS} library. The syntax is identical to that of lda().\n\nqda.fit <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\nqda.fit\n\nCall:\nqda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\n\nPrior probabilities of groups:\n    Down       Up \n0.491984 0.508016 \n\nGroup means:\n            Lag1        Lag2\nDown  0.04279022  0.03389409\nUp   -0.03954635 -0.03132544\n\n\nThe output contains the group means. But it does not contain the coefﬁcients of the linear discriminants, because the QDA classiﬁer involves a quadratic, rather than a linear, function of the predictors. The predict() function works in exactly the same fashion as for LDA.\n\nqda.class <- predict(qda.fit, Smarket.2005)$class\ntable(qda.class, Direction.2005)\n\n         Direction.2005\nqda.class Down  Up\n     Down   30  20\n     Up     81 121\n\nmean(qda.class == Direction.2005)\n\n[1] 0.5992063\n\n\nInterestingly, the QDA predictions are accurate almost 60% of the time, even though the 2005 data was not used to ﬁt the model. This level of accuracy is quite impressive for stock market data, which is known to be quite hard to model accurately. This suggests that the quadratic form assumed by QDA may capture the true relationship more accurately than the linear forms assumed by LDA and logistic regression. However, it is recommended to evaluate any method’s performance on a larger test set before betting that this approach will consistently beat the market!"
  },
  {
    "objectID": "lab04-classification.html#k-nearest-neighbors",
    "href": "lab04-classification.html#k-nearest-neighbors",
    "title": "Lab 04 Classification",
    "section": "5 K-Nearest Neighbors",
    "text": "5 K-Nearest Neighbors\n\nknn()\nWe will now perform KNN using the knn() function, which is part of the {class} library. This function works rather differently from the other model-fitting functions that we have encountered thus far. Rather than a two-step approach in which we ﬁrst ﬁt the model and then we use the model to make predictions, knn() forms predictions using a single command. The function requires four inputs.\n\nA matrix containing the predictors associated with the training data, labeled train.X below.\nA matrix containing the predictors associated with the data for which we wish to make predictions, labeled test.X below.\nA vector containing the class labels for the training observations, labeled train.Direction below.\nA value for K, the number of nearest neighbors to be used by the classifier.\n\nWe will use the cbind() function, short for column bind, to bind the Lag1 and Lag2 variables together into two matrices, one for the training set and the other for the test set.\n\nlibrary( class)\ntrain.X <- cbind(Lag1, Lag2)[train, ]\ntest.X <- cbind(Lag1, Lag2)[!train, ]\ntrain.Direction <- Direction[train]\n\nNow the knn() function can be used to predict the market’s movement for the dates in 2005. We set a random seed before we apply knn() because if several observations are tied as nearest neighbors, then R will randomly break the tie. Therefore, a seed must be set in order to ensure reproducibility of results.\n\nset.seed(1)\nlibrary(class)\nknn.pred <- knn(train.X, test.X, train.Direction, k = 1)\ntable(knn.pred, Direction.2005)\n\n        Direction.2005\nknn.pred Down Up\n    Down   43 58\n    Up     68 83\n\n(83+43) /252\n\n[1] 0.5\n\n\nThe results using K = 1 are not very good, since only 50% of the observa- tions are correctly predicted. Of course, it may be that K = 1 results in an overly ﬂexible ﬁt to the data. Let’s repeat the analysis using a different K, K = 3.\n\nknn.pred <- knn(train.X, test.X, train.Direction, k = 3)\ntable(knn.pred, Direction.2005)\n\n        Direction.2005\nknn.pred Down Up\n    Down   48 54\n    Up     63 87\n\nmean (knn.pred == Direction.2005)\n\n[1] 0.5357143\n\n\nThe results have improved slightly. But increasing K further turns out to provide no further improvements. It appears that for this data, QDA provides the best results of the methods that we have examined so far.\n\n\nCaravan insurance data\nFinally, we will apply the KNN approach to the Caravan data set, which is part of the {ISLR} library. This data set includes 85 predictors that measure demographic characteristics for 5,822 individuals. The response variable is Purchase, which indicates whether or not a given individual purchases a caravan insurance policy. In this data set, only 6% of people purchased caravan insurance.\n\ndim(Caravan)\n\n[1] 5822   86\n\nattach(Caravan)\nsummary(Purchase) \n\n  No  Yes \n5474  348 \n\n348/5822 # % purchasing insurance\n\n[1] 0.05977327\n\n\nBecause the KNN classiﬁer predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger eﬀect on the distance between the observations, and hence on the KNN classiﬁer, than variables that are on a small scale. For instance, imagine a data set that contains two variables, salary and age (measured in dollars and years, respectively). As far as KNN is concerned, a difference of $1,000 in salary is enormous compared to a difference of 50 years in age. Consequently, salary will drive the KNN classification results, and age will have almost no effect. This is contrary to our intuition that a salary difference of $1,000 is quite small compared to an age difference of 50 years. Furthermore, the importance of scale to the KNN classiﬁer leads to another issue: if we measured salary in British Pounds, or if we measured age in minutes, then we’d get quite diﬀerent classification results from what we get if these two variables are measured in dollars and years.\n\n\nStandardizing data\nA good way to handle this problem is to standardize the data so that all variables are given a mean of zero and a standard deviation of one. Then all variables will be on a comparable scale. The scale() function does just this. In standardizing the data, we exclude column 86, because that is the qualitative Purchase variable.\n\nstandardized.X <- scale(Caravan [,-86])\nvar(Caravan[,1])\n\n[1] 165.0378\n\nvar(Caravan[,2])\n\n[1] 0.1647078\n\nvar(standardized.X[,1])\n\n[1] 1\n\nvar(standardized.X[,2])\n\n[1] 1\n\n\nNow every column of standardized.X has a standard deviation of one and a mean of zero.\nWe now split the observations into a test set, containing the ﬁrst 1,000 observations, and a training set, containing the remaining observations. We ﬁt a KNN model on the training data using K = 1, and evaluate its performance on the test data.\n\ntest <- 1:1000\ntrain.X <- standardized.X[-test, ]\ntest.X <- standardized.X[test, ]\ntrain.Y <- Purchase[-test]\ntest.Y <- Purchase[test]\n\nset.seed(1)\nknn.pred <- knn(train.X, test.X, train.Y, k = 1)\nmean(test.Y != knn.pred )\n\n[1] 0.118\n\nmean(test.Y != \"No\")\n\n[1] 0.059\n\n\nThe vector test is numeric, with values from 1 through 1,000. Typing standardized.X[test, ] yields the submatrix of the data containing the observations whose indices range from 1 to 1,000, whereas typing standardized.X[-test, ] yields the submatrix containing the observations whose indices do not range from 1 to 1,000. The KNN error rate on the 1,000 test observations is just under 12%. At ﬁrst glance, this may appear to be fairly good. However, since only 6% of customers purchased insurance, we could get the error rate down to 6% by always predicting No regardless of the values of the predictors!\nSuppose that there is some non-trivial cost to trying to sell insurance to a given individual. For instance, perhaps a salesperson must visit each potential customer. If the company tries to sell insurance to a random selection of customers, then the success rate will be only 6%, which may be far too low given the costs involved. Instead, the company would like to try to sell insurance only to customers who are likely to buy it. So the overall error rate is not of interest. Instead, the fraction of individuals that are correctly predicted to buy insurance is of interest.\nIt turns out that KNN with K = 1 does far better than random guessing among the customers that are predicted to buy insurance. Among 77 such customers, 9, or 11.7%, actually do purchase insurance. This is double the rate that one would obtain from random guessing.\n\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  873  50\n     Yes  68   9\n\n9/(68+9)\n\n[1] 0.1168831\n\n\n\n\nExploring KNN model tuning\nUsing K = 3 (implying there are 3 groupings of customers), the success rate increases to 19%, and with K = 5 (5 groups) the rate is 26.7%. This is over four times the rate that results from random guessing. It appears that KNN is ﬁnding some real patterns in a difficult data set!\n\nknn.pred <- knn(train.X, test.X, train.Y, k = 3)\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  920  54\n     Yes  21   5\n\n5/26\n\n[1] 0.1923077\n\nknn.pred <- knn(train.X, test.X, train.Y, k = 5)\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  930  55\n     Yes  11   4\n\n4/15\n\n[1] 0.2666667\n\n\n\n\nCompare to logistic regression\nAs a comparison, we can also ﬁt a logistic regression model to the data. If we use 0.5 as the predicted probability cut-off for the classifier, then we have a problem: only seven of the test observations are predicted to purchase insurance. Even worse, we are wrong about all of these! However, we are not required to use a cut-off of 0.5. If we instead predict a purchase any time the predicted probability of purchase exceeds 0.25, we get much better results: we predict that 33 people will purchase insurance, and we are correct for about 33% of these people. This is over ﬁve times better than random guessing!\n\nglm.fit <- glm(Purchase ~ ., data = Caravan, family = binomial,\n               subset = -test)\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nglm.probs <- predict(glm.fit, Caravan[test, ], type = \"response\")\nglm.pred <- rep(\"No\" , 1000)\nglm.pred [glm.probs > .5]= \"Yes\"\ntable(glm.pred, test.Y)\n\n        test.Y\nglm.pred  No Yes\n     No  934  59\n     Yes   7   0\n\nglm.pred <- rep(\"No\", 1000)\nglm.pred[glm.probs > .25] <- \"Yes\"\ntable(glm.pred, test.Y)\n\n        test.Y\nglm.pred  No Yes\n     No  919  48\n     Yes  22  11\n\n11/(22+11 )\n\n[1] 0.3333333"
  },
  {
    "objectID": "lab04-classification.html#xx-naive-bayes-consider-adding",
    "href": "lab04-classification.html#xx-naive-bayes-consider-adding",
    "title": "Lab 04 Classification",
    "section": "xx Naive Bayes (consider adding)",
    "text": "xx Naive Bayes (consider adding)"
  },
  {
    "objectID": "lab04-classification.html#exercises",
    "href": "lab04-classification.html#exercises",
    "title": "Lab 04 Classification",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nThe next few questions should be answered using the Weekly data set, which is part of the {ISLR2} package. (read about it in help())\n\n1.1\nProduce some numerical and graphical summaries of the Weekly data. Do there appear to be any patterns?\n\n\n1.2\nUse the full data set to perform a logistic regression with Direction as the response and the five lag variables plus Volume as predictors. Use the summary function to print the results. Do any of the predictors appear to be statistically significant? If so, which ones?\n\n\n1.3\nCompute the confusion matrix and overall fraction of correct predictions. Explain what the confusion matrix is telling you about the types of mistakes made by logistic regression.\n\n\n1.4\nNow fit the logistic regression model using a training data period from 1990 to 2008, with Lag2 as the only predictor. Compute the confusion matrix and the overall fraction of correct predictions for the held out data (that is, the data from 2009 and 2010).\n\n\n1.5\nRepeat 1.4 using LDA.\n\n\n1.6\nRepeat 1.4 using QDA.\n\n\n1.7\nRepeat 1.4 using KNN with K = 1.\n\n\n1.8\nRepeat 1.4 using naive Bayes.\n\n\n1.9\nWhich of these methods appears to provide the best results on this data?\n\n\n1.10\nExperiment with diﬀerent combinations of predictors, including possible transformations and interactions, for each of the methods. Report the variables, method, and associated confusion matrix that appears to provide the best results on the held out data. Note that you should also experiment with values for K in the KNN classifier."
  },
  {
    "objectID": "lab04-classification.html#resources",
    "href": "lab04-classification.html#resources",
    "title": "Lab 04 Classification",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab04-classification.html#harper-adams-data-science",
    "href": "lab04-classification.html#harper-adams-data-science",
    "title": "Lab 04 Classification",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab05-resampling.html",
    "href": "lab05-resampling.html",
    "title": "Lab 05 Resampling",
    "section": "",
    "text": "In this lab, we explore the resampling techniques covered in this chapter. Some of the commands in this lab may take a while to run on your computer.\n\n\nWe explore the use of the validation set approach in order to estimate the test error rates that result from ﬁtting various linear models on the Auto data set.\nBefore we begin, we use the set.seed() function in order to set a seed for R’s random number generator, so that the reader of this book will obtain precisely the same results as those shown below. It is generally a good idea to set a random seed when performing an analysis such as cross-validation that contains an element of randomness, so that the results obtained can be reproduced precisely at a later time.\n\n\n\nWe begin by using the sample() function to split the set of observations into two halves, by selecting a random subset of 196 observations out of the original 392 observations. We refer to these observations as the training set.\n\nlibrary(ISLR)\nset.seed(1)\ntrain <- sample(392, 196)\n\n(Here we use a shortcut in the sample command; see ?sample for details.) We then use the subset option in lm() to ﬁt a linear regression using only the observations corresponding to the training set.\n\nlm.fit <- lm(mpg ~ horsepower, data = Auto, subset = train)\n\nWe now use the predict() function to estimate the response for all 392 observations, and we use the mean() function to calculate the MSE of the 196 observations in the validation set. Note that the -train index below selects only the observations that are not in the training set.\n\nattach(Auto)\nmean((mpg - predict(lm.fit, Auto))[-train]^2)\n\n[1] 23.26601\n\n\nTherefore, the estimated test MSE for the linear regression ﬁt is 26.14.\n\n\n\nWe can use the poly() function to estimate the test error for polynomial and cubic regressions.\n\n# poly 2nd degree\nlm.fit2 <- lm(mpg ~ poly(horsepower, 2), \n              data = Auto, subset = train)\n\nmean((mpg - predict(lm.fit2, Auto))[-train ]^2)\n\n[1] 18.71646\n\n# poly 3rd degree\nlm.fit3 <- lm(mpg ~ poly(horsepower, 3), \n              data = Auto, subset = train )\nmean((mpg - predict(lm.fit3, Auto ))[-train ]^2)\n\n[1] 18.79401\n\n\nThese error rates are similar to each other, respectively. But, if we choose a different training set instead, then we will obtain somewhat diﬀerent errors on the validation set.\n\nset.seed(2)\ntrain <- sample(392, 196)\n\nlm.fit <- lm(mpg ~ horsepower, subset = train)\nmean((mpg - predict(lm.fit, Auto ))[ -train]^2)\n\n[1] 25.72651\n\nlm.fit2 <- lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)\nmean(( mpg - predict( lm.fit2 , Auto ))[ -train]^2)\n\n[1] 20.43036\n\nlm.fit3 <- lm (mpg ~ poly(horsepower, 3), data = Auto , subset = train)\nmean(( mpg - predict (lm.fit3, Auto ))[ -train]^2)\n\n[1] 20.38533\n\n\nAlthough the values are slightly different, these results are consistent with our previous ﬁndings: a model that predicts mpg using a quadratic function of horsepower performs better than a model that involves only a linear function of horsepower, and there is little evidence in favor of a model that uses a cubic function of horsepower."
  },
  {
    "objectID": "lab05-resampling.html#cross-validation",
    "href": "lab05-resampling.html#cross-validation",
    "title": "Lab 05 Resampling",
    "section": "2 Cross validation",
    "text": "2 Cross validation\n\nLeave-one-out CV\nT leave-one-out Cross-validation (LOOCV) estimate can be automatically computed for any generalized linear model using the glm() and cv.glm() functions. We can use the glm() function to perform logistic regression by passing in the family=\"binomial\" argument. But if we use glm() to ﬁt a model without passing in the family argument, then it performs linear regression, just like the lm() function. So for instance,\n\n\ncv.glm()\n\n# glm() approach\nglm.fit <- glm(mpg ~ horsepower, data = Auto)\ncoef(glm.fit )\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n# lm() approach\nlm.fit <- lm(mpg ~ horsepower, data = Auto)\ncoef(lm.fit)\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n\nyield identical linear regression models. In this lab, we will perform linear regression using the glm() function rather than the lm() function because the latter can be used together with cv.glm(). The cv.glm() function is part of the {boot} library.\n\nlibrary(boot)\nglm.fit <- glm(mpg ~ horsepower, data = Auto )\ncv.err <- cv.glm(Auto, glm.fit)\ncv.err$delta\n\n[1] 24.23151 24.23114\n\n\nThe cv.glm() function produces a list with several components. The two numbers in the delta vector contain the cross-validation results. In this case the numbers are identical (up to two decimal places) and correspond to the LOOCV statistic (Ch 5 James et al. 2021). Below, we discuss a situation in which the two numbers differ. Our cross-validation estimate for the test error is approximately 24.23.\n\n\nfor()\nWe can repeat this procedure for increasingly complex polynomial fits. To automate the process, we use the for() function to initiate a for loop which iteratively ﬁts polynomial regressions for polynomials of order i = 1 to i = 5, computes the associated cross-validation error, and stores it in the ith element of the vector cv.error. We begin by initializing the vector. This command will likely take some time to run.\n\nlibrary(tictoc) # time your computer\ncv.error <- rep(0 ,5)\ntic()\nfor (i in 1:5){\n  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto)\n  cv.error[i] <- cv.glm(Auto, glm.fit)$delta[1]\n}\ntoc() # Ed's PC\n\n4.78 sec elapsed\n\ncv.error\n\n[1] 24.23151 19.24821 19.33498 19.42443 19.03321\n\nplot(cv.error, type='b')\n\n\n\n\nWe see a sharp drop in the estimated test MSE between the linear and quadratic ﬁts, but then no clear improvement from using higher-order polynomials.\n\n\nK-fold CV\nThe cv.glm() function can also be used to implement k-fold CV. Below we use k = 10, a common choice for k, on the Auto data set. We once again set a random seed and initialize a vector in which we will store the CV errors corresponding to the polynomial ﬁts of orders one to ten.\n\nset.seed(17)\ncv.error.10 <- rep (0 ,10)\nfor(i in  1:10) {\n  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto )\n  cv.error.10[i] = cv.glm(Auto, glm.fit, K = 10)$delta[1]\n}\ncv.error.10\n\n [1] 24.27207 19.26909 19.34805 19.29496 19.03198 18.89781 19.12061 19.14666\n [9] 18.87013 20.95520\n\nplot(cv.error.10, type='b')\n\n\n\n\nYou may notice that the computation time is much shorter than that of LOOCV. (In principle, the computation time for LOOCV for a least squares linear model should be faster than for k-fold CV, due to a mathematical shortcut for LOOCV (see Ch 5 James et al. 2021); however, unfortunately the cv.glm() function does not make use of this efficiency. We still see little evidence that using cubic or higher-order polynomial terms leads to lower test error than simply using a quadratic fit.\nThe two numbers associated with delta are essentially the same when LOOCV is performed. When we instead perform k-fold CV, then the two numbers associated with delta differ slightly. The first is the standard k-fold CV estimate and the second is a bias-corrected version. On this data set, we see the two estimates are very similar to each other."
  },
  {
    "objectID": "lab05-resampling.html#bootstrap",
    "href": "lab05-resampling.html#bootstrap",
    "title": "Lab 05 Resampling",
    "section": "3 Bootstrap",
    "text": "3 Bootstrap\nWe will illustrate the use of the bootstrap in a simple example, as well as on an example involving estimating the accuracy of the linear regression model on the Auto data set.\n\nboot()\nOne of the great advantages of the bootstrap approach is that it can be applied in almost all situations. No complicated mathematical calculations are required. Performing a bootstrap analysis in R entails only two steps. First, we must create a function that computes the statistic of interest. Second, we use the boot() function, which is part of the {boot} library, to perform the bootstrap by repeatedly sampling observations from the data set with replacement.\nThe Portfolio data set in the {ISLR} package is described in Section 5.2. To illustrate the use of the bootstrap on this data, we must ﬁrst create a function, alpha.fn(), which takes as input the (X, Y) data as well as a vector indicating which observations should be used to estimate α. The function then outputs the estimate for α based on the selected observations.\n\n# make a fun function\nalpha.fn <- function(data, index){\n  X <- data$X[index]\n  Y <- data$Y[index]\n  return((var(Y) - cov (X, Y))/(var(X)+ var(Y)-2 * cov(X,Y)))\n}\n\nThis function returns, or outputs, an estimate for α based on the observations indexed by the argument index. For instance, the following command tells R to estimate α using all 100 observations.\n\nalpha.fn(Portfolio, 1:100)\n\n[1] 0.5758321\n\n\nThe next command uses the sample() function to randomly select 100 observations from the range 1 to 100, with replacement. This is equivalent to constructing a new bootstrap data set and recomputing \\(\\hat\\alpha\\) based on the new data set.\n\nset.seed(1)\nalpha.fn(Portfolio, sample(100, 100, replace = T))\n\n[1] 0.7368375\n\n\nWe can implement a bootstrap analysis by performing this command many times, recording all of the corresponding estimates for α, and computing the resulting standard deviation. However, the boot() function automates this approach. Below we produce R = 1,000 bootstrap estimates for α.\n\nset.seed(1)\nboot(Portfolio, alpha.fn, R = 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Portfolio, statistic = alpha.fn, R = 1000)\n\n\nBootstrap Statistics :\n     original       bias    std. error\nt1* 0.5758321 -0.001596422  0.09376093\n\n\nThe ﬁnal output shows that using the original data, \\(\\hat\\alpha= 0.58\\), and that the bootstrap estimate for \\(SE\\hat\\alpha = 0.09\\).\n\n\nRegression accuracy\nThe bootstrap approach can be used to assess the variability of the coef- ﬁcient estimates and predictions from a statistical learning method. Here we use the bootstrap approach in order to assess the variability of the estimates for \\(\\beta_0\\) and \\(\\beta_1\\), the intercept and slope terms for the linear regression model that uses horsepower to predict mpg in the Auto data set. We will compare the estimates obtained using the bootstrap to those obtained using the formulas for \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\).\nWe ﬁrst create a simple function, boot.fn(), which takes in the Auto data set as well as a set of indices for the observations, and returns the intercept and slope estimates for the linear regression model. We then apply this function to the full set of 392 observations in order to compute the estimates of \\(\\beta_0\\) and \\(\\beta_1\\) on the entire data set using the usual linear regression coefficient estimate formulas. Note that we do not need the { and } at the beginning and end of the function because it is only one line long.\n\nplot(mpg ~ horsepower, data = Auto)\nabline(lm(mpg ~ horsepower, data = Auto))\n\n\n\n# function!\nboot.fn <- function(data, index)\n  return(coef(lm(mpg ~ horsepower, data = data, subset = index)))\nboot.fn(Auto, 1:392)\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n\nThe boot.fn() function can also be used in order to create bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. Here are two examples:\n\n# first with a seed\nset.seed(1)\nboot.fn(Auto, sample(392, 392, replace = T)) \n\n(Intercept)  horsepower \n 40.3404517  -0.1634868 \n\n# no seed\nboot.fn(Auto, sample(392, 392, replace = T)) \n\n(Intercept)  horsepower \n 40.1186906  -0.1577063 \n\n\n\n\nBootstrap\n\nboot(Auto, boot.fn, 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Auto, statistic = boot.fn, R = 1000)\n\n\nBootstrap Statistics :\n      original        bias    std. error\nt1* 39.9358610  0.0544513229 0.841289790\nt2* -0.1578447 -0.0006170901 0.007343073\n\n\nand\nThis indicates that the bootstrap estimate for \\(SE(\\hat\\beta_0)\\) is 0.84, and that the bootstrap estimate for \\(SE(\\hat\\beta_1)\\) is 0.0074. Standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. These can be obtained using the summary() function.\n\nsummary(lm(mpg ~ horsepower, data = Auto))$coef\n\n              Estimate  Std. Error   t value      Pr(>|t|)\n(Intercept) 39.9358610 0.717498656  55.65984 1.220362e-187\nhorsepower  -0.1578447 0.006445501 -24.48914  7.031989e-81\n\n\nThe standard error estimates for \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\) somewhat diﬀerent from the estimates obtained using the bootstrap. Does this indicate a problem with the bootstrap? In fact, it suggests the opposite. Consider that estimation of these parameters rely on certain assumptions. For example, they depend on the unknown parameter \\(\\sigma^2\\), the noise variance. We then estimate \\(\\sigma^2\\) using the RSS. Now although the formula for the standard errors do not rely on the linear model being correct, the estimate for \\(\\sigma^2\\) does. Also, there is a non-linear relationship in the data, and so the residuals from a linear ﬁt will be inflated, and so will \\(\\sigma^2\\). Secondly, standard linear regression assume (somewhat unrealistically) that the \\(x_i\\) values are ﬁxed, and all the variability comes from the variation in the errors \\(\\epsilon_i\\). The bootstrap approach does not rely on any of these assumptions, and so it is likely giving a more accurate estimate of the standard errors of \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\) than is the summary() function.\nBelow we compute the bootstrap standard error estimates and the standard linear regression estimates that result from ﬁtting the quadratic model to the data. Since this model provides a good ﬁt to the data, there is now a better correspondence between the bootstrap estimates and the standard estimates of \\(SE(\\hat\\beta_0)\\), \\(SE(\\hat\\beta_1)\\) and \\(SE(\\hat\\beta_2)\\).\n\nboot.fn <- function(data, index){\n  coefficients(lm(mpg ~ horsepower + I(horsepower^2), \n                  data=data, \n                  subset = index))\n}\n\nset.seed(1)\nboot(Auto, boot.fn, 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Auto, statistic = boot.fn, R = 1000)\n\n\nBootstrap Statistics :\n        original        bias     std. error\nt1* 56.900099702  3.511640e-02 2.0300222526\nt2* -0.466189630 -7.080834e-04 0.0324241984\nt3*  0.001230536  2.840324e-06 0.0001172164\n\nsummary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef\n\n                    Estimate   Std. Error   t value      Pr(>|t|)\n(Intercept)     56.900099702 1.8004268063  31.60367 1.740911e-109\nhorsepower      -0.466189630 0.0311246171 -14.97816  2.289429e-40\nI(horsepower^2)  0.001230536 0.0001220759  10.08009  2.196340e-21"
  },
  {
    "objectID": "lab05-resampling.html#exercises",
    "href": "lab05-resampling.html#exercises",
    "title": "Lab 05 Resampling",
    "section": "4 Exercises",
    "text": "4 Exercises\n\nExercise 1\nWe have used logistic regression to predict the probability of default using income and balance on the Default data set. We will now estimate the test error of this logistic regression model using the validation set approach. Do not forget to set a random seed before beginning your analysis.\n\n1.1\nFit a logistic regression model that uses income and balance to predict default.\n\n\n1.2\nUsing the validation set approach, estimate the test error of this model. In order to do this, you must perform the following steps:\n\nSplit the sample set into a training set and a validation set.\nFit a multiple logistic regression model using only the training observations.\nObtain a prediction of default status for each individual in the validation set by computing the posterior probability of default for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.\nCompute the validation set error, which is the fraction of the observations in the validation set that are misclassified.\n\n\n\n1.3\nRepeat the process in 1.2 three times, using three diﬀerent splits of the observations into a training set and a validation set. Comment on the results obtained.\n\n\n1.4\nNow consider a logistic regression model that predicts the probability of default using income, balance, and a dummy variable for student. Estimate the test error for this model using the validation set approach. Comment on whether or not including a dummy variable for student leads to a reduction in the test error rate."
  },
  {
    "objectID": "lab05-resampling.html#resources",
    "href": "lab05-resampling.html#resources",
    "title": "Lab 05 Resampling",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab05-resampling.html#harper-adams-data-science",
    "href": "lab05-resampling.html#harper-adams-data-science",
    "title": "Lab 05 Resampling",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab06-mod-selection.html",
    "href": "lab06-mod-selection.html",
    "title": "Lab 06 Model selection",
    "section": "",
    "text": "Here we apply the best subset selection approach to the Hitters data. We wish to predict a baseball player’s Salary on the basis of various statistics associated with performance in the previous year.\n\n\n\nFirst of all, we note that the Salary variable is missing for some of the players. The is.na() function can be used to identify the missing observations. It returns a vector of the same length as the input vector, with a TRUE for any elements that are missing, and a FALSE for non-missing elements.\nThe sum() function can then be used to count all of the missing elements.\n\nlibrary (ISLR2)\n# View(Hitters) \nnames(Hitters) \n\n [1] \"AtBat\"     \"Hits\"      \"HmRun\"     \"Runs\"      \"RBI\"       \"Walks\"    \n [7] \"Years\"     \"CAtBat\"    \"CHits\"     \"CHmRun\"    \"CRuns\"     \"CRBI\"     \n[13] \"CWalks\"    \"League\"    \"Division\"  \"PutOuts\"   \"Assists\"   \"Errors\"   \n[19] \"Salary\"    \"NewLeague\"\n\ndim(Hitters) \n\n[1] 322  20\n\nsum(is.na(Hitters$Salary))\n\n[1] 59\n\n\nHence we see that Salary is missing for 59 players. The na.omit() function removes all of the rows that have missing values in any variable.\n\nHitters <- na.omit(Hitters)\ndim(Hitters) \n\n[1] 263  20\n\nsum(is.na(Hitters))\n\n[1] 0\n\n\n\n\n\nThe regsubsets() function (part of the leaps library) performs best subset selection by identifying the best model that contains a given number of predictors, where best is quantified using RSS. The syntax is the same as for lm(). The summary() command outputs the best set of variables for each model size.\n\nlibrary(leaps)\n\nWarning: package 'leaps' was built under R version 4.2.2\n\nregfit.full <- regsubsets(Salary ~ ., Hitters)\nsummary(regfit.full) \n\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., Hitters)\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 8\nSelection Algorithm: exhaustive\n         AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 ) \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n2  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n3  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n4  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n5  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n6  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n7  ( 1 ) \" \"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \"*\"    \" \"   \" \" \n8  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \"*\"    \"*\"   \" \" \n         CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 ) \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 ) \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 ) \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 ) \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n\n\nAn asterisk indicates that a given variable is included in the corresponding model. For instance, this output indicates that the best two-variable model contains only Hits and CRBI. By default, regsubsets() only reports results up to the best eight-variable model. But the nvmax option can be used in order to return as many variables as are desired. Here we fit up to a 19-variable model.\n\n\n\n\nregfit.full <- regsubsets(Salary ~ ., \n                          data = Hitters,\n                          nvmax = 19)\n\nreg.summary <- summary(regfit.full)\n\nThe summary()function also returns \\(R^2\\), RSS, adjusted \\(R^2\\), \\(C_p\\), and BIC. We can examine these to try to select the best overall model.\n\nnames(reg.summary)\n\n[1] \"which\"  \"rsq\"    \"rss\"    \"adjr2\"  \"cp\"     \"bic\"    \"outmat\" \"obj\"   \n\nreg.summary$rsq\n\n [1] 0.3214501 0.4252237 0.4514294 0.4754067 0.4908036 0.5087146 0.5141227\n [8] 0.5285569 0.5346124 0.5404950 0.5426153 0.5436302 0.5444570 0.5452164\n[15] 0.5454692 0.5457656 0.5459518 0.5460945 0.5461159\n\n\nFor instance, we see that the \\(R^2\\) statistic increases from 32%, when only one variable is included in the model, to almost 55%, when all variables are included. As expected, the \\(R^2\\) statistic increases monotonically as more variables are included.\nPlotting RSS, adjusted \\(R^2\\), \\(C_p\\), and BIC for all of the models at once will help us decide which model to select. Note the type = \"l\" option tells R to connect the plotted points with lines.\n\npar(mfrow = c(2, 2))\n\nplot(reg.summary$rss, \n     xlab = \"Number of Variables\", \n     ylab = \"RSS \", \n     type = \"l\")\nplot(reg.summary$adjr2, \n     xlab = \"Number of Variables\", \n     ylab = \"Adjusted RSq\", \n     type = \"l\")\n\nwhich.max(reg.summary$adjr2)\n\n[1] 11\n\npoints(11, reg.summary$adjr2[11], \n       col = \"red\", cex = 2 , pch = 20)\n\nplot(reg.summary$cp, \n     xlab = \"Number of Variables\", \n     ylab = \"Cp\", \n     type = \"l\")\n\nwhich.min(reg.summary$cp)\n\n[1] 10\n\npoints(10, reg.summary$cp[10],\n       col = \"red\", cex = 2, pch = 20)\n\nwhich.min(reg.summary$bic)\n\n[1] 6\n\nplot(reg.summary$bic, xlab = \"Number of Variables\", \n     ylab = \"BIC\", type = \"l\")\npoints (6, reg.summary$bic[6], \n        col = \"red\", cex = 2, pch = 20)\n\n\n\npar(mfrow = c(1, 1))\n\n\n\n\nThe points() command works like the plot() command, except that it puts points on a plot that has already been created, instead of creating a new plot. The which.max() function can be used to identify the location of the maximum point of a vector. We will now plot a red dot to indicate the model with the largest adjusted \\(R^2\\) statistic.\n\n\n\n\n# for each plot, one row per model\n\npar(mfrow = c(2, 2))\n\nplot(regfit.full, scale = \"r2\")\nplot(regfit.full, scale = \"adjr2\")\nplot(regfit.full, scale = \"Cp\")\nplot(regfit.full, scale = \"bic\")\n\n\n\npar(mfrow = c(1, 1))\n\nThe top row of each plot contains a black square for each variable selected according to the optimal model associated with that statistic. For instance, we see that several models share a BIC close to -150. However, the model with the lowest BIC is the six-variable model that contains only AtBat, Hits, Walks, CRBI, DivisionW, and PutOuts. We can use the coef() function to see the coeﬃcient estimates associated with this model.\n\ncoef(regfit.full, 6) \n\n (Intercept)        AtBat         Hits        Walks         CRBI    DivisionW \n  91.5117981   -1.8685892    7.6043976    3.6976468    0.6430169 -122.9515338 \n     PutOuts \n   0.2643076"
  },
  {
    "objectID": "lab06-mod-selection.html#stepwise-regression",
    "href": "lab06-mod-selection.html#stepwise-regression",
    "title": "Lab 06 Model selection",
    "section": "2 Stepwise regression",
    "text": "2 Stepwise regression\nWe can also use the regsubsets() function to perform forward stepwise, or backward stepwise selection, using the argument method = \"forward\" or method = \"backward\".\n\nregfit.fwd <- regsubsets(Salary ~ ., data = Hitters,\n                         nvmax = 19, method = \"forward\")\nsummary(regfit.fwd )\n\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"forward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: forward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n4  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \" \"   \"*\" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n\nregfit.bwd <- regsubsets(Salary ~ ., data = Hitters, \n                         nvmax = 19 , method = \"backward\")\nsummary(regfit.bwd )\n\nSubset selection object\nCall: regsubsets.formula(Salary ~ ., data = Hitters, nvmax = 19, method = \"backward\")\n19 Variables  (and intercept)\n           Forced in Forced out\nAtBat          FALSE      FALSE\nHits           FALSE      FALSE\nHmRun          FALSE      FALSE\nRuns           FALSE      FALSE\nRBI            FALSE      FALSE\nWalks          FALSE      FALSE\nYears          FALSE      FALSE\nCAtBat         FALSE      FALSE\nCHits          FALSE      FALSE\nCHmRun         FALSE      FALSE\nCRuns          FALSE      FALSE\nCRBI           FALSE      FALSE\nCWalks         FALSE      FALSE\nLeagueN        FALSE      FALSE\nDivisionW      FALSE      FALSE\nPutOuts        FALSE      FALSE\nAssists        FALSE      FALSE\nErrors         FALSE      FALSE\nNewLeagueN     FALSE      FALSE\n1 subsets of each size up to 19\nSelection Algorithm: backward\n          AtBat Hits HmRun Runs RBI Walks Years CAtBat CHits CHmRun CRuns CRBI\n1  ( 1 )  \" \"   \" \"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n2  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n3  ( 1 )  \" \"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n4  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \" \"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n5  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n6  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n7  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \" \" \n8  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \" \"    \" \"   \" \"    \"*\"   \"*\" \n9  ( 1 )  \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n10  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n11  ( 1 ) \"*\"   \"*\"  \" \"   \" \"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n12  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n13  ( 1 ) \"*\"   \"*\"  \" \"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n14  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \" \"   \" \"    \"*\"   \"*\" \n15  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \" \" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n16  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n17  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \" \"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n18  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \" \"    \"*\"   \"*\" \n19  ( 1 ) \"*\"   \"*\"  \"*\"   \"*\"  \"*\" \"*\"   \"*\"   \"*\"    \"*\"   \"*\"    \"*\"   \"*\" \n          CWalks LeagueN DivisionW PutOuts Assists Errors NewLeagueN\n1  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n2  ( 1 )  \" \"    \" \"     \" \"       \" \"     \" \"     \" \"    \" \"       \n3  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n4  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n5  ( 1 )  \" \"    \" \"     \" \"       \"*\"     \" \"     \" \"    \" \"       \n6  ( 1 )  \" \"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n7  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n8  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n9  ( 1 )  \"*\"    \" \"     \"*\"       \"*\"     \" \"     \" \"    \" \"       \n10  ( 1 ) \"*\"    \" \"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n11  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n12  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \" \"    \" \"       \n13  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n14  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n15  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n16  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \" \"       \n17  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n18  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n19  ( 1 ) \"*\"    \"*\"     \"*\"       \"*\"     \"*\"     \"*\"    \"*\"       \n\n\nFor instance, we see that using forward stepwise selection, the best one-variable model contains only CRBI, and the best two-variable model additionally includes Hits. For this data, the best one-variable through six- variable models are each identical for best subset and forward selection. However, the best seven-variable models identified by forward stepwise selection, backward stepwise selection, and best subset selection are different.\n\nrbind(\n  coef(regfit.full, 7),\n  coef(regfit.fwd, 7),\n  coef(regfit.bwd, 7) )\n\n     (Intercept)      Hits    Walks    CAtBat     CHits     CHmRun DivisionW\n[1,]    79.45095  1.283351 3.227426 -0.375235 1.4957073  1.4420538 -129.9866\n[2,]   109.78731 -1.958885 7.449877  4.913140 0.8537622 -0.3053070 -127.1224\n[3,]   105.64875 -1.976284 6.757491  6.055869 1.1293095 -0.7163346 -116.1692\n       PutOuts\n[1,] 0.2366813\n[2,] 0.2533404\n[3,] 0.3028847"
  },
  {
    "objectID": "lab06-mod-selection.html#validation-sets-for-model-selection",
    "href": "lab06-mod-selection.html#validation-sets-for-model-selection",
    "title": "Lab 06 Model selection",
    "section": "3 Validation sets for model selection",
    "text": "3 Validation sets for model selection\nSo, it is possible to choose among a set of models of diﬀerent sizes using \\(C_p\\), BIC, and adjusted \\(R^2\\). We will now consider how to do this using the validation set and cross-validation approaches.\nIn order for these approaches to yield accurate estimates of the test error, we must use only the training observations to perform all aspects of model fitting, including variable selection. Therefore, the determination of which model of a given size is best must be made using only the training observations. This point is subtle but important.\nIf the full data set is used to perform the best subset selection step, the validation set errors and cross-validation errors that we obtain will not be accurate estimates of the test error.\nIn order to use the validation set approach, we begin by splitting the observations into a training set and a test set. We do this by creating a random vector, train, of elements equal to TRUE if the corresponding observation is in the training set, and FALSE otherwise. The vector test has a TRUE if the observation is in the test set, and a FALSE otherwise. Note the ! in the command to create test causes TRUEs to be switched to FALSEs and vice versa. We also set a random seed so that you can obtain the same training set/test set split, i.e so that you analysis will be repeatable.\n\nset.seed(1)\ntrain <- sample(c(TRUE, FALSE), nrow (Hitters), replace = TRUE )\ntest <- (!train)\n\nNow, we apply regsubsets() to the training set in order to perform best subset selection.\n\nregfit.best <- regsubsets(Salary ~ .,\n                          data = Hitters[train, ], nvmax = 19)\n\nNotice that we subset the Hitters data frame directly in the call in order to access only the training subset of the data, using the expression Hitters[train, ]. We now compute the validation set error for the best model of each model size. We first make a model matrix from the test data.\n\nmodel.matrix()\n\ntest.mat <- model.matrix(Salary ~., data = Hitters[test, ]) \n\nThe model.matrix() function is used in many regression packages for building an “X” matrix from data. Now we run a loop, and for each size i, we extract the coeﬃcients from regfit.best for the best model of that size, multiply them into the appropriate columns of the test model matrix to form the predictions, and compute the test MSE.\n\nval.errors <- rep(NA, 19)\nfor(i in 1:19) {\n  coefi <- coef(regfit.best, id = i)\n  pred <- test.mat [ , names(coefi)] %*% coefi\n  val.errors[i] <- mean ((Hitters$Salary[test] - pred )^2)\n}\n\nWe find that the best model is the one that contains seven variables.\n\nval.errors\n\n [1] 164377.3 144405.5 152175.7 145198.4 137902.1 139175.7 126849.0 136191.4\n [9] 132889.6 135434.9 136963.3 140694.9 140690.9 141951.2 141508.2 142164.4\n[17] 141767.4 142339.6 142238.2\n\nwhich.min(val.errors)\n\n[1] 7\n\ncoef(regfit.best, 7)\n\n (Intercept)        AtBat         Hits        Walks        CRuns       CWalks \n  67.1085369   -2.1462987    7.0149547    8.0716640    1.2425113   -0.8337844 \n   DivisionW      PutOuts \n-118.4364998    0.2526925 \n\n# we can graph it too\npar(mfrow = c(1,1))\nplot(val.errors, type = 'b', \n     pch = 16, col = 'goldenrod',\n     main = \"Lower is better\")\n\n\n\n\n\n\nAutomating it\nThis was a little tedious, partly because there is no predict() method for regsubsets(). Since we will be using this function again, we can capture our steps above and write our own predict method.\n\npredict.regsubsets <- function(object, newdata , id , ...) {\n  form <- as.formula(object$ call[[ 2 ]])\n  mat <- model.matrix (form, newdata )\n  coefi <- coef (object , id = id)\n  xvars <- names (coefi) \n  mat [, xvars ] %*% coefi\n  }\n\nThis function pretty much mimics what we did above. The only complex part is how we extracted the formula used in the call to regsubsets(). We wioll explore how we use this function below, when we do cross-validation.\nFinally, we perform best subset selection on the full data set, and select the best seven-variable model. It is important that we make use of the full data set in order to obtain more accurate coefficient estimates. Note that we perform best subset selection on the full data set and select the best seven-variable model, rather than simply using the variables that were obtained from the training set, because the best seven-variable model on the full data set may diﬀer from the corresponding model on the training set.\n\nregfit.best <- regsubsets(Salary ~ ., \n                          data = Hitters, nvmax = 19)\ncoef(regfit.best, 7)\n\n (Intercept)         Hits        Walks       CAtBat        CHits       CHmRun \n  79.4509472    1.2833513    3.2274264   -0.3752350    1.4957073    1.4420538 \n   DivisionW      PutOuts \n-129.9866432    0.2366813 \n\n\nIn fact, we see that the best seven-variable model on the full data set has a diﬀerent set of variables than the best seven-variable model on the training set.\n\n\nCross-val\nWe now try to choose among the models of diﬀerent sizes using cross- validation. This approach is somewhat involved, as we must perform best subset selection within each of the k training sets. Despite this, we see that with its clever subsetting syntax, R makes this job quite easy. First, we create a vector that allocates each observation to one of k = 10 folds, and we create a matrix in which we will store the results.\n\nk <- 10\nn <- nrow(Hitters) \n\nset.seed(1)\nfolds <- sample(rep(1:k, length = n))\n\ncv.errors <- matrix (NA, k, 19, dimnames = list (NULL, paste (1:19)))\n\nNow we write a for loop that performs cross-validation. In the \\(j_{th}\\) fold, the elements of folds that equal j are in the test set, and the remainder are in the training set. We make our predictions for each model size (using our new predict() method), compute the test errors on the appropriate subset, and store them in the appropriate slot in the matrix cv.errors. Note that in the following code R will automatically use our predict.regsubsets() function when we call predict() because the best.fit object has class regsubsets.\n\n\nNested for() loops\n\nfor(j in 1:k){\n  best.fit <- regsubsets(Salary ~ .,\n                            data = Hitters[folds != j, ], nvmax = 19)\n  for (i in 1: 19) {\n    pred <- predict(best.fit, Hitters[ folds == j, ], id = i)\n    cv.errors[j, i] <- mean((Hitters$Salary[folds == j] - pred )^2)\n  }\n}\n\nThis has given us a 10 \\(\\times\\) 19 matrix, of which the (j, i)th element corresponds to the test MSE for the \\(j_{th}\\) cross-validation fold for the best j-variable model. We use the apply() function to average over the columns of this matrix in order to obtain a vector for which the \\(i_{th}\\) element is the cross-validation error for the i-variable model.\n\nmean.cv.errors <- apply(cv.errors ,2 , mean)\nmean.cv.errors\n\n       1        2        3        4        5        6        7        8 \n143439.8 126817.0 134214.2 131782.9 130765.6 120382.9 121443.1 114363.7 \n       9       10       11       12       13       14       15       16 \n115163.1 109366.0 112738.5 113616.5 115557.6 115853.3 115630.6 116050.0 \n      17       18       19 \n116117.0 116419.3 116299.1 \n\npar(mfrow = c(1 , 1))\nplot(mean.cv.errors, type = \"b\",\n     pch = 16, col = 'goldenrod')\n\n\n\n\nWe see that cross-validation selects a 10-variable model. We now perform best subset selection on the full data set in order to obtain the 10-variable model.\n\nreg.best <- regsubsets(Salary ~ ., data = Hitters,\n                       nvmax = 19)\ncoef(reg.best, 10)          \n\n (Intercept)        AtBat         Hits        Walks       CAtBat        CRuns \n 162.5354420   -2.1686501    6.9180175    5.7732246   -0.1300798    1.4082490 \n        CRBI       CWalks    DivisionW      PutOuts      Assists \n   0.7743122   -0.8308264 -112.3800575    0.2973726    0.2831680 \n\n\n\n# It is always a good idea to examine the coefficients graphically\n\npar(mfrow=c(1,2))\n\nplot(Salary ~ Hits, data = Hitters)\nabline(lm(Salary ~ Hits, data = Hitters))\n\nplot(Salary ~ Walks, data = Hitters)\nabline(lm(Salary ~ Walks, data = Hitters))\n\n\n\npar(mfrow=c(1,1))"
  },
  {
    "objectID": "lab06-mod-selection.html#ridge-regression-and-lasso",
    "href": "lab06-mod-selection.html#ridge-regression-and-lasso",
    "title": "Lab 06 Model selection",
    "section": "4 Ridge regression and lasso",
    "text": "4 Ridge regression and lasso\n\nglmnet()\nWe will use the {glmnet} package in order to perform ridge regression and the lasso. The main function in this package is glmnet(), which can be used to fit ridge regression models, lasso models, and more. This function has slightly diﬀerent syntax from other model-fitting functions that we have encountered thus far in this book. In particular, we must pass in an x matrix as well as a y vector, and we do not use the y ∼ x syntax. We will now perform ridge regression and the lasso in order to predict Salary on the Hitters data. Before proceeding ensure that the missing values have been removed from the data.\n\n# data prep\nx <- model.matrix(Salary ~ ., Hitters )[, -1]\ny <- Hitters$Salary\n\nThe model.matrix() function is particularly useful for creating x; not only does it produce a matrix corresponding to the 19 predictors but it also automatically transforms any qualitative variables into dummy variables. The latter property is important because glmnet() can only take numerical, quantitative inputs.\n\n\nRidge reg.\nThe glmnet() function has an alpha argument that determines what type of model is fit. If alpha=0 then a ridge regression model is fit, and if alpha=1 then a lasso model is fit. We first fit a ridge regression model.\n\nlibrary(glmnet) \n\nWarning: package 'glmnet' was built under R version 4.2.2\n\n\nLoading required package: Matrix\n\n\nLoaded glmnet 4.1-4\n\ngrid <- 10^seq(10 , -2 , length = 100)\nridge.mod <- glmnet(x, y, alpha = 0 , lambda = grid )\n\nBy default the glmnet() function performs ridge regression for an automatically selected range of \\(\\lambda\\) values. However, here we have chosen to implement the function over a grid of values ranging from \\(\\lambda=1010\\) to \\(\\lambda = 10^2\\), essentially covering the full range of scenarios from the null model containing only the intercept, to the least squares fit. As we will see, we can also compute model fits for a particular value of \\(\\lambda\\) that is not one of the original grid values. Note that by default, the glmnet() function standardizes the variables so that they are on the same scale. To turn off this default setting, use the argument standardize = FALSE.\nAssociated with each value of \\(\\lambda\\) is a vector of ridge regression coefficients, stored in a matrix that can be accessed by coef(). In this case, it is a 20 \\(\\times\\) 100 matrix, with 20 rows (one for each predictor, plus an intercept) and 100 columns (one for each value of \\(\\lambda\\)).\n\ndim(coef(ridge.mod ))\n\n[1]  20 100\n\n\nWe expect the coefficient estimates to be much smaller, in terms of \\(\\ell_2\\) norm, when a large value of \\(\\lambda\\) is used, as compared to when a small value of \\(\\lambda\\) is used. These are the coefficients when\\(\\lambda = 11,498\\), along with their \\(\\ell_2\\) norm:\n\nridge.mod$lambda[50]\n\n[1] 11497.57\n\nsqrt(sum(coef(ridge.mod )[-1 , 50]^2))\n\n[1] 6.360612\n\n\nIn contrast, here are the coeﬃcients when \\(\\lambda=705\\), along with their \\(\\ell_2\\) norm. Note the much larger \\(\\ell_2\\) norm of the coeﬃcients associated with this smaller value of \\(\\lambda\\).\n\nridge.mod$lambda[60] # lambda\n\n[1] 705.4802\n\ncoef(ridge.mod )[ , 60]\n\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 54.32519950   0.11211115   0.65622409   1.17980910   0.93769713   0.84718546 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n  1.31987948   2.59640425   0.01083413   0.04674557   0.33777318   0.09355528 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  0.09780402   0.07189612  13.68370191 -54.65877750   0.11852289   0.01606037 \n      Errors   NewLeagueN \n -0.70358655   8.61181213 \n\nsqrt(sum(coef(ridge.mod)[-1 , 60 ]^2 ))\n\n[1] 57.11001\n\n\n\n\nRidge predict()\nWe can use the predict() function for a number of purposes. For instance, we can obtain the ridge regression coeﬃcients for a new value of \\(\\lambda\\), say 50:\n\npredict(ridge.mod, s = 50, type = \"coefficients\")[1:20, ]\n\n  (Intercept)         AtBat          Hits         HmRun          Runs \n 4.876610e+01 -3.580999e-01  1.969359e+00 -1.278248e+00  1.145892e+00 \n          RBI         Walks         Years        CAtBat         CHits \n 8.038292e-01  2.716186e+00 -6.218319e+00  5.447837e-03  1.064895e-01 \n       CHmRun         CRuns          CRBI        CWalks       LeagueN \n 6.244860e-01  2.214985e-01  2.186914e-01 -1.500245e-01  4.592589e+01 \n    DivisionW       PutOuts       Assists        Errors    NewLeagueN \n-1.182011e+02  2.502322e-01  1.215665e-01 -3.278600e+00 -9.496680e+00 \n\n\n\n\nTest error\nWe now split the samples into a training set and a test set in order to estimate the test error of ridge regression and the lasso. There are two common ways to randomly split a data set. The first is to produce a random vector of TRUE, FALSE elements and select the observations corresponding to TRUE for the training data. The second is to randomly choose a subset of numbers between 1 and n; these can then be used as the indices for the training observations. The two approaches work equally well.\nHere we will demonstrate the latter approach. We first set a random seed so that the results obtained will be reproducible.\n\nset.seed(1)\ntrain <- sample(1:nrow (x), nrow(x)/2)\ntest <- (-train )\ny.test <- y[test]\n\nNext we fit a ridge regression model on the training set, and evaluate its MSE on the test set, using \\(\\lambda = 4\\). Note the use of the predict() function again. This time we get predictions for a test set, by replacing type=\"coefficients\" with the newx argument.\n\nridge.mod <- glmnet(x[train, ], y[train], alpha = 0, lambda = grid , thresh = 1e-12)\nridge.pred <- predict(ridge.mod, s = 4, newx = x[ test, ])\nmean((ridge.pred - y.test)^2)\n\n[1] 142199.2\n\n\n\n\nExplore model results space\nThe test MSE is 142,199. Note that if we had instead simply fit a model with just an intercept, we would have predicted each test observation using the mean of the training observations. In that case, we could compute the test set MSE like this:\n\nmean((mean(y[train ]) - y.test)^2)\n\n[1] 224669.9\n\n\nWe could also get the same result by fitting a ridge regression model with a very large value of \\(\\lambda\\). Note that 1e10 means \\(10^10\\).\n\nridge.pred <- predict(ridge.mod, s = 1e10, newx = x[test, ])\nmean((ridge.pred - y.test )^2)\n\n[1] 224669.8\n\n\nSo fitting a ridge regression model with \\(\\lambda = 4\\) leads to a much lower test MSE than fitting a model with just an intercept. We now check whether there is any benefit to performing ridge regression with \\(\\lambda = 4\\) instead of just performing least squares regression. Recall that least squares is simply ridge regression with \\(\\lambda = 0\\)\nIn order for glmnet() to yield the exact least squares coeﬃcients when λ = 0, we use the argument exact = T when calling the predict() function. Otherwise, the predict() function will interpolate over the grid of \\(\\lambda\\) values used in fitting the glmnet() model, yielding approximate results. When we use exact = T, there remains a slight discrepancy in the third decimal place between the output of glmnet() when \\(\\lambda = 0\\) and the output of lm(); this is due to numerical approximation on the part of glmnet().\n\nridge.pred <- predict(ridge.mod, s = 0, \n                      newx = x[test, ], exact = T, \n                      x = x[train , ], y = y[ train ])\nmean((ridge.pred - y.test )^2)\n\n[1] 168588.6\n\nlm(y ~ x, subset = train )\n\n\nCall:\nlm(formula = y ~ x, subset = train)\n\nCoefficients:\n(Intercept)       xAtBat        xHits       xHmRun        xRuns         xRBI  \n   274.0145      -0.3521      -1.6377       5.8145       1.5424       1.1243  \n     xWalks       xYears      xCAtBat       xCHits      xCHmRun       xCRuns  \n     3.7287     -16.3773      -0.6412       3.1632       3.4008      -0.9739  \n      xCRBI      xCWalks     xLeagueN   xDivisionW     xPutOuts     xAssists  \n    -0.6005       0.3379     119.1486    -144.0831       0.1976       0.6804  \n    xErrors  xNewLeagueN  \n    -4.7128     -71.0951  \n\npredict(ridge.mod, s = 0, exact = T, type = \"coefficients\", \n        x = x[train, ], y = y[train])[1:20 , ]\n\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 274.0200994   -0.3521900   -1.6371383    5.8146692    1.5423361    1.1241837 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n   3.7288406  -16.3795195   -0.6411235    3.1629444    3.4005281   -0.9739405 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  -0.6003976    0.3378422  119.1434637 -144.0853061    0.1976300    0.6804200 \n      Errors   NewLeagueN \n  -4.7127879  -71.0898914 \n\n\n\n\ncv.glmnet()\nIn general, if we want to fit a (unpenalized) least squares model, then we should use the lm() function, since that function provides more useful outputs, such as standard errors and p-values for the coefficients.\nIn general, instead of arbitrarily choosing \\(\\lambda = 4\\), it would be better to use cross-validation to choose the tuning parameter \\(\\lambda\\). We can do this using the built-in cross-validation function, cv.glmnet(). By default, the function performs ten-fold cross-validation, though this can be changed using the argument nfolds. Note that we set a random seed first so our results will be reproducible, since the choice of the cross-validation folds is random.\n\nset.seed(1)\ncv.out <- cv.glmnet(x[train, ], y[train], alpha = 0)\npar(mfrow=c(1,1))\nplot(cv.out )\n\n\n\nbestlam <- cv.out$lambda.min\nbestlam\n\n[1] 326.0828\n\n\nTherefore, we see that the value of \\(\\lambda\\) that results in the smallest cross- validation error is 326 (log(326) = ~5.8 on the graph). What is the test MSE associated with this value of \\(\\lambda\\)?\n\nridge.pred <- predict(ridge.mod, s = bestlam, newx = x[test, ])\nmean((ridge.pred - y.test)^2)\n\n[1] 139856.6\n\n\nThis represents a further improvement over the test MSE that we got using \\(\\lambda = 4\\). Finally, we refit our ridge regression model on the full data set, using the value of \\(\\lambda\\) chosen by cross-validation, and examine the coeﬃcient estimates.\n\nout <- glmnet(x, y, alpha = 0)\npredict(out, type = \"coefficients\", s = bestlam)[1:20, ]\n\n (Intercept)        AtBat         Hits        HmRun         Runs          RBI \n 15.44383120   0.07715547   0.85911582   0.60103106   1.06369007   0.87936105 \n       Walks        Years       CAtBat        CHits       CHmRun        CRuns \n  1.62444617   1.35254778   0.01134999   0.05746654   0.40680157   0.11456224 \n        CRBI       CWalks      LeagueN    DivisionW      PutOuts      Assists \n  0.12116504   0.05299202  22.09143197 -79.04032656   0.16619903   0.02941950 \n      Errors   NewLeagueN \n -1.36092945   9.12487765 \n\n\nAs expected, none of the coeﬃcients are zero—ridge regression does not perform variable selection!"
  },
  {
    "objectID": "lab06-mod-selection.html#the-lasso",
    "href": "lab06-mod-selection.html#the-lasso",
    "title": "Lab 06 Model selection",
    "section": "5 The lasso",
    "text": "5 The lasso\nWe saw that ridge regression with a wise choice of \\(\\lambda\\) can outperform least squares as well as the null model on the Hitters data set. We now ask whether the lasso can yield either a more accurate or a more interpretable model than ridge regression. In order to fit a lasso model, we once again use the glmnet() function; however, this time we use the argument alpha=1. Other than that change, we proceed just as we did in fitting a ridge model.\n\nlasso.mod <- glmnet(x[train, ], y[train ], alpha = 1, lambda = grid )\nplot(lasso.mod )\n\n\n\n\nWe can see from the coefficient plot that depending on the choice of tuning parameter, some of the coefficients will be exactly equal to zero. We now perform cross-validation and compute the associated test error.\n\nset.seed(1)\ncv.out <- cv.glmnet(x[train , ], y[train ], alpha = 1)\nplot(cv.out )\n\n\n\nbestlam <- cv.out$lambda.min\nlasso.pred <- predict(lasso.mod , s = bestlam , newx = x[test, ])\nmean((lasso.pred - y.test)^2)\n\n[1] 143673.6\n\n\nThis is substantially lower than the test set MSE of the null model and of least squares, and very similar to the test MSE of ridge regression with \\(\\lambda\\) chosen by cross-validation.\nHowever, the lasso has a substantial advantage over ridge regression in that the resulting coefficient estimates are sparse. Here we see that 8 of the 19 coeﬃcient estimates are exactly zero. So the lasso model with \\(\\lambda\\) chosen by cross-validation contains only eleven variables. This results in a model that tends to be both easier to compute, and easier to interpret.\n\nout <- glmnet (x, y, alpha = 1, lambda = grid )\nlasso.coef <- predict(out, type = \"coefficients\", s = bestlam )[1:20, ]\nlasso.coef\n\n  (Intercept)         AtBat          Hits         HmRun          Runs \n   1.27479059   -0.05497143    2.18034583    0.00000000    0.00000000 \n          RBI         Walks         Years        CAtBat         CHits \n   0.00000000    2.29192406   -0.33806109    0.00000000    0.00000000 \n       CHmRun         CRuns          CRBI        CWalks       LeagueN \n   0.02825013    0.21628385    0.41712537    0.00000000   20.28615023 \n    DivisionW       PutOuts       Assists        Errors    NewLeagueN \n-116.16755870    0.23752385    0.00000000   -0.85629148    0.00000000"
  },
  {
    "objectID": "lab06-mod-selection.html#pcr",
    "href": "lab06-mod-selection.html#pcr",
    "title": "Lab 06 Model selection",
    "section": "6 PCR",
    "text": "6 PCR\n\nPrincipal Components Regression\nPrincipal components regression (PCR) can be performed using the pcr() function, which is part of the {pls} library. We now apply PCR to the Hitters data, in order to predict Salary. Again, we ensure that the missing values have been removed from the data.\n\nlibrary(pls) \n\nWarning: package 'pls' was built under R version 4.2.2\n\n\n\nAttaching package: 'pls'\n\n\nThe following object is masked from 'package:stats':\n\n    loadings\n\nset.seed(2)\npcr.fit <- pcr(Salary ~ ., data = Hitters, scale = TRUE, validation = \"CV\")\n\nThe syntax for the pcr() function is similar to that for lm(), with a few additional options. Setting scale = TRUE has the effect of standardizing each predictor, prior to generating the principal components, so that the scale on which each variable is measured will not have an eﬀect. Setting validation = \"CV\" causes pcr() to compute the ten-fold cross-validation error for each possible value of M, the number of principal components used. The resulting fit can be examined using summary().\n\nsummary(pcr.fit)\n\nData:   X dimension: 263 19 \n    Y dimension: 263 1\nFit method: svdpc\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV             452    351.9    353.2    355.0    352.8    348.4    343.6\nadjCV          452    351.6    352.7    354.4    352.1    347.6    342.7\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       345.5    347.7    349.6     351.4     352.1     353.5     358.2\nadjCV    344.7    346.7    348.5     350.1     350.7     352.0     356.5\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        349.7     349.4     339.9     341.6     339.2     339.6\nadjCV     348.0     347.7     338.2     339.7     337.2     337.6\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         38.31    60.16    70.84    79.03    84.29    88.63    92.26    94.96\nSalary    40.63    41.58    42.17    43.22    44.90    46.48    46.69    46.75\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         96.28     97.26     97.98     98.65     99.15     99.47     99.75\nSalary    46.86     47.76     47.82     47.85     48.10     50.40     50.55\n        16 comps  17 comps  18 comps  19 comps\nX          99.89     99.97     99.99    100.00\nSalary     53.01     53.85     54.61     54.61\n\n\nThe CV score is provided for each possible number of components, ranging from M = 0 onwards. Note that pcr() reports the root mean squared error ; in order to obtain the usual MSE, we must square this quantity. For instance, a root mean squared error of 352.8 corresponds to an MSE of 352.82 = 124,468.\nOne can also plot the cross-validation scores using the validationplot() function. Using val.type = \"MSEP\" will cause the cross-validation MSE to be plotted.\n\nvalidationplot(pcr.fit, val.type = \"MSEP\")\n\n\n\n\nWe see that the smallest cross-validation error occurs when M = 18 components are used. This is barely fewer than M = 19, which amounts to simply performing least squares, because when all of the components are used in PCR no dimension reduction occurs. However, from the plot we also see that the cross-validation error is roughly the same when only one component is included in the model. This suggests that a model that uses just a small number of components might suﬃce.\nThe summary() function also provides the percentage of variance explained in the predictors and in the response using diﬀerent numbers of components. Briefly, we can think of this as the amount of information about the predictors or the response that is captured using M principal components. For example, setting M = 1 only captures 38.31% of all the variance, or information, in the predictors. In contrast, using M = 5 increases the value to 84.29%. If we were to use all M = p = 19 components, this would increase to 100%.\nWe now perform PCR on the training data and evaluate its test set performance.\n\nset.seed(1)\npcr.fit <- pcr(Salary ~ ., data = Hitters, subset = train, \n               scale = TRUE, validation = \"CV\")\nvalidationplot(pcr.fit, val.type = \"MSEP\")\n\n\n\n\nNow we find that the lowest cross-validation error occurs when M = 5 components are used. We compute the test MSE as follows.\n\npcr.pred <- predict(pcr.fit, x[test, ], ncomp = 5)\nmean((pcr.pred - y.test )^2)\n\n[1] 142811.8\n\n\nThis test set MSE is competitive with the results obtained using ridge regression and the lasso. However, as a result of the way PCR is implemented, the final model is more difficult to interpret because it does not perform any kind of variable selection or even directly produce coeﬃcient estimates.\nFinally, we fit PCR on the full data set, using M = 5, the number of components identified by cross-validation.\n\npcr.fit <- pcr(y ~ x, scale = TRUE, ncomp = 5)\nsummary(pcr.fit)\n\nData:   X dimension: 263 19 \n    Y dimension: 263 1\nFit method: svdpc\nNumber of components considered: 5\nTRAINING: % variance explained\n   1 comps  2 comps  3 comps  4 comps  5 comps\nX    38.31    60.16    70.84    79.03    84.29\ny    40.63    41.58    42.17    43.22    44.90"
  },
  {
    "objectID": "lab06-mod-selection.html#pls",
    "href": "lab06-mod-selection.html#pls",
    "title": "Lab 06 Model selection",
    "section": "7 PLS",
    "text": "7 PLS\n\nPartial Least Squares\nWe implement partial least squares (PLS) using the plsr() function, also in the {pls} library. The syntax is just like that of the pcr() function.\n\n\nplsr()\n\nset.seed(1)\npls.fit <- plsr(Salary ~ ., data = Hitters, subset = train, \n                scale = TRUE , validation = \"CV\")\nsummary(pls.fit)\n\nData:   X dimension: 131 19 \n    Y dimension: 131 1\nFit method: kernelpls\nNumber of components considered: 19\n\nVALIDATION: RMSEP\nCross-validated using 10 random segments.\n       (Intercept)  1 comps  2 comps  3 comps  4 comps  5 comps  6 comps\nCV           428.3    325.5    329.9    328.8    339.0    338.9    340.1\nadjCV        428.3    325.0    328.2    327.2    336.6    336.1    336.6\n       7 comps  8 comps  9 comps  10 comps  11 comps  12 comps  13 comps\nCV       339.0    347.1    346.4     343.4     341.5     345.4     356.4\nadjCV    336.2    343.4    342.8     340.2     338.3     341.8     351.1\n       14 comps  15 comps  16 comps  17 comps  18 comps  19 comps\nCV        348.4     349.1     350.0     344.2     344.5     345.0\nadjCV     344.2     345.0     345.9     340.4     340.6     341.1\n\nTRAINING: % variance explained\n        1 comps  2 comps  3 comps  4 comps  5 comps  6 comps  7 comps  8 comps\nX         39.13    48.80    60.09    75.07    78.58    81.12    88.21    90.71\nSalary    46.36    50.72    52.23    53.03    54.07    54.77    55.05    55.66\n        9 comps  10 comps  11 comps  12 comps  13 comps  14 comps  15 comps\nX         93.17     96.05     97.08     97.61     97.97     98.70     99.12\nSalary    55.95     56.12     56.47     56.68     57.37     57.76     58.08\n        16 comps  17 comps  18 comps  19 comps\nX          99.61     99.70     99.95    100.00\nSalary     58.17     58.49     58.56     58.62\n\nvalidationplot(pls.fit, val.type = \"MSEP\")\n\n\n\n\nThe lowest cross-validation error occurs when only M = 1 partial least squares directions are used. We now evaluate the corresponding test set MSE.\n\npls.pred <- predict(pls.fit, x[test, ], ncomp = 1)\nmean((pls.pred - y.test)^2)\n\n[1] 151995.3\n\n\nThe test MSE is comparable to, but slightly higher than, the test MSE obtained using ridge regression, the lasso, and PCR.\nFinally, we perform PLS using the full data set, using M = 1, the number of components identified by cross-validation.\n\npls.fit <- plsr(Salary ~ ., data = Hitters, scale = TRUE, ncomp = 1)\nsummary (pls.fit)\n\nData:   X dimension: 263 19 \n    Y dimension: 263 1\nFit method: kernelpls\nNumber of components considered: 1\nTRAINING: % variance explained\n        1 comps\nX         38.08\nSalary    43.05\n\n\nNotice that the percentage of variance in Salary that the one-component PLS fit explains, 43.05%, is almost as much as that explained using the final five-component model PCR fit, 44.90%. This is because PCR only attempts to maximize the amount of variance explained in the predictors, while PLS searches for directions that explain variance in both the predictors and the response."
  },
  {
    "objectID": "lab06-mod-selection.html#exercises",
    "href": "lab06-mod-selection.html#exercises",
    "title": "Lab 06 Model selection",
    "section": "8 Exercises",
    "text": "8 Exercises\n\nExercise 1\nFor the next few questions, we will generate simulated data, and will then use this data to perform best subset selection.\n\n1.1\nUse the rnorm() function to generate a predictor X of length n = 100, as well as a noise vector \\(\\epsilon\\) of length n = 100.\n\n\n1.2\nGenerate a response vector Y of length n = 100 according to the model\n\\(Y=\\beta_0 + \\beta_1 X + \\beta_2 X^2 + \\beta_3 X^3 + \\epsilon\\)\nwhere \\(Y=\\beta_0\\), \\(\\beta_1\\), \\(\\beta_2\\), and \\(\\beta_3\\) are constants of your choice\n\n\n1.3\nUse the regsubsets() function to perform best subset selection in order to choose the best model containing the predictors \\(X\\), \\(X^2\\),. .., \\(X^{10}\\). What is the best model obtained according to \\(C_p\\), BIC, and adjusted \\(R^2\\)? Show some plots to provide evidence for your answer, and report the coeﬃcients of the best model obtained. Note you will need to use the data.frame() function to create a single data set containing both X and Y.\n\n\n1.4\nRepeat 1.3, using forward stepwise selection and also using backwards stepwise selection. How does your answer compare to the results in 1.3?\n\n\n1.5\nNow fit a lasso model to the simulated data, again using \\(X\\), \\(X^2\\),. .., \\(X^{10}\\) as predictors. Use cross-validation to select the optimal value of \\(\\lambda\\). Create plots of the cross-validation error as a function of \\(\\lambda\\). Report the resulting coefficient estimates, and discuss the results obtained.\n\n\n1.6\nNow generate a response vector \\(Y\\) according to the model\n\\(Y = \\beta_0 + \\beta_7X^7 + \\epsilon\\),\nand perform best subset selection and the lasso. Discuss the results obtained."
  },
  {
    "objectID": "lab06-mod-selection.html#resources",
    "href": "lab06-mod-selection.html#resources",
    "title": "Lab 06 Model selection",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab06-mod-selection.html#harper-adams-data-science",
    "href": "lab06-mod-selection.html#harper-adams-data-science",
    "title": "Lab 06 Model selection",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab07-non-linear.html",
    "href": "lab07-non-linear.html",
    "title": "Lab 07 Non-linear models",
    "section": "",
    "text": "In this lab, we will analyze the Wage data set in the {ISLR2} package, in order to illustrate non-linear fitting procedures in R.\n\nlibrary(ISLR2)\nattach(Wage) \n\n\n\nWe now examine how a non-linear model can be produced. We first fit the model using the following command\n\nfit <- lm(wage ~ poly(age, 4), data = Wage )\ncoef(summary(fit))\n\n                Estimate Std. Error    t value     Pr(>|t|)\n(Intercept)    111.70361  0.7287409 153.283015 0.000000e+00\npoly(age, 4)1  447.06785 39.9147851  11.200558 1.484604e-28\npoly(age, 4)2 -478.31581 39.9147851 -11.983424 2.355831e-32\npoly(age, 4)3  125.52169 39.9147851   3.144742 1.678622e-03\npoly(age, 4)4  -77.91118 39.9147851  -1.951938 5.103865e-02\n\n\nThis syntax fits a linear model, using the lm() function, in order to predict wage using a fourth-degree polynomial in age: poly(age, 4). The poly() command allows us to avoid having to write out a long formula with powers of age. The function returns a matrix whose columns are a basis of orthogonal polynomials, which essentially means that each column is a linear combination of the variables age, age^2, age^3 and age^4.\nHowever, we can also use poly() to obtain age, age^2, age^3 and age^4 directly, if we prefer. We can do this by using the raw = TRUE argument to the poly() function. Later we see that while this does not affect the model in a meaningful way, it affects the coefficient estimates, but it does not affect the fitted values obtained.\n\nfit2 <- lm(wage ~ poly (age, 4, raw = T), data = Wage)\ncoef(summary(fit2))\n\n                            Estimate   Std. Error   t value     Pr(>|t|)\n(Intercept)            -1.841542e+02 6.004038e+01 -3.067172 0.0021802539\npoly(age, 4, raw = T)1  2.124552e+01 5.886748e+00  3.609042 0.0003123618\npoly(age, 4, raw = T)2 -5.638593e-01 2.061083e-01 -2.735743 0.0062606446\npoly(age, 4, raw = T)3  6.810688e-03 3.065931e-03  2.221409 0.0263977518\npoly(age, 4, raw = T)4 -3.203830e-05 1.641359e-05 -1.951938 0.0510386498\n\n\nThere are several other equivalent ways of fitting this model, which showcase the flexibility of the formula language in R. For example\n\n\n\n\nfit2a <- lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage )\ncoef(fit2a)\n\n  (Intercept)           age      I(age^2)      I(age^3)      I(age^4) \n-1.841542e+02  2.124552e+01 -5.638593e-01  6.810688e-03 -3.203830e-05 \n\n\nThis simply creates the polynomial basis functions on the fly, taking care to protect terms like age^2 via the wrapper function I() (remember the ^ symbol has a special meaning in formulas).\n\n\n\n\nfit2b <- lm(wage ~ cbind(age, age^2 , age^3 , age^4), data = Wage )\n\nThis does the same more compactly, using the cbind() function for building a matrix from a collection of vectors; any function call such as cbind() inside a formula also serves as a wrapper.\nWe now create a grid of values for age at which we want predictions, and then call the generic predict() function, specifying that we want standard errors as well.\n\nattach(Wage)\n\nThe following objects are masked from Wage (pos = 3):\n\n    age, education, health, health_ins, jobclass, logwage, maritl,\n    race, region, wage, year\n\nagelims <- range(age) \nage.grid <- seq(from = agelims[1] , to = agelims[2])\npreds <- predict(fit, newdata = list(age = age.grid ), se = TRUE)\n\n# make confidence intervals\nse.bands <- cbind (preds$fit + 2 * preds$se.fit , preds$fit - 2 * preds$se.fit)\n\nFinally, we plot the data and add the fit from the degree-4 polynomial.\n\npar(mfrow = c(1, 1) , mar = c(4.5, 4.5, 1, 1),\n    oma = c(0, 0, 4, 0))\n\n# we'll make the right hand plot below...\nplot(age, wage, xlim = agelims, cex = .5, col = \"darkgrey\")\n\ntitle(\"Degree-4 Polynomial\", outer = T)\nlines(age.grid, preds$fit, lwd = 2, col = \"blue\")\nmatlines(age.grid, se.bands, lwd = 1, col = \"blue\", lty = 3)\n\n\n\n\nHere the mar and oma arguments to par() allow us to control the margins of the plot, and the title() function creates a figure title that spans both subplots. We mentioned earlier that whether or not an orthogonal set of basis functions is produced in the poly() function will not aﬀect the model obtained in a meaningful way. What do we mean by this? The fitted values obtained in either case are identical:\n\npreds2 <- predict(fit2, newdata = list(age = age.grid ), se = TRUE )\nmax( abs(preds$fit - preds2$fit))\n\n[1] 7.81597e-11\n\n\n\n\n\nIn performing a polynomial regression we must decide on the degree of the polynomial to use. One way to do this is by using hypothesis tests. We now fit models ranging from linear to a degree-5 polynomial and seek to determine the simplest model which is sufficient to explain the relationship between wage and age. We use the anova() function, which performs an analysis of variance (ANOVA, using an F-test) in order to test the null hypothesis that a model M1 is suﬃcient to explain the data against the alternative hypothesis that a more complex model M2 is required. In order to use the anova() function, M1 and M2 must be nested models: the predictors in M1 must be a subset of the predictors in M2. In this case, we fit five different models and sequentially compare the simpler model to the more complex model.\n\nfit.1   <-  lm(wage ~   age, data   = Wage )    \nfit.2   <-  lm(wage ~   poly(age,   2), data    =   Wage )\nfit.3   <-  lm(wage ~   poly(age, 3),   data    =   Wage )\nfit.4   <-  lm(wage ~   poly(age, 4),   data    =   Wage )\nfit.5   <-  lm(wage ~   poly(age,   5), data    =   Wage )\n\n# Pr - p-val are mopdels different?\n# RSS lower unexplained error is better\nanova(fit.1, fit.2, fit.3, fit.4, fit.5)\n\nAnalysis of Variance Table\n\nModel 1: wage ~ age\nModel 2: wage ~ poly(age, 2)\nModel 3: wage ~ poly(age, 3)\nModel 4: wage ~ poly(age, 4)\nModel 5: wage ~ poly(age, 5)\n  Res.Df     RSS Df Sum of Sq        F    Pr(>F)    \n1   2998 5022216                                    \n2   2997 4793430  1    228786 143.5931 < 2.2e-16 ***\n3   2996 4777674  1     15756   9.8888  0.001679 ** \n4   2995 4771604  1      6070   3.8098  0.051046 .  \n5   2994 4770322  1      1283   0.8050  0.369682    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe p-value comparing the linear Model 1 to the quadratic Model 2 is essentially zero (<10−15), indicating that a linear fit is not suﬃcient. Similarly the p-value comparing the quadratic Model 2 to the cubic Model 3 is very low (0.0017), so the quadratic fit is also insufficient. The p-value comparing the cubic and degree-4 polynomials, Model 3 and Model 4, is approximately 5% while the degree-5 polynomial Model 5 seems unnecessary because its p-value is 0.37. Hence, either a cubic or a quartic polynomial appear to provide a reasonable fit to the data, but lower- or higher-order models are not justified.\n\n\n\nIn this case, instead of using the anova() function, we could have obtained these p-values more succinctly by exploiting the fact that poly() creates orthogonal polynomials.\n\ncoef(summary(fit.5))\n\n                Estimate Std. Error     t value     Pr(>|t|)\n(Intercept)    111.70361  0.7287647 153.2780243 0.000000e+00\npoly(age, 5)1  447.06785 39.9160847  11.2001930 1.491111e-28\npoly(age, 5)2 -478.31581 39.9160847 -11.9830341 2.367734e-32\npoly(age, 5)3  125.52169 39.9160847   3.1446392 1.679213e-03\npoly(age, 5)4  -77.91118 39.9160847  -1.9518743 5.104623e-02\npoly(age, 5)5  -35.81289 39.9160847  -0.8972045 3.696820e-01\n\n\nNotice that the p-values are the same, and in fact the square of the t-statistics are equal to the F-statistics from the anova() function; for example:\n\n(-11.983)^2\n\n[1] 143.5923\n\n\nHowever, the ANOVA method works whether or not we used orthogonal polynomials; it also works when we have other terms in the model as well. For example, we can use anova() to compare these three models:\n\nfit.1 <- lm(wage ~ education + age , data = Wage )\nfit.2 <- lm(wage ~ education + poly(age, 2), data = Wage )\nfit.3 <- lm(wage ~ education + poly(age, 3), data = Wage )\nanova(fit.1 , fit.2 , fit.3)\n\nAnalysis of Variance Table\n\nModel 1: wage ~ education + age\nModel 2: wage ~ education + poly(age, 2)\nModel 3: wage ~ education + poly(age, 3)\n  Res.Df     RSS Df Sum of Sq        F Pr(>F)    \n1   2994 3867992                                 \n2   2993 3725395  1    142597 114.6969 <2e-16 ***\n3   2992 3719809  1      5587   4.4936 0.0341 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nAs an alternative to using hypothesis tests and ANOVA, we could choose the polynomial degree using cross-validation.\n\n\n\nNext we consider the task of predicting whether an individual earns more than $250,000 per year. We proceed much as before, except that first we create the appropriate response vector, and then apply the glm() function using family = \"binomial\" in order to fit a polynomial logistic regression model.\n\nfit <- glm(I(wage > 250) ~ poly(age, 4) , data = Wage , family = binomial )\n\nNote that we again use the wrapper I() to create this binary response variable on the fly. The expression wage > 250 evaluates to a logical variable containing TRUEs and FALSEs, which glm() coerces to binary by setting the TRUEs to 1 and the FALSEs to 0.\n\n\n\nOnce again, we make predictions using the predict() function.\n\npreds <- predict(fit, newdata = list(age = age.grid ), se = T)\n\nHowever, calculating the confidence intervals is slightly more involved than in the linear regression case. The default prediction type for a glm() model is type = \"link\", which is what we use here. This means we get predictions for the logit, or log-odds: that is, we have fit a model of the form:\n\\(log\\frac{Pr(Y = 1|X) }{1 − Pr(Y = 1|X)} = X\\beta\\)\nand the predictions given are of the form \\(X\\hat\\beta\\). The standard errors given are also for \\(X\\hat\\beta\\). In order to obtain confidence intervals for \\(Pr(Y = 1 X)\\), we use the transformation\n\\(Pr(Y = 1|X)=\\frac{exp(X\\beta)}{1 + exp(X\\beta)}\\)\n\npfit <- exp (preds $ fit ) / (1 + exp (preds $ fit ))\nse.bands.logit <- cbind(preds$fit + 2 * preds$se.fit, preds$fit - 2 * preds$se.fit)\nse.bands <- exp(se.bands.logit) / (1 + exp(se.bands.logit))\n\nNote that we could have directly computed the probabilities by selecting the type = \"response\" option in the predict() function.\n\npreds <- predict(fit, newdata = list(age = age.grid ), type = \"response\", se = T)\n\nHowever, the corresponding confidence intervals would not have been sensible because we would end up with negative probabilities!\n\n\n\n\nplot(age , I(wage > 250), xlim = agelims, type = \"n\", ylim = c(0, .2) )\npoints(jitter (age), I((wage > 250) / 5), cex = .5, pch = \"|\", col = \"darkgrey \")\nlines (age.grid, pfit, lwd = 2, col = \"blue \")\nmatlines(age.grid, se.bands, lwd = 1 , col = \"blue \", lty = 3)\n\n\n\npar(mfrow=c(1,1))\n\n\n\n\nWe have drawn the age values corresponding to the observations with wage values above 250 as gray marks on the top of the plot, and those with wage values below 250 are shown as gray marks on the bottom of the plot. We used the jitter() function to jitter the age values a bit so that observations with the same age value do not cover each other up. This is often called a rug plot.\n\n\n\nIn order to fit a step function, we use the cut() function.\n\ntable(cut (age, 4))\n\n\n(17.9,33.5]   (33.5,49]   (49,64.5] (64.5,80.1] \n        750        1399         779          72 \n\nfit <- lm(wage ~ cut (age, 4), data = Wage )\ncoef(summary(fit))\n\n                        Estimate Std. Error   t value     Pr(>|t|)\n(Intercept)            94.158392   1.476069 63.789970 0.000000e+00\ncut(age, 4)(33.5,49]   24.053491   1.829431 13.148074 1.982315e-38\ncut(age, 4)(49,64.5]   23.664559   2.067958 11.443444 1.040750e-29\ncut(age, 4)(64.5,80.1]  7.640592   4.987424  1.531972 1.256350e-01\n\n\nHere cut() automatically picked the cutpoints at 33.5, 49, and 64.5 years of age. We could also have specified our own cutpoints directly using the breaks option. The function cut() returns an ordered categorical variable; the lm() function then creates a set of dummy variables for use in the re- gression. The age < 33.5 category is left out, so the intercept coefficient of $94,160 can be interpreted as the average salary for those under 33.5 years of age, and the other coeﬃcients can be interpreted as the average additional salary for those in the other age groups. We can produce predictions and plots just as we did in the case of the polynomial fit.\n\n\n\nIn order to fit regression splines in R, we use the {splines} library. Regression splines can be fit by constructing an appropriate matrix of basis functions. The bs() function generates the entire matrix of basis functions for splines with the specified set of knots. By default, cubic splines are produced. (see ch 7 James et al 2021)\n\n\n\nFitting wage to age using a regression spline is simple:\n\nlibrary(splines) \nfit <- lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage )\npred <- predict(fit , newdata = list(age = age.grid), se = T)\nplot(age, wage, col = \"gray\")\nlines(age.grid, pred$fit , lwd = 2)\nlines(age.grid, pred$fit + 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred$fit - 2 * pred$se, lty = \"dashed\", col = 'blue')\n\n\n\n\n\n\n\nHere we have prespecified knots at ages 25, 40, and 60. This produces a spline with six basis functions. (Recall that a cubic spline with three knots has seven degrees of freedom; these degrees of freedom are used up by an intercept, plus six basis functions.) We could also use the df option to produce a spline with knots at uniform quantiles of the data.\n\ndim(bs(age, knots = c(25 , 40 , 60) ))\n\n[1] 3000    6\n\ndim(bs(age, df = 6))\n\n[1] 3000    6\n\nattr(bs(age, df = 6), \"knots\") \n\n  25%   50%   75% \n33.75 42.00 51.00 \n\n\nIn this case R chooses knots at ages 33.8, 42.0, and 51.0, which correspond to the 25th, 50th, and 75th percentiles of age. The function bs() also has a degree argument, so we can fit splines of any degree, rather than the default degree of 3 (which yields a cubic spline).\n\n\n\nIn order to instead fit a natural spline, we use the ns() function. Here we fit a natural spline with four degrees of freedom.\n\nfit2 <- lm(wage ~ ns(age, df = 4), data = Wage)\npred2 <- predict(fit2, newdata = list(age = age.grid ), se = T)\n\nplot(age, wage, col = \"gray\")\nlines(age.grid, pred$fit , lwd = 2)\nlines(age.grid, pred$fit + 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred$fit - 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred2$fit, col = \"red\", lwd = 2)\n\n\n\n\nAs with the bs() function, we could instead specify the knots directly using the knots option.\n\n\n\nIn order to fit a smoothing spline, we use the smooth.spline() function.\n\nplot(age, wage, xlim = agelims, cex = .5, col = \"darkgrey\")\ntitle(\"Smoothing Spline\")\nfit <- smooth.spline(age, wage, df = 16)\nfit2 <- smooth.spline(age, wage, cv = TRUE )\n\nWarning in smooth.spline(age, wage, cv = TRUE): cross-validation with non-unique\n'x' values seems doubtful\n\nfit2$df\n\n[1] 6.794596\n\nlines(fit, col = \"red\", lwd = 2)\nlines(fit2, col = \"blue\", lwd = 2)\nlegend (\"topright\", \n        legend = c(\"16 DF\", \"6.8 DF\"), \n        col = c(\"red\", \"blue\"), \n        lty = 1 , lwd = 2 , cex = .8)\n\n\n\n\nNotice that in the first call to smooth.spline(), we specified df = 16. The function then determines which value of \\(\\lambda\\) leads to 16 degrees of freedom. In the second call to smooth.spline(), we select the smoothness level by cross-validation; this results in a value of \\(\\lambda\\) that yields 6.8 degrees of freedom.\n\n\n\nIn order to perform local regression, we use the loess() function.\n\nplot(age, wage , xlim = agelims, cex = .5 , col = \"darkgrey\")\ntitle(\"Local Regression\")\nfit <- loess(wage ~ age , span = .2, data = Wage )\nfit2 <- loess (wage ~ age , span = .5, data = Wage )\nfit3 <- loess (wage ~ age , span = .8, data = Wage )\n\nlines(age.grid , predict(fit, data.frame (age = age.grid )),\n      col = \"red\", lwd = 2)\nlines (age.grid , predict(fit2, data.frame (age = age.grid )), \n       col = \"blue\", lwd = 2)\nlines (age.grid , predict(fit3, data.frame (age = age.grid )), \n       col = \"goldenrod\", lwd = 2)\n\nlegend(\"topright\", legend = c(\"Span = 0.2\", \"Span = 0.5\", \"Span = 0.8\"), \n       col = c(\"red\", \"blue\", \"goldenrod\"), lty = 1, lwd = 2, cex = .8)\n\n\n\n\nHere we have performed local linear regression using different spans: that is, each neighborhood consists of 20%, 50% or 80% of the observations. The larger the span, the smoother the fit. The {locfit} library can also be used for fitting local regression models in R."
  },
  {
    "objectID": "lab07-non-linear.html#gams",
    "href": "lab07-non-linear.html#gams",
    "title": "Lab 07 Non-linear models",
    "section": "2 GAMs",
    "text": "2 GAMs\nGAMs are non-linear Generalised Additive Models.\nWe now fit a GAM to predict wage using natural spline functions of year and age, treating education as a qualitative predictor. Since this is just a big linear regression model using an appropriate choice of basis functions, we can simply do this using the lm() function.\n\n# lm() with natural splines for fit\ngam1 <- lm(wage ~ ns(year , 4) + ns(age , 5) + education ,\n           data = Wage)\n\nWe now fit a model using smoothing splines rather than natural splines. In order to fit more general sorts of GAMs, using smoothing splines or other components that cannot be expressed in terms of basis functions and then fit using least squares regression, we will need to use the {gam} library in R.\n\ns() smooooth spline\nThe s() function, which is part of the {gam} library, is used to indicate that we would like to use a smoothing spline. We specify that the function of year should have 4 degrees of freedom, and that the function of age will have 5 degrees of freedom. Since education is qualitative, we leave it as is, and it is converted into four dummy variables. We use the gam() function in order to fit a GAM using these components. All model terms are fit simultaneously, taking each other into account to explain the response.\n\nlibrary (gam) \n\nLoading required package: foreach\n\n\nLoaded gam 1.22\n\ngam.m3 <- gam (wage ~ s(year, 4) + s(age , 5) + education , data = Wage )\n\npar(mfrow = c(1, 3)) \nplot(gam.m3, se = TRUE, col = \"blue\")\n\n\n\n\nThe generic plot() function recognizes that gam.m3 is an object of class Gam, and invokes the appropriateplot.Gam() method. Conveniently, even though gam1 is not of class Gam but rather of class lm, we can still use plot.Gam() on it.\n\n\nplot.GAM()\n\npar(mfrow=c(1,3))\nplot.Gam(gam1, se = TRUE, col = \"red\")\n\n\n\n\nNotice here the use of plot.Gam() rather than the generic plot() function.\nIn these plots, the function of year looks rather linear. We can perform a series of ANOVA tests in order to determine which model is best: a GAM that excludes year (M1), a GAM that uses a linear function of year (M2), or a GAM that uses a spline function of year (M3).\n\ngam.m1 <- gam (wage ~ s(age , 5) + education, data = Wage )\ngam.m2 <- gam (wage ~ year + s(age, 5) + education, data = Wage )\n\nanova (gam.m1, gam.m2, gam.m3, test = \"F\") \n\nAnalysis of Deviance Table\n\nModel 1: wage ~ s(age, 5) + education\nModel 2: wage ~ year + s(age, 5) + education\nModel 3: wage ~ s(year, 4) + s(age, 5) + education\n  Resid. Df Resid. Dev Df Deviance       F    Pr(>F)    \n1      2990    3711731                                  \n2      2989    3693842  1  17889.2 14.4771 0.0001447 ***\n3      2986    3689770  3   4071.1  1.0982 0.3485661    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWe find that there is compelling evidence that a GAM with a linear function of year is better than a GAM that does not include year at all (p-value = 0.00014). However, there is no evidence that a non-linear function of year is needed (p-value = 0.349). In other words, based on the results of this ANOVA, M2 is preferred.\nThe summary() function produces a summary of the gam fit.\n\nsummary(gam.m3)\n\n\nCall: gam(formula = wage ~ s(year, 4) + s(age, 5) + education, data = Wage)\nDeviance Residuals:\n    Min      1Q  Median      3Q     Max \n-119.43  -19.70   -3.33   14.17  213.48 \n\n(Dispersion Parameter for gaussian family taken to be 1235.69)\n\n    Null Deviance: 5222086 on 2999 degrees of freedom\nResidual Deviance: 3689770 on 2986 degrees of freedom\nAIC: 29887.75 \n\nNumber of Local Scoring Iterations: NA \n\nAnova for Parametric Effects\n             Df  Sum Sq Mean Sq F value    Pr(>F)    \ns(year, 4)    1   27162   27162  21.981 2.877e-06 ***\ns(age, 5)     1  195338  195338 158.081 < 2.2e-16 ***\neducation     4 1069726  267432 216.423 < 2.2e-16 ***\nResiduals  2986 3689770    1236                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nAnova for Nonparametric Effects\n            Npar Df Npar F  Pr(F)    \n(Intercept)                          \ns(year, 4)        3  1.086 0.3537    \ns(age, 5)         4 32.380 <2e-16 ***\neducation                            \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe “Anova for Parametric Effects” p-values clearly demonstrate that year, age, and education are all highly statistically significant, even when only assuming a linear relationship. Alternatively, the “Anova for Nonparamet- ric Eﬀects” p-values for year and age correspond to a null hypothesis of a linear relationship versus the alternative of a non-linear relationship. The large p-value for year reinforces our conclusion from the ANOVA test that a linear function is adequate for this term. However, there is very clear evidence that a non-linear term is required for age.\n\n\npredict() GAM\nWe can make predictions using the predict() method for the class Gam. Here we make predictions on the training set.\n\npreds <- predict(gam.m2, newdata = Wage)\n\n\n\nlo()\nWe can also use local regression fits as building blocks in a GAM, using the lo() function.\n\ngam.lo <- gam(\n  wage ~ s(year, df = 4) + lo(age, span = 0.7) + education, data = Wage\n  )\npar(mfrow=c(1,3))\nplot.Gam(gam.lo, se = TRUE, col = \"green\")\n\n\n\n\nHere we have used local regression for the age term, with a span of 0.7. We can also use the lo() function to create interactions before calling the gam() function. For example,\n\ngam.lo.i <- gam(wage ~ lo(year, age, span = 0.5) + education,\n                data = Wage )\n\nfits a two-term model, in which the first term is an interaction between year and age, fit by a local regression surface. We can plot the resulting two-dimensional surface if we first install the {akima} and {interp} packages.\n\nlibrary(akima)\n\nWarning: package 'akima' was built under R version 4.2.2\n\nlibrary(interp)\n\nWarning: package 'interp' was built under R version 4.2.2\n\n\n\nAttaching package: 'interp'\n\n\nThe following objects are masked from 'package:akima':\n\n    aspline, bicubic, bicubic.grid, bilinear, bilinear.grid,\n    franke.data, franke.fn, interp, interp2xyz, interpp\n\npar(mfrow=c(1,2))\nplot(gam.lo.i)\n\n\n\n\nIn order to fit a logistic regression GAM, we once again use the I() function in constructing the binary response variable, and set family=binomial.\n\ngam.lr <- gam(I(wage > 250) ~ year + s(age, df = 5) + education,\n              family = binomial, \n              data = Wage)\n\npar(mfrow = c(1 , 3))\n# ok but tricky to interpret\nplot(gam.lr, se = T, col = \"green\")\n\n\n\n\nIt is easy to see that there are no high earners in the < HS Grad (less than high school, roughly equivalent to school leavers in the UK) category:\n\ntable(education, I(wage>250))\n\n                    \neducation            FALSE TRUE\n  1. < HS Grad         268    0\n  2. HS Grad           966    5\n  3. Some College      643    7\n  4. College Grad      663   22\n  5. Advanced Degree   381   45\n\n\nHence, we fit a logistic regression GAM using all but this category. This provides more sensible results.\n\ngam.lr.s <- gam(I(wage > 250) ~ year + s(age, df = 5) + education, \n                family = binomial, data = Wage,\n                subset = (education != \"1. < HS Grad\"))\npar(mfrow=c(1,3))\nplot(gam.lr.s, se = T, col = \"green\")"
  },
  {
    "objectID": "lab07-non-linear.html#exercises",
    "href": "lab07-non-linear.html#exercises",
    "title": "Lab 07 Non-linear models",
    "section": "3 Exercises",
    "text": "3 Exercises\n\nExercise 1\n\n1.1\nIn this exercise, you will further analyze the Wage data set considered throughout this lab.\nPerform polynomial regression to predict wage using age. Use cross-validation to select the optimal degree d for the polynomial. What degree was chosen, and how does this compare to the results of hypothesis testing using ANOVA? Make a plot of the resulting polynomial fit to the data.\n\n\n1.2\nFit a step function to predict wage using age, and perform crossvalidation to choose the optimal number of cuts. Make a plot of the fit obtained.\n\n\n\nExercise 2\nThe Wage data set contains a number of other features not explored in this chapter, such as marital status (maritl), job class (jobclass), and others. Explore the relationships between some of these other predictors and wage, and use non-linear fitting techniques in order to fit flexible models to the data. Create plots of the results obtained, and write a summary of your findings.\n\n\nExercise 3\nFit some of the non-linear models investigated in this lab to the Auto data set. Is there evidence for non-linear relationships in this data set? Create some informative plots to justify your answer."
  },
  {
    "objectID": "lab07-non-linear.html#resources",
    "href": "lab07-non-linear.html#resources",
    "title": "Lab 07 Non-linear models",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab07-non-linear.html#harper-adams-data-science",
    "href": "lab07-non-linear.html#harper-adams-data-science",
    "title": "Lab 07 Non-linear models",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab08-trees.html",
    "href": "lab08-trees.html",
    "title": "Lab 08 Decision trees",
    "section": "",
    "text": "The {tree} library is used to construct classification and regression trees.\n\n\nWe first use classification trees to analyze the Carseats data set. In these data, Sales is a continuous variable, and so we begin by recoding it as a binary variable. We use the ifelse() function to create a variable, called High, which takes on a value of Yes if the Sales variable exceeds 8, and takes on a value of No otherwise.\n\nlibrary(tree)\nlibrary(ISLR2)\nattach(Carseats)\nHigh <- factor(ifelse(Sales <= 8 , \"No\", \"Yes\")) \n\nFinally, we use the data.frame() function to merge High with the rest of the Carseats data.\n\nCarseats <- data.frame(Carseats, High )\n\nWe now use the tree() function to fit a classification tree in order to predict High using all variables but Sales. The syntax of the tree() function is quite similar to that of the lm() function.\nThe summary() function lists the variables that are used as internal nodes in the tree, the number of terminal nodes, and the (training) error rate.\n\ntree.carseats <- tree(High ~ . -Sales, Carseats)\nsummary(tree.carseats)\n\n\nClassification tree:\ntree(formula = High ~ . - Sales, data = Carseats)\nVariables actually used in tree construction:\n[1] \"ShelveLoc\"   \"Price\"       \"Income\"      \"CompPrice\"   \"Population\" \n[6] \"Advertising\" \"Age\"         \"US\"         \nNumber of terminal nodes:  27 \nResidual mean deviance:  0.4575 = 170.7 / 373 \nMisclassification error rate: 0.09 = 36 / 400 \n\n\nWe see that the training error rate is 9%. For classification trees, the deviance reported in the output of summary() is given by\n\\(-\\underset m \\sum \\underset k \\sum n_{mk} log \\hat p_{mk}\\)\nwhere \\(n_{mk}\\) is the number of observations in the \\(m\\)th terminal node that belong to the \\(k\\)th class. This is closely related to entropy (see James et al. 2021). A small deviance indicates a tree that provides a good fit to the (training) data. The residual mean deviance reported is simply the deviance divided by \\(n − |T_0|\\), which in this case is 400 − 27 = 373.\n\n\n\nOne of the most attractive properties of trees is that they can be graphically displayed. We use the plot() function to display the tree struc- ture, and the text() function to display the node labels. The argument pretty = 0 instructs R to include the category names for any qualitative predictors, rather than simply displaying a letter for each category.\n\npar(mfrow=c(1,1))\nplot(tree.carseats)\ntext(tree.carseats, pretty = 0, cex = .6)\n\n\n\n\nThe most important indicator of Sales appears to be shelving location, since the first branch differentiates Good locations from Bad and Medium locations.\nIf we just type the name of the tree object, R prints output corresponding to each branch of the tree. R displays the split criterion (e.g. Price < 92.5), the number of observations in that branch, the deviance, the overall prediction for the branch (Yes or No), and the fraction of observations in that branch that take on values of Yes and No. Branches that lead to terminal nodes are indicated using asterisks.\n\ntree.carseats\n\nnode), split, n, deviance, yval, (yprob)\n      * denotes terminal node\n\n  1) root 400 541.500 No ( 0.59000 0.41000 )  \n    2) ShelveLoc: Bad,Medium 315 390.600 No ( 0.68889 0.31111 )  \n      4) Price < 92.5 46  56.530 Yes ( 0.30435 0.69565 )  \n        8) Income < 57 10  12.220 No ( 0.70000 0.30000 )  \n         16) CompPrice < 110.5 5   0.000 No ( 1.00000 0.00000 ) *\n         17) CompPrice > 110.5 5   6.730 Yes ( 0.40000 0.60000 ) *\n        9) Income > 57 36  35.470 Yes ( 0.19444 0.80556 )  \n         18) Population < 207.5 16  21.170 Yes ( 0.37500 0.62500 ) *\n         19) Population > 207.5 20   7.941 Yes ( 0.05000 0.95000 ) *\n      5) Price > 92.5 269 299.800 No ( 0.75465 0.24535 )  \n       10) Advertising < 13.5 224 213.200 No ( 0.81696 0.18304 )  \n         20) CompPrice < 124.5 96  44.890 No ( 0.93750 0.06250 )  \n           40) Price < 106.5 38  33.150 No ( 0.84211 0.15789 )  \n             80) Population < 177 12  16.300 No ( 0.58333 0.41667 )  \n              160) Income < 60.5 6   0.000 No ( 1.00000 0.00000 ) *\n              161) Income > 60.5 6   5.407 Yes ( 0.16667 0.83333 ) *\n             81) Population > 177 26   8.477 No ( 0.96154 0.03846 ) *\n           41) Price > 106.5 58   0.000 No ( 1.00000 0.00000 ) *\n         21) CompPrice > 124.5 128 150.200 No ( 0.72656 0.27344 )  \n           42) Price < 122.5 51  70.680 Yes ( 0.49020 0.50980 )  \n             84) ShelveLoc: Bad 11   6.702 No ( 0.90909 0.09091 ) *\n             85) ShelveLoc: Medium 40  52.930 Yes ( 0.37500 0.62500 )  \n              170) Price < 109.5 16   7.481 Yes ( 0.06250 0.93750 ) *\n              171) Price > 109.5 24  32.600 No ( 0.58333 0.41667 )  \n                342) Age < 49.5 13  16.050 Yes ( 0.30769 0.69231 ) *\n                343) Age > 49.5 11   6.702 No ( 0.90909 0.09091 ) *\n           43) Price > 122.5 77  55.540 No ( 0.88312 0.11688 )  \n             86) CompPrice < 147.5 58  17.400 No ( 0.96552 0.03448 ) *\n             87) CompPrice > 147.5 19  25.010 No ( 0.63158 0.36842 )  \n              174) Price < 147 12  16.300 Yes ( 0.41667 0.58333 )  \n                348) CompPrice < 152.5 7   5.742 Yes ( 0.14286 0.85714 ) *\n                349) CompPrice > 152.5 5   5.004 No ( 0.80000 0.20000 ) *\n              175) Price > 147 7   0.000 No ( 1.00000 0.00000 ) *\n       11) Advertising > 13.5 45  61.830 Yes ( 0.44444 0.55556 )  \n         22) Age < 54.5 25  25.020 Yes ( 0.20000 0.80000 )  \n           44) CompPrice < 130.5 14  18.250 Yes ( 0.35714 0.64286 )  \n             88) Income < 100 9  12.370 No ( 0.55556 0.44444 ) *\n             89) Income > 100 5   0.000 Yes ( 0.00000 1.00000 ) *\n           45) CompPrice > 130.5 11   0.000 Yes ( 0.00000 1.00000 ) *\n         23) Age > 54.5 20  22.490 No ( 0.75000 0.25000 )  \n           46) CompPrice < 122.5 10   0.000 No ( 1.00000 0.00000 ) *\n           47) CompPrice > 122.5 10  13.860 No ( 0.50000 0.50000 )  \n             94) Price < 125 5   0.000 Yes ( 0.00000 1.00000 ) *\n             95) Price > 125 5   0.000 No ( 1.00000 0.00000 ) *\n    3) ShelveLoc: Good 85  90.330 Yes ( 0.22353 0.77647 )  \n      6) Price < 135 68  49.260 Yes ( 0.11765 0.88235 )  \n       12) US: No 17  22.070 Yes ( 0.35294 0.64706 )  \n         24) Price < 109 8   0.000 Yes ( 0.00000 1.00000 ) *\n         25) Price > 109 9  11.460 No ( 0.66667 0.33333 ) *\n       13) US: Yes 51  16.880 Yes ( 0.03922 0.96078 ) *\n      7) Price > 135 17  22.070 No ( 0.64706 0.35294 )  \n       14) Income < 46 6   0.000 No ( 1.00000 0.00000 ) *\n       15) Income > 46 11  15.160 Yes ( 0.45455 0.54545 ) *\n\n\nIn order to properly evaluate the performance of a classification tree on these data, we must estimate the test error rather than simply computing the training error. We split the observations into a training set and a test set, build the tree using the training set, and evaluate its performance on the test data. The predict() function can be used for this purpose. In the case of a classification tree, the argument type = \"class\" instructs R to return the actual class prediction. This approach leads to correct predictions for around 77% of the locations in the test data set.\n\nset.seed(2)\ntrain <- sample(1:nrow(Carseats), 200)\nCarseats.test <- Carseats[-train, ]\nHigh.test <- High[-train]\ntree.carseats <- tree(High ~ . -Sales, Carseats, subset = train)\ntree.pred <- predict(tree.carseats, Carseats.test, type = \"class\")\n\n# confusion matrix\ntable(tree.pred, High.test)\n\n         High.test\ntree.pred  No Yes\n      No  104  33\n      Yes  13  50\n\n# % correct\n(104 + 50) / 200\n\n[1] 0.77\n\n\n\n\n\n(If you re-run the predict() function then you might get slightly diﬀerent results, due to “ties”: for instance, this can happen when the training observations corresponding to a terminal node are evenly split between Yes and No response values.)\nNext, we consider whether pruning the tree might lead to improved results. The function cv.tree() performs cross-validation in order to determine the optimal level of tree complexity; cost complexity pruning is used in order to select a sequence of trees for consideration. We use the argument FUN = prune.misclass in order to indicate that we want the classification error rate to guide the cross-validation and pruning process, rather than the default for the cv.tree() function, which is deviance. The cv.tree() function reports the number of terminal nodes of each tree con- sidered (size) as well as the corresponding error rate and the value of the cost-complexity parameter used (k, which corresponds to \\(\\alpha\\) in (8.4)).\n\nset.seed(7)\ncv.carseats <- cv.tree(tree.carseats, FUN = prune.misclass )\nnames(cv.carseats )\n\n[1] \"size\"   \"dev\"    \"k\"      \"method\"\n\ncv.carseats\n\n$size\n[1] 21 19 14  9  8  5  3  2  1\n\n$dev\n[1] 75 75 75 74 82 83 83 85 82\n\n$k\n[1] -Inf  0.0  1.0  1.4  2.0  3.0  4.0  9.0 18.0\n\n$method\n[1] \"misclass\"\n\nattr(,\"class\")\n[1] \"prune\"         \"tree.sequence\"\n\n\nDespite its name, dev corresponds to the number of cross-validation errors. The tree with 9 terminal nodes results in only 74 cross-validation errors. We plot the error rate as a function of both size and k.\n\npar(mfrow = c(1, 2))\nplot(cv.carseats$size, cv.carseats$dev, type = \"b\",\n     pch=16, col = 'goldenrod')\nplot(cv.carseats$k, cv.carseats$dev, type = \"b\",\n     pch=16, col = 'goldenrod')\n\n\n\n\nWe now apply the prune.misclass() function in order to prune the tree to obtain the nine-node tree.\n\nprune.carseats <- prune.misclass(tree.carseats, best = 9)\npar(mfrow=c(1,1))\nplot(prune.carseats)\ntext(prune.carseats, pretty = 0)\n\n\n\n\nHow well does this pruned tree perform on the test data set? Once again, we apply the predict() function.\n\ntree.pred <- predict(prune.carseats, Carseats.test, type = \"class\")\ntable(tree.pred, High.test) \n\n         High.test\ntree.pred No Yes\n      No  97  25\n      Yes 20  58\n\n(97 + 58) / 200\n\n[1] 0.775\n\n\nNow 77.5% of the test observations are correctly classified, so not only has the pruning process produced a more interpretable tree, but it has also slightly improved the classification accuracy.\nIf we increase the value of best, we obtain a larger pruned tree with lower classification accuracy:\n\nprune.carseats <- prune.misclass(tree.carseats, best = 14)\nplot(prune.carseats)\ntext(prune.carseats, pretty = 0)\n\n\n\ntree.pred <- predict(prune.carseats, Carseats.test, type = \"class\")\n\ntable(tree.pred, High.test) \n\n         High.test\ntree.pred  No Yes\n      No  102  31\n      Yes  15  52\n\n(102 + 52) / 200\n\n[1] 0.77"
  },
  {
    "objectID": "lab08-trees.html#regression-trees",
    "href": "lab08-trees.html#regression-trees",
    "title": "Lab 08 Decision trees",
    "section": "2 Regression trees",
    "text": "2 Regression trees\nHere we fit a regression tree to the Boston data set. First, we create a training set, and fit the tree to the training data.\n\nset.seed(1)\ntrain <- sample(1:nrow(Boston), nrow(Boston) / 2)\ntree.boston <- tree(medv ~ ., Boston, subset = train )\nsummary(tree.boston ) \n\n\nRegression tree:\ntree(formula = medv ~ ., data = Boston, subset = train)\nVariables actually used in tree construction:\n[1] \"rm\"    \"lstat\" \"crim\"  \"age\"  \nNumber of terminal nodes:  7 \nResidual mean deviance:  10.38 = 2555 / 246 \nDistribution of residuals:\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-10.1800  -1.7770  -0.1775   0.0000   1.9230  16.5800 \n\n\nNotice that the output of summary() indicates that only four of the variables have been used in constructing the tree. In the context of a regression tree, the deviance is simply the sum of squared errors for the tree. We now plot the tree.\n\nplot(tree.boston)\ntext(tree.boston, pretty = 0)\n\n\n\n\nThe variable lstat measures the percentage of individuals with lower socioeconomic status, while the variable rm corresponds to the average number of rooms. The tree indicates that larger values of rm, or lower values of lstat, correspond to more expensive houses. For example, the tree predicts a median house price of $45,400 for homes in census tracts in which rm >= 7.553.\nIt is worth noting that we could have fit a much bigger tree, by pass- ing control = tree.control(nobs = length(train), mindev = 0) into the tree() function.\nNow we use the cv.tree() function to see whether pruning the tree will improve performance.\n\ncv.boston <- cv.tree(tree.boston)\nplot(cv.boston$size, cv.boston$dev, type = \"b\")\n\n\n\n\nIn this case, the most complex tree under consideration is selected by cross-validation. However, if we wish to prune the tree, we could do so as follows, using the prune.tree() function:\n\nprune.boston <- prune.tree(tree.boston, best = 5)\nplot(prune.boston)\ntext(prune.boston, pretty = 0)\n\n\n\n\nIn keeping with the cross-validation results, we use the unpruned tree to make predictions on the test set.\n\nyhat <- predict(tree.boston, newdata = Boston[-train, ])\nboston.test <- Boston[-train, \"medv\"]\nplot(yhat, boston.test )\nabline(0, 1)\n\n\n\nmean((yhat - boston.test )^2)\n\n[1] 35.28688\n\n\nIn other words, the test set MSE associated with the regression tree is 35.29. The square root of the MSE is therefore around 5.941, indicating that this model leads to test predictions that are (on average) within approximately $5,941 of the true median home value for the census tract."
  },
  {
    "objectID": "lab08-trees.html#bagging",
    "href": "lab08-trees.html#bagging",
    "title": "Lab 08 Decision trees",
    "section": "3 Bagging",
    "text": "3 Bagging\nHere we apply bagging and random forests to the Boston data, using the randomForest package in R. The exact results obtained in this section may depend on the version of R and the version of the {randomForest} package installed on your computer. Recall that bagging is simply a special case of a random forest with m = p. Therefore, the randomForest() function can be used to perform both random forests and bagging. We perform bagging as follows:\n\nlibrary(randomForest) \n\nrandomForest 4.7-1.1\n\n\nType rfNews() to see new features/changes/bug fixes.\n\nset.seed(1)\nbag.boston <- randomForest(medv ~ ., data = Boston,\n                           subset = train, mtry = 12, \n                           importance = TRUE)\nbag.boston \n\n\nCall:\n randomForest(formula = medv ~ ., data = Boston, mtry = 12, importance = TRUE,      subset = train) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 12\n\n          Mean of squared residuals: 11.40162\n                    % Var explained: 85.17\n\n\nThe argument mtry = 12 indicates that all 12 predictors should be consid- ered for each split of the tree. In other words, that bagging should be done. How well does this bagged model perform on the test set?\n\nyhat.bag <- predict(bag.boston, newdata = Boston[-train, ])\nplot(yhat.bag, boston.test) \nabline(0, 1)\n\n\n\nmean((yhat.bag - boston.test )^2)\n\n[1] 23.41916\n\n\nThe test set MSE associated with the bagged regression tree is 23.42, about two-thirds of that obtained using an optimally-pruned single tree. We could change the number of trees grown by randomForest() using the ntree argument:\n\nbag.boston <- randomForest(medv ~ ., data = Boston,\n                           subset = train, mtry = 12, ntree = 25)\n\nyhat.bag <- predict(bag.boston, newdata = Boston[-train, ])\nmean((yhat.bag - boston.test )^2)\n\n[1] 25.75055\n\n\nGrowing a random forest proceeds in exactly the same way, except that we use a smaller value of the mtry argument. By default, randomForest() uses \\(p/3\\) variables when building a random forest of regression trees, and \\(\\sqrt p\\) variables when building a random forest of classification trees. Here we use mtry = 6.\n\nimportance()\n\nset.seed(1)\nrf.boston <- randomForest(medv ~ ., data = Boston, subset = train, \n                          mtry = 6, importance = TRUE )\n\nyhat.rf <- predict(rf.boston, newdata = Boston[-train, ])\nmean((yhat.rf - boston.test )^2)\n\n[1] 20.06644\n\n\nThe test set MSE is 20.07; this indicates that random forests yielded an improvement over bagging in this case.\nUsing the importance() function, we can view the importance of each variable.\n\nimportance(rf.boston)\n\n          %IncMSE IncNodePurity\ncrim    19.435587    1070.42307\nzn       3.091630      82.19257\nindus    6.140529     590.09536\nchas     1.370310      36.70356\nnox     13.263466     859.97091\nrm      35.094741    8270.33906\nage     15.144821     634.31220\ndis      9.163776     684.87953\nrad      4.793720      83.18719\ntax      4.410714     292.20949\nptratio  8.612780     902.20190\nlstat   28.725343    5813.04833\n\n\nTwo measures of variable importance are reported. The first is based upon the mean decrease of accuracy in predictions on the out of bag samples when a given variable is permuted. The second is a measure of the total decrease in node impurity that results from splits over that variable, averaged over all trees. In the case of regression trees, the node impurity is measured by the training RSS, and for classification trees by the deviance. Plots of these importance measures can be produced using the varImpPlot() function.\n\n\nvarImpPlot()\nThe results indicate that across all of the trees considered in the random forest, the wealth of the community (lstat) and the house size (rm) are by far the two most important variables.\n\nvarImpPlot(rf.boston)\n\n\n\n\nThe results indicate that across all of the trees considered in the random forest, the wealth of the community (lstat) and the house size (rm) are by far the two most important variables."
  },
  {
    "objectID": "lab08-trees.html#boosting",
    "href": "lab08-trees.html#boosting",
    "title": "Lab 08 Decision trees",
    "section": "4 Boosting",
    "text": "4 Boosting\n\ngbm()\nHere we use the gbm package, and within it the gbm() function, to fit boosted regression trees to the Boston data set. We run gbm() with the option distribution = \"gaussian\" since this is a regression problem; if it were a binary classification problem, we would use distribution = \"bernoulli\". The argument n.trees = 5000 indicates that we want 5000 trees, and the option interaction.depth = 4 limits the depth of each tree.\n\nlibrary(gbm) \n\nLoaded gbm 2.1.8.1\n\nset.seed(1)\nboost.boston <- gbm(medv ~ ., data = Boston[ train, ], \n                    distribution = \"gaussian\", n.trees = 5000,\n                    interaction.depth = 4)\n\nThe summary() function produces a relative influence plot and also outputs the relative influence statistics.\n\nsummary(boost.boston)\n\n\n\n\n            var     rel.inf\nrm           rm 44.48249588\nlstat     lstat 32.70281223\ncrim       crim  4.85109954\ndis         dis  4.48693083\nnox         nox  3.75222394\nage         age  3.19769210\nptratio ptratio  2.81354826\ntax         tax  1.54417603\nindus     indus  1.03384666\nrad         rad  0.87625748\nzn           zn  0.16220479\nchas       chas  0.09671228\n\n\n\n\nPartial dependence\nWe see that lstat and rm are by far the most important variables. We can also produce partial dependence plots for these two variables. These plots illustrate the marginal eﬀect of the selected variables on the response after integrating out the other variables. In this case, as we might expect, median house prices are increasing with rm and decreasing with lstat.\n\nplot(boost.boston, i = \"rm\")\n\n\n\nplot(boost.boston, i = \"lstat\")\n\n\n\n\nWe now use the boosted model to predict medv on the test set:\n\nyhat.boost <- predict(boost.boston,\n                      newdata = Boston[-train, ], \n                      n.trees = 5000)\n\nmean((yhat.boost - boston.test)^2)\n\n[1] 18.39057\n\n\nThe test MSE obtained is 18.39: this is superior to the test MSE of random forests and bagging. If we want to, we can perform boosting with a different value of the shrinkage parameter \\(\\lambda\\). The default value is 0.001, but this is easily modified. Here we take \\(\\lambda = 0.2\\).\n\nboost.boston <- gbm(medv ~ ., data = Boston[train, ],\n                    distribution = \"gaussian\", n.trees = 5000,\n                    interaction.depth = 4, shrinkage = 0.2, \n                    verbose = F)\n\nyhat.boost <- predict(boost.boston,\n                      newdata = Boston[-train, ], \n                      n.trees = 5000)\n\nmean((yhat.boost - boston.test)^2)\n\n[1] 16.54778\n\n\nIn this case, using \\(\\lambda = 0.2\\) leads to a lower test MSE than \\(\\lambda = 0.001\\)."
  },
  {
    "objectID": "lab08-trees.html#bayesian-additive-reg-trees",
    "href": "lab08-trees.html#bayesian-additive-reg-trees",
    "title": "Lab 08 Decision trees",
    "section": "5 Bayesian additive reg trees",
    "text": "5 Bayesian additive reg trees\n\n{BART} and gbart()\nIn this section we use the {BART} package, and within it the gbart() function, to fit a Bayesian additive regression tree model to the Boston housing data set. The gbart() function is designed for quantitative outcome variables. For binary outcomes, lbart() and pbart() are available.\nTo run the gbart() function, we must first create matrices of predictors for the training and test data. We run {BART} with default settings.\n\nlibrary(BART) \n\nWarning: package 'BART' was built under R version 4.2.2\n\n\nLoading required package: nlme\n\n\nLoading required package: nnet\n\n\nLoading required package: survival\n\nx <- Boston[ , 1:12]\ny <- Boston [, \"medv\"]\n\n# train and test partitions\nxtrain <- x[train, ]\nytrain <- y[train]\nxtest <- x[-train, ]\nytest <- y[-train]\n\nset.seed(1)\nbartfit <- gbart(xtrain, ytrain, x.test = xtest )\n\n*****Calling gbart: type=1\n*****Data:\ndata:n,p,np: 253, 12, 253\ny1,yn: 0.213439, -5.486561\nx1,x[n*p]: 0.109590, 20.080000\nxp1,xp[np*p]: 0.027310, 7.880000\n*****Number of Trees: 200\n*****Number of Cut Points: 100 ... 100\n*****burn,nd,thin: 100,1000,1\n*****Prior:beta,alpha,tau,nu,lambda,offset: 2,0.95,0.795495,3,3.71636,21.7866\n*****sigma: 4.367914\n*****w (weights): 1.000000 ... 1.000000\n*****Dirichlet:sparse,theta,omega,a,b,rho,augment: 0,0,1,0.5,1,12,0\n*****printevery: 100\n\nMCMC\ndone 0 (out of 1100)\ndone 100 (out of 1100)\ndone 200 (out of 1100)\ndone 300 (out of 1100)\ndone 400 (out of 1100)\ndone 500 (out of 1100)\ndone 600 (out of 1100)\ndone 700 (out of 1100)\ndone 800 (out of 1100)\ndone 900 (out of 1100)\ndone 1000 (out of 1100)\ntime: 3s\ntrcnt,tecnt: 1000,1000\n\n\n\n# compute the test error\nyhat.bart <- bartfit$yhat.test.mean\nmean((ytest - yhat.bart )^2)\n\n[1] 15.94718\n\n\nOn this data set, the test error of {BART} is lower than the test error of random forests and boosting.\nNow we can check how many times each variable appeared in the collection of trees.\n\nord <- order(bartfit$varcount.mean, decreasing = T)\nbartfit$varcount.mean[ord]\n\n    nox   lstat     tax     rad      rm   indus    chas ptratio     age      zn \n 22.952  21.329  21.250  20.781  19.890  19.825  19.051  18.976  18.274  15.952 \n    dis    crim \n 14.457  11.007"
  },
  {
    "objectID": "lab08-trees.html#exercises",
    "href": "lab08-trees.html#exercises",
    "title": "Lab 08 Decision trees",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nIn this lab, we applied random forests to the Boston data using mtry = 6 and using ntree = 25 and ntree = 500. Create a plot displaying the test error resulting from random forests on this data set for a more comprehensive range of values for mtry and ntree. Describe the results obtained.\n\n\nExercise 2\nIn the lab, a classification tree was applied to the Carseats data set after converting Sales into a qualitative response variable. Now we will seek to predict Sales using regression trees and related approaches, treating the response as a quantitative variable.\n\n2.1\nSplit the data set into a training set and a test set.\n\n\n2.2\nFit a regression tree to the training set. Plot the tree, and interpret the results. What test MSE do you obtain?\n\n\n2.3\nUse cross-validation in order to determine the optimal level of tree complexity. Does pruning the tree improve the test MSE?\n\n\n2.4\nUse the bagging approach in order to analyze this data. What test MSE do you obtain? Use the importance() function to determine which variables are most important.\n\n\n2.5\nUse random forests to analyze this data. What test MSE do you obtain? Use the importance() function to determine which variables are most important. Describe the effect of m, the number of variables considered at each split, on the error rate obtained.\n\n\n2.6\nNow analyze the data using BART, and report your results."
  },
  {
    "objectID": "lab08-trees.html#resources",
    "href": "lab08-trees.html#resources",
    "title": "Lab 08 Decision trees",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab08-trees.html#harper-adams-data-science",
    "href": "lab08-trees.html#harper-adams-data-science",
    "title": "Lab 08 Decision trees",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab09-svm.html",
    "href": "lab09-svm.html",
    "title": "Lab 09 SVM",
    "section": "",
    "text": "We use the {e1071} library in R to demonstrate the support vector classifier and the SVM. Another option is the {LiblineaR} library, which is useful for very large linear problems.\n\n\nThe {e1071} library contains implementations for a number of statistical learning methods. In particular, the svm() function can be used to fit a support vector classifier when the argument kernel = \"linear\" is used. A cost argument allows us to specify the cost of a violation to the margin. When the cost argument is small, then the margins will be wide and many support vectors will be on the margin or will violate the margin. When the cost argument is large, then the margins will be narrow and there will be few support vectors on the margin or violating the margin.\n\n\n\nWe now use the svm() function to fit the support vector classifier for a given value of the cost parameter. Here we demonstrate the use of this function on a two-dimensional example so that we can plot the resulting decision boundary. We begin by generating the observations, which belong to two classes, and checking whether the classes are linearly separable.\n\nset.seed(1)\nx <- matrix(rnorm(20 * 2), ncol = 2)\ny <- c( rep (-1, 10) , rep (1 , 10) )\nx[y == 1, ] <- x[ y == 1, ] + 1\nplot(x, col = (3 - y), pch=16)\n\n\n\n\nThey are not (i.e. you cannot separate the classes by drawing a straight line between them). Next, we fit the support vector classifier. Note that in order for the svm() function to perform classification (as opposed to SVM-based regression), we must encode the response as a factor variable. We now create a data frame with the response coded as a factor.\n\ndat <- data.frame(x = x, y = as.factor(y)) \nlibrary(e1071)\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", \n              cost = 10 , scale = FALSE )\n\nThe argument scale = FALSE tells the svm() function not to scale each feature to have mean zero or standard deviation one; depending on the application, one might prefer to use scale = TRUE.\nWe can now plot the support vector classifier obtained:\n\nplot(svmfit, dat) # first peek, not great\n\n\n\n\nNote that the two arguments to the SVM plot() function are the output of the call to svm(), as well as the data used in the call to svm(). The region of feature space that will be assigned to the 1 class is shown in light yellow, and the region that will be assigned to the +1 class is shown in red. The decision boundary between the two classes is linear (because we used the argument kernel = \"linear\"), though due to the way in which the plotting function is implemented in this library the decision boundary looks somewhat jagged in the plot. (Note that here the second feature is plotted on the x-axis and the first feature is plotted on the y-axis, in contrast to the behavior of the usual plot() function in R.) The support vectors are plotted as crosses and the remaining observations are plotted as circles; we see here that there are seven support vectors. We can determine their identities as follows:\n\nsvmfit$index\n\n[1]  1  2  5  7 14 16 17\n\n\nWe can obtain some basic information about the support vector classifier fit using the summary() command:\n\nsummary(svmfit)\n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 10, scale = FALSE)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  10 \n\nNumber of Support Vectors:  7\n\n ( 4 3 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\n\nThis tells us, for instance, that a linear kernel was used with cost = 10, and that there were seven support vectors, four in one class and three in the other.\nWhat if we instead used a smaller value of the cost parameter?\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\",\n              cost = 0.1 , scale = FALSE )\nplot(svmfit, dat) \n\n\n\nsvmfit$index\n\n [1]  1  2  3  4  5  7  9 10 12 13 14 15 16 17 18 20\n\n\nNow that a smaller value of the cost parameter is being used, we obtain a larger number of support vectors, because the margin is now wider. Unfortunately, the svm() function does not explicitly output the coefficients of the linear decision boundary obtained when the support vector classifier is fit, nor does it output the width of the margin.\n\n\n\nThe {e1071} library includes a built-in function, tune(), to perform cross- validation. By default, tune() performs ten-fold cross-validation on a set of models of interest. In order to use this function, we pass in relevant information about the set of models that are under consideration. The following command indicates that we want to compare SVMs with a linear kernel, using a range of values of the cost parameter.\n\nset.seed(1)\ntune.out <- tune(svm, y ~ ., data = dat , kernel = \"linear\",\n                 ranges = list(cost = c(0.001, 0.01, 0.1,\n                                        1, 5, 10, 100)))\n\nWe can easily access the cross-validation errors for each of these models using the summary() command:\n\nsummary(tune.out)\n\n\nParameter tuning of 'svm':\n\n- sampling method: 10-fold cross validation \n\n- best parameters:\n cost\n  0.1\n\n- best performance: 0.05 \n\n- Detailed performance results:\n   cost error dispersion\n1 1e-03  0.55  0.4377975\n2 1e-02  0.55  0.4377975\n3 1e-01  0.05  0.1581139\n4 1e+00  0.15  0.2415229\n5 5e+00  0.15  0.2415229\n6 1e+01  0.15  0.2415229\n7 1e+02  0.15  0.2415229\n\n\n\n\n\nWe see that cost = 0.1 (1e-01) results in the lowest cross-validation error rate. The tune() function stores the best model obtained, which can be accessed as follows:\n\nbestmod <- tune.out$best.model\nsummary(bestmod) \n\n\nCall:\nbest.tune(method = svm, train.x = y ~ ., data = dat, ranges = list(cost = c(0.001, \n    0.01, 0.1, 1, 5, 10, 100)), kernel = \"linear\")\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  0.1 \n\nNumber of Support Vectors:  16\n\n ( 8 8 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\n\n\n\n\nThe predict() function can be used to predict the class label on a set of test observations, at any given value of the cost parameter. We begin by generating a test data set.\n\nxtest <- matrix(rnorm(20 * 2), ncol = 2)\nytest <- sample(c(-1, 1), 20, rep = TRUE)\nxtest[ ytest == 1, ] <- xtest[ytest == 1, ] + 1\ntestdat <- data.frame(x = xtest, y = as.factor(ytest))\n\nNow we predict the class labels of these test observations. Here we use the best model obtained through cross-validation in order to make predictions.\n\nypred <- predict(bestmod, testdat)\n\n#our own confusion matrix\ntable(predict = ypred, truth = testdat$y)  #not bad\n\n       truth\npredict -1 1\n     -1  9 1\n     1   2 8\n\n\nThus, with this value of cost, 17 of the test observations are correctly classified. What if we had instead used cost = 0.01?\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\",\n              cost = .01, scale = FALSE)\nypred <- predict(svmfit, testdat)\n\ntable(predict = ypred, truth = testdat$y) # not as good\n\n       truth\npredict -1  1\n     -1 11  6\n     1   0  3\n\n\nIn this case three additional observations are misclassified.\n\n\n\nNow consider a situation in which the two classes are linearly separable. Then we can find a separating hyperplane using the svm() function. We first further separate the two classes in our simulated data so that they are linearly separable:\n\nx[y == 1, ] <- x[y == 1, ] + 0.5\nplot (x, col = (y + 5) / 2, pch = 16)\n\n\n\n\nNow the observations are just barely linearly separable. We fit the support vector classifier and plot the resulting hyperplane, using a very large value of cost so that no observations are misclassified.\n\ndat <- data.frame(x = x, y = as.factor(y)) \nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 1e5 )\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 1e+05)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  1e+05 \n\nNumber of Support Vectors:  3\n\n ( 1 2 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\nplot(svmfit, dat) \n\n\n\n\nNo training errors were made and only three support vectors were used. However, we can see from the figure that the margin is very narrow (because the observations that are not support vectors, indicated as circles, are very close to the decision boundary). It seems likely that this model will perform poorly on test data. We now try a smaller value of cost:\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 1)\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 1)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  1 \n\nNumber of Support Vectors:  7\n\n ( 4 3 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\nplot(svmfit, dat) \n\n\n\n\nUsing cost = 1, we misclassify a training observation, but we also obtain a much wider margin and make use of seven support vectors. It seems likely that this model will perform better on test data than the model with cost = 1e5."
  },
  {
    "objectID": "lab09-svm.html#non-linear-svm",
    "href": "lab09-svm.html#non-linear-svm",
    "title": "Lab 09 SVM",
    "section": "2 Non-linear SVM",
    "text": "2 Non-linear SVM\nIn order to fit an SVM using a non-linear kernel, we once again use the svm() function. However, now we use a diﬀerent value of the parameter kernel.\nTo fit an SVM with a polynomial kernel we use kernel = \"polynomial\", and to fit an SVM with a radial kernel we use kernel = \"radial\". In the former case we also use the degree argument to specify a degree for the polynomial kernel (the degree of “bendiness” in the separator), and in the latter case we use gamma to specify a value of \\(\\gamma\\) for the radial basis kernel. For details on these, see James et al. 2021 Ch 9.\nWe first generate some data with a non-linear class boundary, as follows:\n\nset.seed(1)\nx <- matrix(rnorm(200 * 2), ncol = 2)\nx[1:100, ] <- x [1:100, ] + 2\nx[ 101:150 , ] <- x [101:150, ] - 2\ny <- c(rep(1, 150),  rep(2, 50))\ndat <- data.frame(x = x, y = as.factor(y)) \n\n# always plot\nplot (x, col = y, pch = 16)\n\n\n\n\nThe data is randomly split into training and testing groups. We then fit the training data using the svm() function with a radial kernel and \\(\\gamma\\) = 1:\n\ntrain <- sample(200, 100)\nsvmfit <- svm(y ~ ., data = dat[train, ], \n              kernel = \"radial\", gamma = 1 ,cost = 1)\nplot(svmfit, dat[train, ]) # ok!\n\n\n\n\nThe plot shows that the resulting SVM has a decidedly non-linear boundary. The summary() function can be used to obtain some information about the SVM fit:\n\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat[train, ], kernel = \"radial\", gamma = 1, \n    cost = 1)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  radial \n       cost:  1 \n\nNumber of Support Vectors:  31\n\n ( 16 15 )\n\n\nNumber of Classes:  2 \n\nLevels: \n 1 2\n\n\nWe can see from the figure that there are a fair number of training errors in this SVM fit. If we increase the value of cost, we can reduce the number of training errors. However, this comes at the price of a more irregular decision boundary that seems to be at risk of overfitting the data.\n\nsvmfit <- svm(y ~ ., data = dat[train, ], kernel = \"radial\",\n              gamma = 1, cost = 1e5 )\nplot(svmfit, dat[train, ])\n\n\n\n\n\nTune it\nWe can perform cross-validation using tune() to select the best choice of \\(\\gamma\\) and cost for an SVM with a radial kernel:\n\nset.seed(1)\ntune.out <- tune(svm, y ~ ., data = dat[train, ], kernel = \"radial\",\nranges = list (\n  cost = c (0.1, 1, 10, 100, 1000),\n  gamma = c (0.5, 1, 2, 3, 4)\n  )\n)\nsummary(tune.out)\n\n\nParameter tuning of 'svm':\n\n- sampling method: 10-fold cross validation \n\n- best parameters:\n cost gamma\n    1   0.5\n\n- best performance: 0.07 \n\n- Detailed performance results:\n    cost gamma error dispersion\n1  1e-01   0.5  0.26 0.15776213\n2  1e+00   0.5  0.07 0.08232726\n3  1e+01   0.5  0.07 0.08232726\n4  1e+02   0.5  0.14 0.15055453\n5  1e+03   0.5  0.11 0.07378648\n6  1e-01   1.0  0.22 0.16193277\n7  1e+00   1.0  0.07 0.08232726\n8  1e+01   1.0  0.09 0.07378648\n9  1e+02   1.0  0.12 0.12292726\n10 1e+03   1.0  0.11 0.11005049\n11 1e-01   2.0  0.27 0.15670212\n12 1e+00   2.0  0.07 0.08232726\n13 1e+01   2.0  0.11 0.07378648\n14 1e+02   2.0  0.12 0.13165612\n15 1e+03   2.0  0.16 0.13498971\n16 1e-01   3.0  0.27 0.15670212\n17 1e+00   3.0  0.07 0.08232726\n18 1e+01   3.0  0.08 0.07888106\n19 1e+02   3.0  0.13 0.14181365\n20 1e+03   3.0  0.15 0.13540064\n21 1e-01   4.0  0.27 0.15670212\n22 1e+00   4.0  0.07 0.08232726\n23 1e+01   4.0  0.09 0.07378648\n24 1e+02   4.0  0.13 0.14181365\n25 1e+03   4.0  0.15 0.13540064\n\n\nTherefore, the best choice of parameters involves cost = 1 and gamma = 0.5. We can view the test set predictions for this model by applying the predict() function to the data. Notice that to do this we subset the dataframe dat using -train as an index set.\n\ntable(\n  true = dat[-train, \"y\"], pred = predict (\n    tune.out$best.model, newdata = dat[-train, ]\n    )\n  )\n\n    pred\ntrue  1  2\n   1 67 10\n   2  2 21\n\n\nOnly 12% of test observations are misclassified by this SVM."
  },
  {
    "objectID": "lab09-svm.html#roc-curves",
    "href": "lab09-svm.html#roc-curves",
    "title": "Lab 09 SVM",
    "section": "3 ROC curves",
    "text": "3 ROC curves\nThe {ROCR} package can be used to produce ROC curves (see ch 9 in James et al. 2021). We first write a short function to plot an ROC curve given a vector containing a numerical score for each observation, pred, and a vector containing the class label for each observation, truth.\n\nlibrary(ROCR)\n\n# make function we will use below\nrocplot <- function(pred, truth , ...){\n  predob <- prediction (pred, truth)\n  perf <- performance (predob , \"tpr\", \"fpr\")\n  plot (perf, ...)\n  }\n\nSVMs and support vector classifiers output class labels for each observation. However, it is also possible to obtain fitted values for each observation, which are the numerical scores used to obtain the class labels. For instance, in the case of a support vector classifier, the fitted value for an observation \\(X = (X_1, X_2,. .., X_p)^T\\) takes the form \\(\\hat\\beta_0 + \\hat\\beta_1X_1 + \\hat\\beta_2X_2 + + \\hat\\beta_pX_p\\).\nIn essence, the sign of the fitted value determines on which side of the decision boundary the observation lies. Therefore, the relationship between the fitted value and the class prediction for a given observation is simple: if the fitted value exceeds zero then the observation is assigned to one class, and if it is less than zero then it is assigned to the other. In order to obtain the fitted values for a given SVM model fit, we use decision.values = TRUE when fitting svm(). Then the predict() function will output the fitted values.\n\nsvmfit.opt <- svm(y ~ ., data = dat[train, ], \n                  kernel = \"radial\", gamma = 2, cost = 1, \n                  decision.values = TRUE)\n\n# another utility function\nfitted <- attributes(\n  predict(svmfit.opt, dat[train, ], decision.values = TRUE)\n  )$decision.values\n\nNow we can produce the ROC plot. Note we use the negative of the fitted values so that negative values correspond to class 1 and positive values to class 2.\n\npar(mfrow = c(1, 1))\n\n# gamma = 2\nrocplot(-fitted, dat[train, \"y\"], main = \"Training Data\")\n\nsvmfit.flex <- svm(y ~ ., data = dat [train, ], \n                   kernel = \"radial\", gamma = 50 , \n                   cost = 1, decision.values = T)\n\nfitted <- attributes(\n  predict(svmfit.flex, dat[train, ], decision.values = T)\n  )$decision.values\n\n# gamma = 50\nrocplot(-fitted, dat[train, \"y\"], add = T, col = \"red\")\n\nlegend(x = .6, y=.8,\n       legend = c('gamma = 2', 'gamma = 50'),\n       bty = 'n', col = c(1,2), lty = 1)\n\n\n\n\nThe SVM appears to be producing accurate predictionsmade much better here by increasing \\(\\gamma\\) to produce a more flexible fit and generate further improvements in accuracy.\n\nTrain & TEST\nHowever, these ROC curves are all on the training data. We are really more interested in the level of prediction accuracy on the test data. When we compute the ROC curves on the test data, the model with \\(\\gamma\\) = 2 appears to provide the most accurate results.\n\nfitted <- attributes(\n  predict(svmfit.opt, dat[-train, ], decision.values = T)\n  )$decision.values\n\nrocplot(-fitted, dat[-train , \"y\"], main = \"Test Data\")\n\nfitted <- attributes(\n  predict(svmfit.flex, dat[-train, ], decision.values = T)\n  )$decision.values\n\nrocplot(-fitted, dat[-train , \"y\"], add = T, col = \"red\")\n\nlegend(x = .6, y=.8,\n       legend = c('gamma = 2', 'gamma = 50'),\n       bty = 'n', col = c(1,2), lty = 1)"
  },
  {
    "objectID": "lab09-svm.html#svm-with-multiple-classes",
    "href": "lab09-svm.html#svm-with-multiple-classes",
    "title": "Lab 09 SVM",
    "section": "4 SVM with multiple classes",
    "text": "4 SVM with multiple classes\nIf the response is a factor containing more than two levels, then the svm() function will perform multi-class classification using the one-versus-one approach. We explore that setting here by generating a third class of observations and fit an SVM to the data:\n\npar(mfrow=c(1,2))\n\nset.seed(1)\nx <- rbind(x, matrix(rnorm(50 * 2), ncol = 2))\ny <- c(y, rep(0, 50))\nx[y == 0 , 2] <- x[y == 0 , 2] + 2\n\ndat <- data.frame(x = x, y = as.factor(y)) \npar(mfrow = c(1 , 1))\nplot(x, col = ( y + 1), pch = 16)\n\n\n\n# Fit svm\nsvmfit <- svm (y ~., data = dat, kernel = \"radial\",\n               cost = 10 , gamma = 1)\nplot (svmfit, dat) \n\n\n\n\nThe {e1071} library can also be used to perform support vector regression, if the response vector that is passed in to svm() is numerical rather than a factor."
  },
  {
    "objectID": "lab09-svm.html#gene-expression-example",
    "href": "lab09-svm.html#gene-expression-example",
    "title": "Lab 09 SVM",
    "section": "5 Gene expression example",
    "text": "5 Gene expression example\nWe now examine the Khan data set, which consists of a number of tissue samples corresponding to four distinct types of small round blue cell tumors. For each tissue sample, gene expression measurements are available. The data set consists of training data, xtrain and ytrain, and testing data, xtest and ytest.\nWe examine the dimension of the data:\n\nlibrary(ISLR2)\nlibrary(e1071)\n\nnames(Khan) \n\n[1] \"xtrain\" \"xtest\"  \"ytrain\" \"ytest\" \n\ndim(Khan$xtrain) # lots of features/loci\n\n[1]   63 2308\n\ndim(Khan$xtest) # each row is a patient\n\n[1]   20 2308\n\nlength(Khan$ytrain)\n\n[1] 63\n\nlength(Khan$ytest)\n\n[1] 20\n\n\nThis data set consists of expression measurements for 2,308 genes. The training and test sets consist of 63 and 20 (patient) observations respectively.\n\ntable(Khan$ytrain) # train patient count in each classification\n\n\n 1  2  3  4 \n 8 23 12 20 \n\ntable(Khan$ytest) # test patient count in each classification\n\n\n1 2 3 4 \n3 6 6 5 \n\n\nWe will explore a support vector approach to predict cancer subtype using gene expression measurements. In this data set, there are a very large number of features relative to the number of observations. For this we should use a linear kernel, because the additional flexibility that will result from using a polynomial or radial kernel is unnecessary.\n\ndat <- data.frame(\n  x = Khan$xtrain,\n  y = as.factor(Khan$ytrain )\n  )\n\nout <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 10)\nsummary(out)\n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 10)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  10 \n\nNumber of Support Vectors:  58\n\n ( 20 20 11 7 )\n\n\nNumber of Classes:  4 \n\nLevels: \n 1 2 3 4\n\ntable(out$fitted, dat$y) # Boom...?\n\n   \n     1  2  3  4\n  1  8  0  0  0\n  2  0 23  0  0\n  3  0  0 12  0\n  4  0  0  0 20\n\n\nWe see that there are no training errors. In fact, this is not surprising, because the large number of variables relative to the number of observations makes it easy to find hyperplanes that fully separate the classes. We are most interested not in the support vector classifier’s performance on the training observations, but rather its performance on the test observations…\n\ndat.te <- data.frame(x = Khan$xtest, y = as.factor(Khan$ytest))\n\npred.te <- predict(out, newdata = dat.te)\n\ntable(pred.te, dat.te$y) # ok.. not bad*\n\n       \npred.te 1 2 3 4\n      1 3 0 0 0\n      2 0 6 2 0\n      3 0 0 4 0\n      4 0 0 0 5\n\n# *For cancer prediction it is of utmost importance to construct\n# perfect predictions.  This is not just a difficult technical\n# problem, but an ethical one of monumental consequences\n\nWe see that using cost = 10 yields two test set errors on this data."
  },
  {
    "objectID": "lab09-svm.html#exercises",
    "href": "lab09-svm.html#exercises",
    "title": "Lab 09 SVM",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\n\n1.1\nGenerate a simulated two-class data set with 100 observations and two features in which there is a visible but non-linear separation be- tween the two classes. Show that in this setting, a support vector machine with a polynomial kernel (with degree greater than 1) or a radial kernel will outperform a support vector classifier on the training data. Which technique performs best on the test data? Make plots and report training and test error rates in order to back up your assertions.\n\n\n\nExercise 2\nWe have seen that we can fit an SVM with a non-linear kernel in order to perform classification using a non-linear decision boundary. We will now see that we can also obtain a non-linear decision boundary by performing logistic regression using non-linear transformations of the features.\n\n2.1\nGenerate a data set with n = 500 and p = 2, such that the observations belong to two classes with a quadratic decision boundary between them. For instance, you can do this as follows:\n\n# Although it is beyond what is possible in this lab,\n# the practice of simulating data like this is \n# hugely powerful and useful\nx1 <- runif(500) - 0.5\nx2 <- runif(500) - 0.5\ny <- 1 * (x1^2 - x2^2 > 0)\n\n\n\n2.2\nPlot the observations, colored according to their class labels. Your plot should display \\(X_1\\) on the x-axis, and \\(X_2\\) on the y-axis.\n\n\n2.3\nFit a logistic regression model to the data, using \\(X_1\\) and \\(X_2\\) as predictors.\n\n\n2.4\nApply this model to the training data in order to obtain a predicted class label for each training observation. Plot the observations, colored according to the predicted class labels. The decision boundary should be linear.\n\n\n2.5\nNow fit a logistic regression model to the data using non-linear functions of \\(X_1\\) and \\(X_2\\) as predictors (e.g. \\(X^2\\), \\(X_1 \\times X_2\\), log(\\(X_2\\)), and so forth).\n\n\n2.6\nApply this model to the training data in order to obtain a predicted class label for each training observation. Plot the observations, colored according to the predicted class labels. The decision boundary should be obviously non-linear. If it is not, then repeat (2.1)-(2.5) to see if you can come up with an example in which the predicted class labels are obviously non-linear.\n\n\n2.7\nFit a support vector classifier to the data with \\(X_1\\) and \\(X_2\\) as predictors. Obtain a class prediction for each training observation. Plot the observations, colored according to the predicted class labels.\n\n\n2.8\nFit a SVM using a non-linear kernel to the data. Obtain a class prediction for each training observation. Plot the observations, colored according to the predicted class labels.\n\n\n2.9\nComment on your results."
  },
  {
    "objectID": "lab09-svm.html#resources",
    "href": "lab09-svm.html#resources",
    "title": "Lab 09 SVM",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab09-svm.html#harper-adams-data-science",
    "href": "lab09-svm.html#harper-adams-data-science",
    "title": "Lab 09 SVM",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab10-unsupervised.html",
    "href": "lab10-unsupervised.html",
    "title": "Lab 10 Unsupervised",
    "section": "",
    "text": "I just watched an old film called The Man Who Shot Liberty Valance that tells the story of a shockingly lawless time in the American West at some time in the 1800s, which is so long ago that it somehow makes the violence easier to accept. However, the USArrests data are from 1973…\n\nIn this lab, we perform PCA on the USArrests data set, which is part of the base R package. The rows of the data set contain the 50 US states, in alphabetical order.\n\nstates <- row.names(USArrests)\nstates\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nThe columns of the data set contain the four variables.\n\nnames(USArrests)\n\n[1] \"Murder\"   \"Assault\"  \"UrbanPop\" \"Rape\"    \n\n\nWe first briefly examine the data. We notice that the variables have vastly different means.\n\napply(USArrests, 2, mean)\n\n  Murder  Assault UrbanPop     Rape \n   7.788  170.760   65.540   21.232 \n\n\nNote that the apply() function allows us use a function, in this case the mean() function, on each row or column of a data set. The second input here denotes whether we wish to compute the mean of the rows, 1, or the columns, 2. We see that there are on average three times as many rapes as murders, and more than eight times as many assaults as rapes.\nWe can also examine the standard deviation of each variable using the apply() function.\n\napply(USArrests, 2, sd)\n\n   Murder   Assault  UrbanPop      Rape \n 4.355510 83.337661 14.474763  9.366385 \n\n\nNot surprisingly, the variables also have vastly different variances: the UrbanPop variable measures the percentage of the population in each state living in an urban area, which is not a comparable number to the number of rapes in each state per 100,000 individuals. If we failed to scale the variables before performing PCA, then most of the principal components that we observed would be driven by the Assault variable, since it has by far the largest mean and variance. Thus, it is important to standardize the variables to have mean zero and standard deviation one before performing PCA.\n\n\nWe now perform principal components analysis using the prcomp() function, which is one of several functions in R that perform PCA.\n\npr.out <- prcomp(USArrests, scale = TRUE)\n\nBy default, the prcomp() function centers the variables to have mean zero. By using the option scale = TRUE, we scale the variables to have standard deviation one. The output from prcomp() contains a number of useful quantities.\n\nnames(pr.out)\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\nThe center and scale components correspond to the means and standard deviations of the variables that were used for scaling prior to implementing PCA.\n\npr.out$center\n\n  Murder  Assault UrbanPop     Rape \n   7.788  170.760   65.540   21.232 \n\npr.out$scale\n\n   Murder   Assault  UrbanPop      Rape \n 4.355510 83.337661 14.474763  9.366385 \n\n\nThe rotation matrix provides the principal component loadings; each column of pr.out$rotation contains the corresponding principal component loading vector. This function names it the rotation matrix, because when we matrix-multiply the \\(X\\) matrix by pr.out$rotation, it gives us the coordinates of the data in the rotated coordinate system. These coordinates are the principal component scores.\n\npr.out$rotation\n\n                PC1        PC2        PC3         PC4\nMurder   -0.5358995  0.4181809 -0.3412327  0.64922780\nAssault  -0.5831836  0.1879856 -0.2681484 -0.74340748\nUrbanPop -0.2781909 -0.8728062 -0.3780158  0.13387773\nRape     -0.5434321 -0.1673186  0.8177779  0.08902432\n\n\nWe see that there are four distinct principal components. This is to be expected because there are in general min(n 1, p) informative principal components in a data set with n observations and p variables.\nUsing the prcomp() function, we do not need to explicitly multiply the data by the principal component loading vectors in order to obtain the principal component score vectors. Rather the \\(50 \\times 4\\) matrix x has as its columns the principal component score vectors. That is, the kth column is the kth principal component score vector.\n\ndim(pr.out$x)\n\n[1] 50  4\n\n\n\n\n\nWe can plot the first two principal components as follows:\n\n# State name labels:\n# the coordinates of the pc1 and pc2 scores\n\n# The vectors:\n# the coordinates of the pc1 and pc2 rotation\n\nbiplot(pr.out, scale = 0)\n\n\n\n\nThe scale = 0 argument to biplot() ensures that the arrows are scaled to represent the loadings; other values for scale give slightly diﬀerent biplots with different interpretations.\n\n\n\nThe variance explained by each principal component is obtained by squaring the standard deviations:\n\npr.var <- pr.out$sdev^2\npr.var\n\n[1] 2.4802416 0.9897652 0.3565632 0.1734301\n\n\nIt is often useful to understand the proportion of variance explained by each principal component, we simply divide the variance explained by each principal component by the total variance explained by all four principal components:\n\npve <- pr.var / sum(pr.var)\npve\n\n[1] 0.62006039 0.24744129 0.08914080 0.04335752\n\n\nWe see that the first principal component explains 62.0% of the variance in the data, the next principal component explains 24.7% of the variance, and so forth. We can plot the PVE explained by each component, as well as the cumulative PVE, as follows:\n\npar(mfrow = c(1, 2))\n\nplot (pve, xlab = \"Principal Component\",\n      ylab = \"Proportion of Variance Explained\", \n      ylim = c(0, 1) , type = \"b\",\n      pch = 16, col = 'red')\n\nplot(cumsum(pve), xlab = \"Principal Component\",\n     ylab = \"Cumulative Proportion of Variance Explained\", \n     ylim = c(0, 1) , type = \"b\",\n     pch = 16, col = 'blue')\n\n\n\n\n\n\n\n\na <- c(1, 2, 8, -3)\ncumsum(a)\n\n[1]  1  3 11  8"
  },
  {
    "objectID": "lab10-unsupervised.html#matrix-completion",
    "href": "lab10-unsupervised.html#matrix-completion",
    "title": "Lab 10 Unsupervised",
    "section": "2 Matrix completion",
    "text": "2 Matrix completion\nWe now analyse the USArrests data. We turn the data frame into a matrix, after centering and scaling each column to have a mean of zero and a variance of one.\n\nX <- data.matrix(scale(USArrests))\npcob <- prcomp(X) \nsummary(pcob) \n\nImportance of components:\n                          PC1    PC2     PC3     PC4\nStandard deviation     1.5749 0.9949 0.59713 0.41645\nProportion of Variance 0.6201 0.2474 0.08914 0.04336\nCumulative Proportion  0.6201 0.8675 0.95664 1.00000\n\n\n\nsvd()\nA short digression is how PCA works mathematically. Solving a centered and scaled matrix of data to discover the axis of variation specific to each principal component is called singular value composition, SVD for short. Of course, we can do this in R too.\n\nsX <- svd(X)\n\n# v is equivalent to the loadings matrix in pca()\nnames(sX)\n\n[1] \"d\" \"u\" \"v\"\n\n# NB the value magnitudes are equal to pca loadings\nround(sX$v, 3)\n\n       [,1]   [,2]   [,3]   [,4]\n[1,] -0.536  0.418 -0.341  0.649\n[2,] -0.583  0.188 -0.268 -0.743\n[3,] -0.278 -0.873 -0.378  0.134\n[4,] -0.543 -0.167  0.818  0.089\n\n\nThe svd() function returns three components, u, d, and v. The matrix v is equivalent to the loading matrix from principal components.\n\nround(pcob$rotation, 3)\n\n            PC1    PC2    PC3    PC4\nMurder   -0.536  0.418 -0.341  0.649\nAssault  -0.583  0.188 -0.268 -0.743\nUrbanPop -0.278 -0.873 -0.378  0.134\nRape     -0.543 -0.167  0.818  0.089\n\n\nThe matrix u is equivalent to the matrix of standardized scores, and the standard deviations are in the vector d. We can recover the score vectors using the output of svd(). They are identical to the score vectors output by prcomp().\n\n# <3 matrix tricks\n\n# just first 5 rows\nround(t(sX$d * t(sX$u))[1:5, ], 3)\n\n       [,1]   [,2]   [,3]   [,4]\n[1,] -0.976  1.122 -0.440  0.155\n[2,] -1.931  1.062  2.020 -0.434\n[3,] -1.745 -0.738  0.054 -0.826\n[4,]  0.140  1.109  0.113 -0.181\n[5,] -2.499 -1.527  0.593 -0.339\n\nround(pcob$x[1:5, ], 3)\n\n              PC1    PC2    PC3    PC4\nAlabama    -0.976  1.122 -0.440  0.155\nAlaska     -1.931  1.062  2.020 -0.434\nArizona    -1.745 -0.738  0.054 -0.826\nArkansas    0.140  1.109  0.113 -0.181\nCalifornia -2.499 -1.527  0.593 -0.339\n\n\nNote it is possible to just carry out this using the prcomp() function, here we use the svd() function in order to illustrate its use."
  },
  {
    "objectID": "lab10-unsupervised.html#k-mean-clustering",
    "href": "lab10-unsupervised.html#k-mean-clustering",
    "title": "Lab 10 Unsupervised",
    "section": "3 K-mean clustering",
    "text": "3 K-mean clustering\nThe function kmeans() performs K-means clustering in R. We begin with a simple simulated example in which there truly are two clusters in the data: the first 25 observations have a mean shift relative to the next 25 observations.\n\nset.seed(2)\nx <- matrix(rnorm(50 * 2), ncol = 2) # fake\n\n# manufacture one cluster\nx[1:25, 1] <- x[1:25, 1] + 3\n\n# different cluster\nx[1:25, 2] <- x[1:25, 2] - 4\n\n# viz\npar(mfrow=c(1,1))\nplot(x, pch = 16, col = 'goldenrod',\n     main = 'Can you see any clusters?')\n\n\n\n\nWe now perform K-means clustering with K = 2.\n\n# YOU pick how many clusters with the centers arg.\nkm.out <- kmeans(x, centers = 2, nstart = 20)\n\n# predicted clusters\nkm.out$cluster\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2\n\n\nK-means clustering perfectly separates the observations into two clusters even though we did not supply any group information to kmeans(). We can plot the data, with each observation colored according to its cluster assignment.\n\nplot (x, col = (km.out$cluster),\n      main = \"K- Means Clustering Results with K = 2\", \n      xlab = \"\", ylab = \"\", pch = 20 , cex = 2)\n\n\n\n\nHere the observations can be easily plotted because they are two-dimensional. If there were more than two variables then we could instead perform PCA and plot the first two principal components score vectors.\nIn this example, we knew that there really were two clusters because we generated the data. However, for real data, in general we do not know the true number of clusters. We could instead have performed K-means clustering on this example with K = 3.\n\nset.seed(4)\nkm.out <- kmeans(x, 3, nstart = 20)\nkm.out\n\nK-means clustering with 3 clusters of sizes 17, 23, 10\n\nCluster means:\n        [,1]        [,2]\n1  3.7789567 -4.56200798\n2 -0.3820397 -0.08740753\n3  2.3001545 -2.69622023\n\nClustering vector:\n [1] 1 3 1 3 1 1 1 3 1 3 1 3 1 3 1 3 1 1 1 1 1 3 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 3 2 3 2 2 2 2\n\nWithin cluster sum of squares by cluster:\n[1] 25.74089 52.67700 19.56137\n (between_SS / total_SS =  79.3 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\nplot (x, col = (km.out$cluster),\n      main = \"K- Means Clustering Results with K = 3\", \n      xlab = \"\", ylab = \"\", pch = 20 , cex = 2)\n\n\n\n\nWhen K = 3, K-means clustering splits up the “manufactured” clusters.\n\nImproving kmeans()\nTo run the kmeans() function in R with multiple initial cluster assignments, we use the nstart argument. If a value of nstart greater than one is used, then K-means clustering will be performed using multiple random assignments, and the kmeans() function will report only the best results. Here we compare using nstart = 1 to nstart = 20.\n\nset.seed(4)\nkm.out <- kmeans (x, 3, nstart = 1)\nkm.out$tot.withinss\n\n[1] 104.3319\n\nset.seed(4)\nkm.out <- kmeans(x, 3, nstart = 20)\nkm.out$tot.withinss\n\n[1] 97.97927\n\n\nNote that km.out$tot.withinss is the total within-cluster sum of squares, which we seek to minimize by performing K-means clustering. The individual within-cluster sum-of-squares are contained in the vector km.out$withinss.\nIt is strongly recommend to always run K-means clustering with a large value of nstart, such as 20 or 50, since otherwise an undesirable local optimum may be obtained.\nWhen performing K-means clustering, in addition to using multiple initial cluster assignments, it is also important to set a random seed using the set.seed() function. This way, the initial cluster assignments in Step 1 can be replicated, and the K-means output will be fully reproducible."
  },
  {
    "objectID": "lab10-unsupervised.html#hierarchical-clustering",
    "href": "lab10-unsupervised.html#hierarchical-clustering",
    "title": "Lab 10 Unsupervised",
    "section": "4 Hierarchical Clustering",
    "text": "4 Hierarchical Clustering\nHierarchical clustering attempts to identify “splits” in variable values that partition data into classifications based on associated values.\n\nhclust()\nThe hclust() function implements hierarchical clustering in R. In the following example we use the data from the previous lab to plot the hierarchical clustering “dendrogram” using complete, single, and average linkage clustering, with Euclidean distance (straight-line distance between points) as the dissimilarity measure. We begin by clustering observations using complete linkage.\n\n\ndist()\nThe dist() function is used to compute the 50 × 50 inter-observation Euclidean distance matrix.\n\nhc.complete <- hclust(dist(x), method = \"complete\")\n\nThere are several methods used; We could just as easily perform hierarchical clustering with average or single linkage instead:\n\nhc.average <- hclust(dist(x), method = \"average\")\nhc.single <- hclust(dist(x), method = \"single\")\n\nWe can now plot the dendrograms obtained using the usual plot() function. The numbers at the bottom of the plot identify each observation.\n\npar (mfrow = c(1 , 3))\n\nplot (hc.complete, main = \"Complete Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\nplot (hc.average, main = \"Average Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\nplot (hc.single, main = \"Single Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\n\n\n\n\n\ncutree()\nTo determine the cluster labels for each observation associated with a given cut of the dendrogram, we can use the cutree() function:\n\n# the methods may differ in IDed clusters\ncutree(hc.complete, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2\n\ncutree(hc.average, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 1 2 2 2 2 2\n[39] 2 2 2 2 2 1 2 1 2 2 2 2\n\ncutree(hc.single, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nThe second argument to cutree() is the number of clusters we wish to obtain. For this data, complete and average linkage generally separate the observations into their correct groups. However, single linkage identifies one point as belonging to its own cluster. A more sensible answer is obtained when four clusters are selected, although there are still two singletons.\n\ncutree(hc.single, 4)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3\n[39] 3 3 3 4 3 3 3 3 3 3 3 3\n\n\n\n\nscale()\nWe know analyzing variables of different scale and variance can affect your analysis. To scale the variables before performing hierarchical clustering of the observations, we use the scale() function:\n\npar(mfrow=c(1,1))\nxsc <- scale(x)\nplot( hclust(dist(xsc), method = \"complete\"), \n      main = \"Hierarchical Clustering with Scaled Features\")\n\n\n\n\n\n\nas.dist()\nCorrelation-based distance can be computed using the as.dist() function, which converts an arbitrary square symmetric matrix into a form that the hclust() function recognizes as a distance matrix. However, this only makes sense for data with at least three features since the absolute correlation between any two observations with measurements on two features is always 1. Hence, we will cluster a three-dimensional data set. This data set does not contain any true clusters.\n\nx <- matrix(rnorm(30 * 3), ncol = 3)\n\n# explore the nesting if you wish\ndd <- as.dist(1 - cor(t(x))) \n\nplot(hclust(dd, method = \"complete\"), \n       main = \"Complete Linkage with Correlation - Based Distance\", \n       xlab = \"\", sub = \"\")"
  },
  {
    "objectID": "lab10-unsupervised.html#data-story-genomics-data",
    "href": "lab10-unsupervised.html#data-story-genomics-data",
    "title": "Lab 10 Unsupervised",
    "section": "5 Data story: genomics data",
    "text": "5 Data story: genomics data\n\nNC160 data\nUnsupervised techniques are often used in the analysis of genomic data. In particular, PCA and hierarchical clustering are popular tools. We illustrate these techniques on the NCI60 cancer cell line microarray data, which consists of 6,830 gene expression measurements on 64 cancer cell lines.\nThe question here is whether there are any genes that cluster by cell line.\n\nlibrary(ISLR2)\nnci.labs <- NCI60$labs\nnci.data <- NCI60$data\n\nEach cell line is labeled with a cancer type, given in nci.labs. We do not make use of the cancer types in performing PCA and clustering, as these are unsupervised techniques. But after performing PCA and clustering, we will check to see the extent to which these cancer types agree with the results of these unsupervised techniques.\nThe data has 64 rows and 6,830 columns.\n\ndim(nci.data)\n\n[1]   64 6830\n\n\nWe begin by examining the cancer types for the cell lines.\n\n# cancer type labels for the lines\nnci.labs[1:4]\n\n[1] \"CNS\"   \"CNS\"   \"CNS\"   \"RENAL\"\n\n# count of types\ntable(nci.labs) \n\nnci.labs\n     BREAST         CNS       COLON K562A-repro K562B-repro    LEUKEMIA \n          7           5           7           1           1           6 \nMCF7A-repro MCF7D-repro    MELANOMA       NSCLC     OVARIAN    PROSTATE \n          1           1           8           9           6           2 \n      RENAL     UNKNOWN \n          9           1 \n\n\n\n\nPCA NC160\nWe first perform PCA on the data after scaling the variables (genes) to have standard deviation one, although one might reasonably argue that it is better not to scale the genes (i.e. this is somewhat subjective).\n\npr.out <- prcomp(nci.data, scale = TRUE)\n\nWe now plot the first few principal component score vectors, in order to visualize the data. The observations (cell lines) corresponding to a given cancer type will be plotted in the same color, so that we can see to what extent the observations within a cancer type are similar to each other. We first create a simple function that assigns a distinct color to each element of a numeric vector. The function will be used to assign a color to each of the 64 cell lines, based on the cancer type to which it corresponds.\n\n\nrainbow() function\n\n# make function to set different colour palette for categories\nCols <- function(vec){\n  cols <- rainbow(length(unique(vec)))\n  return(cols[as.numeric(as.factor(vec))])\n  }\n\nNote that the rainbow() function takes as its argument a positive integer, and returns a vector containing that number of distinct colors. We now can plot the principal component score vectors.\n\npar(mfrow = c(1, 2))\n\n# visualization of clusters for PC1 and PC2\nplot(pr.out$x[ , 1:2], col = Cols(nci.labs), pch = 19, \n     xlab = \"Z1\", ylab = \"Z2\")\n\n# visualization of clusters for PC1 and PC3\nplot (pr.out$x[ , c(1, 3)], col = Cols (nci.labs), pch = 19, \n      xlab = \"Z1\", ylab = \"Z3\")\n\n\n\n\nOn the whole, cell lines corresponding to a single cancer type do tend to have similar values on the first few principal component score vectors. This indicates that cell lines from the same cancer type tend to have pretty similar gene expression levels.\nWe can obtain a summary of the proportion of variance explained (PVE) of the first few principal components using the summary() method for a prcomp object:\n\n# just slice out first 5 PCs to peek\nsummary(pr.out)$importance[, 1:5]\n\n                            PC1      PC2      PC3      PC4      PC5\nStandard deviation     27.85347 21.48136 19.82046 17.03256 15.97181\nProportion of Variance  0.11359  0.06756  0.05752  0.04248  0.03735\nCumulative Proportion   0.11359  0.18115  0.23867  0.28115  0.31850\n\n\nUsing the plot() function, we can also plot the variance explained by the first few principal components.\n\npar(mfrow=c(1,1))\nplot(pr.out, xlab = 'PC1 through PC10')\n\n\n\n\n\n\nFancier var plots\nNote that the height of each bar in the bar plot is given by squaring the corresponding element of pr.out$sdev. However, it is more informative to plot the PVE of each principal component (i.e. a scree plot) and the cumulative PVE of each principal component. This can be done with just a little work.\n\npve <- 100 * pr.out$sdev^2 / sum(pr.out$sdev^2)\npar(mfrow = c(1, 2))\nplot(pve, type = \"o\", \n     ylab = \"PVE\", xlab = \"Principal Component\", \n     pch = 16, col = \"red\")\nplot(cumsum(pve), type = \"o\", \n     ylab = \"Cumulative PVE\", xlab = \"Principal Component\", \n      pch = 16, col = \"blue\")\n\n\n\n\nWe see that together, the first seven principal components explain around 40% of the variance in the data. This is not a huge amount of the variance. However, looking at the scree plot, we see that while each of the first seven principal components explain a substantial amount of variance, there is a marked decrease in the variance explained by further principal components. That is, there is an elbow in the plot after approximately the seventh principal component. This suggests that there may be little benefit to examining more than seven or so principal components (though even examining seven principal components may be difficult in itself).\n\n\nclustering NC160\nWe now proceed to hierarchically cluster the cell lines in the NCI60 data, with the goal of finding out whether or not the observations cluster into distinct types of cancer. To begin, we standardize the variables to have mean zero and standard deviation one. As mentioned earlier, this step is optional and should be performed only if we want each gene to be on the same scale.\n\nsd.data <- scale(nci.data )\n\nWe now perform hierarchical clustering of the observations using complete, single, and average linkage. Euclidean distance is used as the dissimilarity measure.\n\npar(mfrow = c(1,3))\n\ndata.dist <- dist(sd.data)\nplot(hclust(data.dist), xlab = \"\", sub = \"\", ylab = \"\", \n     labels = nci.labs, main = \"Complete Linkage\")\n\nplot(hclust(data.dist, method = \"average\"),\n     labels = nci.labs, main = \"Average Linkage\", \n     xlab = \"\", sub = \"\", ylab = \"\")\n\nplot(hclust(data.dist, method = \"single\"), \n     labels = nci.labs , main = \"Single Linkage\", \n     xlab = \"\", sub = \"\", ylab = \"\")\n\n\n\n\nThese figures are not aesthetically pleasing, but we can still see that the three methods resulted in very different clustering.\nTypically, single linkage will tend to yield “trailing” clusters: very large clusters onto which individual observations attach one-by-one. On the other hand, complete and average linkage tend to yield more balanced, attractive clusters. For this reason, complete and average linkage are generally preferred to single linkage. Clearly cell lines within a single cancer type do tend to cluster together, although the clustering is not perfect. We will use complete linkage hierarchical clustering for the analysis that follows.\n\n\nCutting clusters\nWe can cut the dendrogram at the height that will yield a particular number of clusters, say four:\n\nhc.out <- hclust(dist(sd.data ))\nhc.clusters <- cutree (hc.out, 4)\ntable(hc.clusters , nci.labs )\n\n           nci.labs\nhc.clusters BREAST CNS COLON K562A-repro K562B-repro LEUKEMIA MCF7A-repro\n          1      2   3     2           0           0        0           0\n          2      3   2     0           0           0        0           0\n          3      0   0     0           1           1        6           0\n          4      2   0     5           0           0        0           1\n           nci.labs\nhc.clusters MCF7D-repro MELANOMA NSCLC OVARIAN PROSTATE RENAL UNKNOWN\n          1           0        8     8       6        2     8       1\n          2           0        0     1       0        0     1       0\n          3           0        0     0       0        0     0       0\n          4           1        0     0       0        0     0       0\n\n\nThere are some clear patterns. All the leukemia cell lines fall in cluster 3, while the breast cancer cell lines are spread out over three different clusters. We can plot the cut on the dendrogram that produces these four clusters:\n\npar(mfrow = c(1, 1))\nplot (hc.out, labels = nci.labs )\nabline(h = 139, col = \"red\")\n\n\n\n\nThe abline() function draws a straight line on top of any existing plot in R. The argument h = 139 plots a horizontal line at height 139 on the dendrogram; this is the height that results in four distinct clusters. It is easy to verify that the resulting clusters are the same as the ones we obtained using cutree(hc.out, 4).\nPrinting the output of hclust gives a useful brief summary of the object:\n\nhc.out\n\n\nCall:\nhclust(d = dist(sd.data))\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 64 \n\n\nK-means clustering and hierarchical clustering with the dendrogram cut to obtain the same number of clusters can yield very diﬀerent results. How do these NCI60 hierarchical clustering results compare to what we get if we perform K-means clustering with K = 4?\n\nset.seed (2)\nkm.out <- kmeans(sd.data, 4, nstart = 20)\nkm.clusters <- km.out$cluster\ntable(km.clusters, hc.clusters ) \n\n           hc.clusters\nkm.clusters  1  2  3  4\n          1 11  0  0  9\n          2 20  7  0  0\n          3  9  0  0  0\n          4  0  0  8  0\n\n\nWe see that the four clusters obtained using hierarchical clustering and K-means clustering are somewhat diﬀerent. Cluster 4 in K-means clustering is identical to cluster 3 in hierarchical clustering. However, the other clusters diﬀer: for instance, cluster 2 in K-means clustering contains a portion of the observations assigned to cluster 1 by hierarchical clustering, as well as all of the observations assigned to cluster 2 by hierarchical clustering.\nRather than performing hierarchical clustering on the entire data matrix, we can simply perform hierarchical clustering on the first few principal component score vectors, as follows:\n\nhc.out <- hclust(dist(pr.out$x[, 1:5]) )\nplot (hc.out, labels = nci.labs,\n      main = \"Hier. Clust. on First Five Score Vectors\")\n\n\n\ntable(cutree(hc.out, 4), nci.labs )\n\n   nci.labs\n    BREAST CNS COLON K562A-repro K562B-repro LEUKEMIA MCF7A-repro MCF7D-repro\n  1      0   2     7           0           0        2           0           0\n  2      5   3     0           0           0        0           0           0\n  3      0   0     0           1           1        4           0           0\n  4      2   0     0           0           0        0           1           1\n   nci.labs\n    MELANOMA NSCLC OVARIAN PROSTATE RENAL UNKNOWN\n  1        1     8       5        2     7       0\n  2        7     1       1        0     2       1\n  3        0     0       0        0     0       0\n  4        0     0       0        0     0       0\n\n\nNot surprisingly, these results are diﬀerent from the ones that we obtained when we performed hierarchical clustering on the full data set. Sometimes performing clustering on the first few principal component score vectors can give better results than performing clustering on the full data. In this situation, we might view the principal component step as one of “denoising” the data. We could also perform K-means clustering on the first few principal component score vectors rather than the full data set."
  },
  {
    "objectID": "lab10-unsupervised.html#exercises",
    "href": "lab10-unsupervised.html#exercises",
    "title": "Lab 10 Unsupervised",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nWe mentioned the use of correlation-based distance and Euclidean distance as dissimilarity measures for hierarchical clustering. It turns out that these two measures are almost equivalent: if each observation has been centered to have mean zero and standard deviation one, and if we let \\(r_{ij}\\) denote the correlation between the ith and jth observations, then the quantity \\(1-r_{ij}\\) is proportional to the squared Euclidean distance between the \\(i^{th}\\) and \\(j^{th}\\) observations.\nOn the USArrests data, can you explore the data to show that this proportionality holds?\nHint: The Euclidean distance can be calculated using the dist() function, and correlations can be calculated using the cor() function.\n\n\nExercise 2\nWe also saw that the PVE can be obtained using the sdev output of the prcomp() function.\nOn the USArrests data, calculate PVE by using the sdev output of the prcomp() function\n\n\nExercise 3\nConsider the USArrests data. We will now perform hierarchical clustering on the states.\n\n3.1\nUsing hierarchical clustering with complete linkage and Euclidean distance, cluster the states.\n\n\n3.2\nCut the dendrogram at a height that results in three distinct clusters. Which states belong to which clusters?\n\n\n3.3\nHierarchically cluster the states using complete linkage and Euclidean distance, after scaling the variables to have standard deviation one.\n\n\n3.4\nWhat effect does scaling the variables have on the hierarchical clustering obtained? In your opinion, should the variables be scaled before the inter-observation dissimilarities are computed? Provide a justification for your answer."
  },
  {
    "objectID": "lab10-unsupervised.html#resources",
    "href": "lab10-unsupervised.html#resources",
    "title": "Lab 10 Unsupervised",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab10-unsupervised.html#harper-adams-data-science",
    "href": "lab10-unsupervised.html#harper-adams-data-science",
    "title": "Lab 10 Unsupervised",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lec00-module-intro.html#section",
    "href": "lec00-module-intro.html#section",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "",
    "text": "C7081 Statistical Analysis for Data Science\nEd Harris"
  },
  {
    "objectID": "lec00-module-intro.html#module-overview",
    "href": "lec00-module-intro.html#module-overview",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Module overview",
    "text": "Module overview\n\n\n\n\n“I am always ready to learn although I do not always like being taught.”\n\n-Winston Churchill"
  },
  {
    "objectID": "lec00-module-intro.html#module-overview-1",
    "href": "lec00-module-intro.html#module-overview-1",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Module overview",
    "text": "Module overview\n\n\nOne week intensive format\nDaily catch-up meetings\nRecorded lectures, readings\nLabs are critical"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The material in this module is designed to be experienced in an intensive one week format followed by an assessment meant to showcase data science skills (e.g. a github project website that could be part of your cv). For enrolled students, the work will be supported with several live sessions during the main week of delivery.\n\nWhich do you choose: R or Python? (or both…)\n\n\n\nDay\nTopics\nR Labs\nPython Labs\nReadings\n\n\n\n\nInduction\n welcome activity \nLab welcome exercise\n\n\n\n\nMon\nlive:\n am\n pm\n*lecture videos password: data4life\n 00 Module overview\n 01 Introduction 1.1 1.2\n 02 Statistical learning 2.1 2.2\nLab guidance\nLab 01 Linear algebra fun\nLab 02 R programming refresh\nRead Chapter 01 Brown 2023, install Python and Anaconda\nLab 02 stat learn\nJames et al. 2021 Ch 1,2\nEfron 2020\n\n\nTues\n am\n pm\n 03 Linear regression 3.1 3.2\n 04 Classification 4.1 4.2\nLab 03 Linear regression\nLab 04 Classification\nLab 03 lin reg\nLab 04 Classification\nJames et al. 2021 Ch 3,4\nMelesse 2018\n\n\nWed\n am\n pm\n 05 Bootstrapping 5.1 5.2\n 06 Model selection 6.1 6.2 6.3\nLab 05 Resampling\nLab 06 Model selection\nLab 05 Resampling\nLab 06 Model selection\nJames et al. 2021 Ch 5,6\nAho 2014\n\n\nThurs\n(no vid) am\n(no vid) pm\n 07 Non-linear models 7.1 7.2\n 08 Decision trees 8.1 8.2 8.3 8.4\nLab 07 Non-linear models\nLab 08 Decision trees\nLab 07 Nonlinear adventures\nLab 08 Decision trees\nJames et al. 2021 Ch 7,8\nBarnard 2019\nOtukei 2010\n\n\nFri\nam\npm\n 09 Support vector machines 9.1 9.2\n 10 Unsupervised learning 10.1 10.2 10.3\nLab 09 SVM\nLab 10 (12) Unsupervised learning\nLab 09 SVM\nLab 10 (12) Unsupervised\nJames et al. 2021 Ch 9,12\nEbrahimi 2017\nHowell 2020"
  },
  {
    "objectID": "schedule.html#references",
    "href": "schedule.html#references",
    "title": "Schedule",
    "section": "References",
    "text": "References\nTextbook: James et al. 2021 Introduction to statistical learning with Applications in R\nTextbook: James et al. 2023 Introduction to statistical learning with Applications in Python\nall refs zip\nAho, K., Derryberry, D., Peterson, T., 2014. Model selection for ecologists: the worldviews of AIC and BIC. Ecology 95, 631–636.\nBarnard, D.M., Germino, M.J., Pilliod, D.S., Arkle, R.S., Applestein, C., Davidson, B.E., Fisk, M.R., 2019. Cannot see the random forest for the decision trees: selecting predictive models for restoration ecology. Restoration Ecology 27, 1053–1063.\nEbrahimi, M.A., Khoshtaghaza, M.H., Minaei, S., Jamshidi, B., 2017. Vision-based pest detection based on SVM classification method. Computers and Electronics in Agriculture 137, 52–58.\nEfron, B., 2020. Prediction, Estimation, and Attribution. Journal of the American Statistical Association 115, 636–655.\nHowell, O., Wenping, C., Marsland, R., Mehta, P., 2020. Machine learning as ecology. J. Phys. A: Math. Theor. 53, 334001.\nJames, G., Witten, D., Hastie, T., Tibshirani, R., 2021. An Introduction to Statistical Learning: with Applications in R, Springer Texts in Statistics 2ed. Springer-Verlag, New York.\nMelesse, S., Sobratee, N., Workneh, T., 2016. Application of logistic regression statistical technique to evaluate tomato quality subjected to different pre- and post-harvest treatments. Biological Agriculture & Horticulture 32, 277–287.\nOtukei, J.R., Blaschke, T., 2010. Land cover change assessment using decision trees, support vector machines and maximum likelihood classification algorithms. International Journal of Applied Earth Observation and Geoinformation, Supplement Issue on “Remote Sensing for Africa – A Special Collection from the African Association for Remote Sensing of the Environment (AARSE)” 12, S27–S31."
  },
  {
    "objectID": "schedule.html#harper-adams-data-science",
    "href": "schedule.html#harper-adams-data-science",
    "title": "Schedule",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#single-layer-network-on-hitters-data",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#single-layer-network-on-hitters-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Single Layer Network on Hitters Data",
    "text": "Single Layer Network on Hitters Data\nWe start by fitting the models in Section 10.6 on the Hitters data.\n\nHitters = load_data('Hitters').dropna()\nn = Hitters.shape[0]\n\nWe will fit two linear models (least squares and lasso) and compare their performance to that of a neural network. For this comparison we will use mean absolute error on a validation dataset. \\[\\begin{equation*}\n\\begin{split}\n\\mbox{MAE}(y,\\hat{y}) = \\frac{1}{n} \\sum_{i=1}^n |y_i-\\hat{y}_i|.\n\\end{split}\n\\end{equation*}\\] We set up the model matrix and the response.\n\nmodel = MS(Hitters.columns.drop('Salary'), intercept=False)\nX = model.fit_transform(Hitters).to_numpy()\nY = Hitters['Salary'].to_numpy()\n\nThe to_numpy() method above converts pandas data frames or series to numpy arrays. We do this because we will need to use sklearn to fit the lasso model, and it requires this conversion. We also use a linear regression method from sklearn, rather than the method in Chapter~3 from statsmodels, to facilitate the comparisons.\nWe now split the data into test and training, fixing the random state used by sklearn to do the split.\n\n(X_train, \n X_test,\n Y_train,\n Y_test) = train_test_split(X,\n                            Y,\n                            test_size=1/3,\n                            random_state=1)\n\n\nLinear Models\nWe fit the linear model and evaluate the test error directly.\n\nhit_lm = LinearRegression().fit(X_train, Y_train)\nYhat_test = hit_lm.predict(X_test)\nnp.abs(Yhat_test - Y_test).mean()\n\nNext we fit the lasso using sklearn. We are using mean absolute error to select and evaluate a model, rather than mean squared error. The specialized solver we used in Section 6.5.2 uses only mean squared error. So here, with a bit more work, we create a cross-validation grid and perform the cross-validation directly.\nWe encode a pipeline with two steps: we first normalize the features using a StandardScaler() transform, and then fit the lasso without further normalization.\n\nscaler = StandardScaler(with_mean=True, with_std=True)\nlasso = Lasso(warm_start=True, max_iter=30000)\nstandard_lasso = Pipeline(steps=[('scaler', scaler),\n                                 ('lasso', lasso)])\n\nWe need to create a grid of values for \\(\\lambda\\). As is common practice, we choose a grid of 100 values of \\(\\lambda\\), uniform on the log scale from lam_max down to 0.01*lam_max. Here lam_max is the smallest value of \\(\\lambda\\) with an all-zero solution. This value equals the largest absolute inner-product between any predictor and the (centered) response. {The derivation of this result is beyond the scope of this book.}\n\nX_s = scaler.fit_transform(X_train)\nn = X_s.shape[0]\nlam_max = np.fabs(X_s.T.dot(Y_train - Y_train.mean())).max() / n\nparam_grid = {'alpha': np.exp(np.linspace(0, np.log(0.01), 100))\n             * lam_max}\n\nNote that we had to transform the data first, since the scale of the variables impacts the choice of \\(\\lambda\\). We now perform cross-validation using this sequence of \\(\\lambda\\) values.\n\ncv = KFold(10,\n           shuffle=True,\n           random_state=1)\ngrid = GridSearchCV(lasso,\n                    param_grid,\n                    cv=cv,\n                    scoring='neg_mean_absolute_error')\ngrid.fit(X_train, Y_train);\n\nWe extract the lasso model with best cross-validated mean absolute error, and evaluate its performance on X_test and Y_test, which were not used in cross-validation.\n\ntrained_lasso = grid.best_estimator_\nYhat_test = trained_lasso.predict(X_test)\nnp.fabs(Yhat_test - Y_test).mean()\n\nThis is similar to the results we got for the linear model fit by least squares. However, these results can vary a lot for different train/test splits; we encourage the reader to try a different seed in code block 12 and rerun the subsequent code up to this point.\n\n\nSpecifying a Network: Classes and Inheritance\nTo fit the neural network, we first set up a model structure that describes the network. Doing so requires us to define new classes specific to the model we wish to fit. Typically this is done in pytorch by sub-classing a generic representation of a network, which is the approach we take here. Although this example is simple, we will go through the steps in some detail, since it will serve us well for the more complex examples to follow.\n\nclass HittersModel(nn.Module):\n\n    def __init__(self, input_size):\n        super(HittersModel, self).__init__()\n        self.flatten = nn.Flatten()\n        self.sequential = nn.Sequential(\n            nn.Linear(input_size, 50),\n            nn.ReLU(),\n            nn.Dropout(0.4),\n            nn.Linear(50, 1))\n\n    def forward(self, x):\n        x = self.flatten(x)\n        return torch.flatten(self.sequential(x))\n\nThe class statement identifies the code chunk as a declaration for a class HittersModel that inherits from the base class nn.Module. This base class is ubiquitous in torch and represents the mappings in the neural networks.\nIndented beneath the class statement are the methods of this class: in this case __init__ and forward. The __init__ method is called when an instance of the class is created as in the cell below. In the methods, self always refers to an instance of the class. In the __init__ method, we have attached two objects to self as attributes: flatten and sequential. These are used in the forward method to describe the map that this module implements.\nThere is one additional line in the __init__ method, which is a call to super(). This function allows subclasses (i.e. HittersModel) to access methods of the class they inherit from. For example, the class nn.Module has its own __init__ method, which is different from the HittersModel.__init__() method we’ve written above. Using super() allows us to call the method of the base class. For torch models, we will always be making this super() call as it is necessary for the model to be properly interpreted by torch.\nThe object nn.Module has more methods than simply __init__ and forward. These methods are directly accessible to HittersModel instances because of this inheritance. One such method we will see shortly is the eval() method, used to disable dropout for when we want to evaluate the model on test data.\n\nhit_model = HittersModel(X.shape[1])\n\nThe object self.sequential is a composition of four maps. The first maps the 19 features of Hitters to 50 dimensions, introducing \\(50\\times 19+50\\) parameters for the weights and intercept of the map (often called the bias). This layer is then mapped to a ReLU layer followed by a 40% dropout layer, and finally a linear map down to 1 dimension, again with a bias. The total number of trainable parameters is therefore \\(50\\times 19+50+50+1=1051\\).\nThe package torchinfo provides a summary() function that neatly summarizes this information. We specify the size of the input and see the size of each tensor as it passes through layers of the network.\n\nsummary(hit_model, \n        input_size=X_train.shape,\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nWe have truncated the end of the output slightly, here and in subsequent uses.\nWe now need to transform our training data into a form accessible to torch. The basic datatype in torch is a tensor, which is very similar to an ndarray from early chapters. We also note here that torch typically works with 32-bit (single precision) rather than 64-bit (double precision) floating point numbers. We therefore convert our data to np.float32 before forming the tensor. The \\(X\\) and \\(Y\\) tensors are then arranged into a Dataset recognized by torch using TensorDataset().\n\nX_train_t = torch.tensor(X_train.astype(np.float32))\nY_train_t = torch.tensor(Y_train.astype(np.float32))\nhit_train = TensorDataset(X_train_t, Y_train_t)\n\nWe do the same for the test data.\n\nX_test_t = torch.tensor(X_test.astype(np.float32))\nY_test_t = torch.tensor(Y_test.astype(np.float32))\nhit_test = TensorDataset(X_test_t, Y_test_t)\n\nFinally, this dataset is passed to a DataLoader() which ultimately passes data into our network. While this may seem like a lot of overhead, this structure is helpful for more complex tasks where data may live on different machines, or where data must be passed to a GPU. We provide a helper function SimpleDataModule() in ISLP to make this task easier for standard usage. One of its arguments is num_workers, which indicates how many processes we will use for loading the data. For small data like Hitters this will have little effect, but it does provide an advantage for the MNIST and CIFAR100 examples below. The torch package will inspect the process running and determine a maximum number of workers. {This depends on the computing hardware and the number of cores available.} We’ve included a function rec_num_workers() to compute this so we know how many workers might be reasonable (here the max was 16).\n\nmax_num_workers = rec_num_workers()\n\nThe general training setup in pytorch_lightning involves training, validation and test data. These are each represented by different data loaders. During each epoch, we run a training step to learn the model and a validation step to track the error. The test data is typically used at the end of training to evaluate the model.\nIn this case, as we had split only into test and training, we’ll use the test data as validation data with the argument validation=hit_test. The validation argument can be a float between 0 and 1, an integer, or a Dataset. If a float (respectively, integer), it is interpreted as a percentage (respectively number) of the training observations to be used for validation. If it is a Dataset, it is passed directly to a data loader.\n\nhit_dm = SimpleDataModule(hit_train,\n                          hit_test,\n                          batch_size=32,\n                          num_workers=min(4, max_num_workers),\n                          validation=hit_test)\n\nNext we must provide a pytorch_lightning module that controls the steps performed during the training process. We provide methods for our SimpleModule() that simply record the value of the loss function and any additional metrics at the end of each epoch. These operations are controlled by the methods SimpleModule.[training/test/validation]_step(), though we will not be modifying these in our examples.\n\nhit_module = SimpleModule.regression(hit_model,\n                           metrics={'mae':MeanAbsoluteError()})\n\nBy using the SimpleModule.regression() method, we indicate that we will use squared-error loss as in (10.23). We have also asked for mean absolute error to be tracked as well in the metrics that are logged.\nWe log our results via CSVLogger(), which in this case stores the results in a CSV file within a directory logs/hitters. After the fitting is complete, this allows us to load the results as a pd.DataFrame() and visualize them below. There are several ways to log the results within pytorch_lightning, though we will not cover those here in detail.\n\nhit_logger = CSVLogger('logs', name='hitters')\n\nFinally we are ready to train our model and log the results. We use the Trainer() object from pytorch_lightning to do this work. The argument datamodule=hit_dm tells the trainer how training/validation/test logs are produced, while the first argument hit_module specifies the network architecture as well as the training/validation/test steps. The callbacks argument allows for several tasks to be carried out at various points while training a model. Here our ErrorTracker() callback will enable us to compute validation error while training and, finally, the test error. We now fit the model for 50 epochs.\n\nhit_trainer = Trainer(deterministic=True,\n                      max_epochs=50,\n                      log_every_n_steps=5,\n                      logger=hit_logger,\n                      callbacks=[ErrorTracker()])\nhit_trainer.fit(hit_module, datamodule=hit_dm)\n\nAt each step of SGD, the algorithm randomly selects 32 training observations for the computation of the gradient. Recall from Section 10.7 that an epoch amounts to the number of SGD steps required to process \\(n\\) observations. Since the training set has \\(n=175\\), and we specified a batch_size of 32 in the construction of hit_dm, an epoch is \\(175/32=5.5\\) SGD steps.\nAfter having fit the model, we can evaluate performance on our test data using the test() method of our trainer.\n\nhit_trainer.test(hit_module, datamodule=hit_dm)\n\nThe results of the fit have been logged into a CSV file. We can find the results specific to this run in the experiment.metrics_file_path attribute of our logger. Note that each time the model is fit, the logger will output results into a new subdirectory of our directory logs/hitters.\nWe now create a plot of the MAE (mean absolute error) as a function of the number of epochs. First we retrieve the logged summaries.\n\nhit_results = pd.read_csv(hit_logger.experiment.metrics_file_path)\n\nSince we will produce similar plots in later examples, we write a simple generic function to produce this plot.\n\ndef summary_plot(results,\n                 ax,\n                 col='loss',\n                 valid_legend='Validation',\n                 training_legend='Training',\n                 ylabel='Loss',\n                 fontsize=20):\n    for (column,\n         color,\n         label) in zip([f'train_{col}_epoch',\n                        f'valid_{col}'],\n                       ['black',\n                        'red'],\n                       [training_legend,\n                        valid_legend]):\n        results.plot(x='epoch',\n                     y=column,\n                     label=label,\n                     marker='o',\n                     color=color,\n                     ax=ax)\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel(ylabel)\n    return ax\n\nWe now set up our axes, and use our function to produce the MAE plot.\n\nfig, ax = subplots(1, 1, figsize=(6, 6))\nax = summary_plot(hit_results,\n                  ax,\n                  col='mae',\n                  ylabel='MAE',\n                  valid_legend='Validation (=Test)')\nax.set_ylim([0, 400])\nax.set_xticks(np.linspace(0, 50, 11).astype(int));\n\nWe can predict directly from the final model, and evaluate its performance on the test data. Before fitting, we call the eval() method of hit_model. This tells torch to effectively consider this model to be fitted, so that we can use it to predict on new data. For our model here, the biggest change is that the dropout layers will be turned off, i.e. no weights will be randomly dropped in predicting on new data.\n\nhit_model.eval() \npreds = hit_module(X_test_t)\ntorch.abs(Y_test_t - preds).mean()\n\n\n\nCleanup\nIn setting up our data module, we had initiated several worker processes that will remain running. We delete all references to the torch objects to ensure these processes will be killed.\n\ndel(Hitters,\n    hit_model, hit_dm,\n    hit_logger,\n    hit_test, hit_train,\n    X, Y,\n    X_test, X_train,\n    Y_test, Y_train,\n    X_test_t, Y_test_t,\n    hit_trainer, hit_module)"
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#multilayer-network-on-the-mnist-digit-data",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#multilayer-network-on-the-mnist-digit-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Multilayer Network on the MNIST Digit Data",
    "text": "Multilayer Network on the MNIST Digit Data\nThe torchvision package comes with a number of example datasets, including the MNIST digit data. Our first step is to retrieve the training and test data sets; the MNIST() function within torchvision.datasets is provided for this purpose. The data will be downloaded the first time this function is executed, and stored in the directory data/MNIST.\n\n(mnist_train, \n mnist_test) = [MNIST(root='data',\n                      train=train,\n                      download=True,\n                      transform=ToTensor())\n                for train in [True, False]]\nmnist_train\n\nThere are 60,000 images in the training data and 10,000 in the test data. The images are \\(28\\times 28\\), and stored as a matrix of pixels. We need to transform each one into a vector.\nNeural networks are somewhat sensitive to the scale of the inputs, much as ridge and lasso regularization are affected by scaling. Here the inputs are eight-bit grayscale values between 0 and 255, so we rescale to the unit interval. {Note: eight bits means \\(2^8\\), which equals 256. Since the convention is to start at \\(0\\), the possible values range from \\(0\\) to \\(255\\).} This transformation, along with some reordering of the axes, is performed by the ToTensor() transform from the torchvision.transforms package.\nAs in our Hitters example, we form a data module from the training and test datasets, setting aside 20% of the training images for validation.\n\nmnist_dm = SimpleDataModule(mnist_train,\n                            mnist_test,\n                            validation=0.2,\n                            num_workers=max_num_workers,\n                            batch_size=256)\n\nLet’s take a look at the data that will get fed into our network. We loop through the first few chunks of the test dataset, breaking after 2 batches:\n\nfor idx, (X_ ,Y_) in enumerate(mnist_dm.train_dataloader()):\n    print('X: ', X_.shape)\n    print('Y: ', Y_.shape)\n    if idx >= 1:\n        break\n\nWe see that the \\(X\\) for each batch consists of 256 images of size 1x28x28. Here the 1 indicates a single channel (greyscale). For RGB images such as CIFAR100 below, we will see that the 1 in the size will be replaced by 3 for the three RGB channels.\nNow we are ready to specify our neural network.\n\nclass MNISTModel(nn.Module):\n    def __init__(self):\n        super(MNISTModel, self).__init__()\n        self.layer1 = nn.Sequential(\n            nn.Flatten(),\n            nn.Linear(28*28, 256),\n            nn.ReLU(),\n            nn.Dropout(0.4))\n        self.layer2 = nn.Sequential(\n            nn.Linear(256, 128),\n            nn.ReLU(),\n            nn.Dropout(0.3))\n        self._forward = nn.Sequential(\n            self.layer1,\n            self.layer2,\n            nn.Linear(128, 10))\n    def forward(self, x):\n        return self._forward(x)\n\nWe see that in the first layer, each 1x28x28 image is flattened, then mapped to 256 dimensions where we apply a ReLU activation with 40% dropout. A second layer maps the first layer’s output down to 128 dimensions, applying a ReLU activation with 30% dropout. Finally, the 128 dimensions are mapped down to 10, the number of classes in the MNIST data.\n\nmnist_model = MNISTModel()\n\nWe can check that the model produces output of expected size based on our existing batch X_ above.\n\nmnist_model(X_).size()\n\nLet’s take a look at the summary of the model. Instead of an input_size we can pass a tensor of correct shape. In this case, we pass through the final batched X_ from above.\n\nsummary(mnist_model,\n        input_data=X_,\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nHaving set up both the model and the data module, fitting this model is now almost identical to the Hitters example. In contrast to our regression model, here we will use the SimpleModule.classification() method which uses the cross-entropy loss function instead of mean squared error.\n\nmnist_module = SimpleModule.classification(mnist_model)\nmnist_logger = CSVLogger('logs', name='MNIST')\n\nNow we are ready to go. The final step is to supply training data, and fit the model.\n\nmnist_trainer = Trainer(deterministic=True,\n                        max_epochs=30,\n                        logger=mnist_logger,\n                        callbacks=[ErrorTracker()])\nmnist_trainer.fit(mnist_module,\n                  datamodule=mnist_dm)\n\nWe have suppressed the output here, which is a progress report on the fitting of the model, grouped by epoch. This is very useful, since on large datasets fitting can take time. Fitting this model took 245 seconds on a MacBook Pro with an Apple M1 Pro chip with 10 cores and 16 GB of RAM. Here we specified a validation split of 20%, so training is actually performed on 80% of the 60,000 observations in the training set. This is an alternative to actually supplying validation data, like we did for the Hitters data. SGD uses batches of 256 observations in computing the gradient, and doing the arithmetic, we see that an epoch corresponds to 188 gradient steps.\nSimpleModule.classification() includes an accuracy metric by default. Other classification metrics can be added from torchmetrics. We will use our summary_plot() function to display accuracy across epochs.\n\nmnist_results = pd.read_csv(mnist_logger.experiment.metrics_file_path)\nfig, ax = subplots(1, 1, figsize=(6, 6))\nsummary_plot(mnist_results,\n             ax,\n             col='accuracy',\n             ylabel='Accuracy')\nax.set_ylim([0.5, 1])\nax.set_ylabel('Accuracy')\nax.set_xticks(np.linspace(0, 30, 7).astype(int));\n\nOnce again we evaluate the accuracy using the test() method of our trainer. This model achieves 97% accuracy on the test data.\n\nmnist_trainer.test(mnist_module,\n                   datamodule=mnist_dm)\n\nTable 10.1 also reports the error rates resulting from LDA (Chapter 4) and multiclass logistic regression. For LDA we refer the reader to Section 4.7.3. Although we could use the sklearn function LogisticRegression() to fit\nmulticlass logistic regression, we are set up here to fit such a model with torch. We just have an input layer and an output layer, and omit the hidden layers!\n\nclass MNIST_MLR(nn.Module):\n    def __init__(self):\n        super(MNIST_MLR, self).__init__()\n        self.linear = nn.Sequential(nn.Flatten(),\n                                    nn.Linear(784, 10))\n    def forward(self, x):\n        return self.linear(x)\n\nmlr_model = MNIST_MLR()\nmlr_module = SimpleModule.classification(mlr_model)\nmlr_logger = CSVLogger('logs', name='MNIST_MLR')\n\n\nmlr_trainer = Trainer(deterministic=True,\n                      max_epochs=30,\n                      callbacks=[ErrorTracker()])\nmlr_trainer.fit(mlr_module, datamodule=mnist_dm)\n\nWe fit the model just as before and compute the test results.\n\nmlr_trainer.test(mlr_module,\n                 datamodule=mnist_dm)\n\nThe accuracy is above 90% even for this pretty simple model.\nAs in the Hitters example, we delete some of the objects we created above.\n\ndel(mnist_test,\n    mnist_train,\n    mnist_model,\n    mnist_dm,\n    mnist_trainer,\n    mnist_module,\n    mnist_results,\n    mlr_model,\n    mlr_module,\n    mlr_trainer)"
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#convolutional-neural-networks",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#convolutional-neural-networks",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Convolutional Neural Networks",
    "text": "Convolutional Neural Networks\nIn this section we fit a CNN to the CIFAR100 data, which is available in the torchvision package. It is arranged in a similar fashion as the MNIST data.\n\n(cifar_train, \n cifar_test) = [CIFAR100(root=\"data\",\n                         train=train,\n                         download=True)\n             for train in [True, False]]\n\n\ntransform = ToTensor()\ncifar_train_X = torch.stack([transform(x) for x in\n                            cifar_train.data])\ncifar_test_X = torch.stack([transform(x) for x in\n                            cifar_test.data])\ncifar_train = TensorDataset(cifar_train_X,\n                            torch.tensor(cifar_train.targets))\ncifar_test = TensorDataset(cifar_test_X,\n                            torch.tensor(cifar_test.targets))\n\nThe CIFAR100 dataset consists of 50,000 training images, each represented by a three-dimensional tensor: each three-color image is represented as a set of three channels, each of which consists of \\(32\\times 32\\) eight-bit pixels. We standardize as we did for the digits, but keep the array structure. This is accomplished with the ToTensor() transform.\nCreating the data module is similar to the MNIST example.\n\ncifar_dm = SimpleDataModule(cifar_train,\n                            cifar_test,\n                            validation=0.2,\n                            num_workers=max_num_workers,\n                            batch_size=128)\n\nWe again look at the shape of typical batches in our data loaders.\n\nfor idx, (X_ ,Y_) in enumerate(cifar_dm.train_dataloader()):\n    print('X: ', X_.shape)\n    print('Y: ', Y_.shape)\n    if idx >= 1:\n        break\n\nBefore we start, we look at some of the training images; similar code produced Figure 10.5 on page 445. The example below also illustrates that TensorDataset objects can be indexed with integers — we are choosing random images from the training data by indexing cifar_train. In order to display correctly, we must reorder the dimensions by a call to np.transpose().\n\nfig, axes = subplots(5, 5, figsize=(10,10))\nrng = np.random.default_rng(4)\nindices = rng.choice(np.arange(len(cifar_train)), 25,\n                     replace=False).reshape((5,5))\nfor i in range(5):\n    for j in range(5):\n        idx = indices[i,j]\n        axes[i,j].imshow(np.transpose(cifar_train[idx][0],\n                                      [1,2,0]),\n                                      interpolation=None)\n        axes[i,j].set_xticks([])\n        axes[i,j].set_yticks([])\n\nHere the imshow() method recognizes from the shape of its argument that it is a 3-dimensional array, with the last dimension indexing the three RGB color channels.\nWe specify a moderately-sized CNN for demonstration purposes, similar in structure to Figure 10.8. We use several layers, each consisting of convolution, ReLU, and max-pooling steps. We first define a module that defines one of these layers. As in our previous examples, we overwrite the __init__() and forward() methods of nn.Module. This user-defined module can now be used in ways just like nn.Linear() or nn.Dropout().\n\nclass BuildingBlock(nn.Module):\n\n    def __init__(self,\n                 in_channels,\n                 out_channels):\n\n        super(BuildingBlock, self).__init__()\n        self.conv = nn.Conv2d(in_channels=in_channels,\n                              out_channels=out_channels,\n                              kernel_size=(3,3),\n                              padding='same')\n        self.activation = nn.ReLU()\n        self.pool = nn.MaxPool2d(kernel_size=(2,2))\n\n    def forward(self, x):\n        return self.pool(self.activation(self.conv(x)))\n\nNotice that we used the padding = \"same\" argument to nn.Conv2d(), which ensures that the output channels have the same dimension as the input channels. There are 32 channels in the first hidden layer, in contrast to the three channels in the input layer. We use a \\(3\\times 3\\) convolution filter for each channel in all the layers. Each convolution is followed by a max-pooling layer over \\(2\\times2\\) blocks.\nIn forming our deep learning model for the CIFAR100 data, we use several of our BuildingBlock() modules sequentially. This simple example illustrates some of the power of torch. Users can define modules of their own, which can be combined in other modules. Ultimately, everything is fit by a generic trainer.\n\nclass CIFARModel(nn.Module):\n\n    def __init__(self):\n        super(CIFARModel, self).__init__()\n        sizes = [(3,32),\n                 (32,64),\n                 (64,128),\n                 (128,256)]\n        self.conv = nn.Sequential(*[BuildingBlock(in_, out_)\n                                    for in_, out_ in sizes])\n\n        self.output = nn.Sequential(nn.Dropout(0.5),\n                                    nn.Linear(2*2*256, 512),\n                                    nn.ReLU(),\n                                    nn.Linear(512, 100))\n    def forward(self, x):\n        val = self.conv(x)\n        val = torch.flatten(val, start_dim=1)\n        return self.output(val)\n\nWe build the model and look at the summary. (We had created examples of X_ earlier.)\n\ncifar_model = CIFARModel()\nsummary(cifar_model,\n        input_data=X_,\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nThe total number of trainable parameters is 964,516. By studying the size of the parameters, we can see that the channels halve in both dimensions after each of these max-pooling operations. After the last of these we have a layer with 256 channels of dimension \\(2\\times 2\\). These are then flattened to a dense layer of size 1,024; in other words, each of the \\(2\\times 2\\) matrices is turned into a \\(4\\)-vector, and put side-by-side in one layer. This is followed by a dropout regularization layer, then another dense layer of size 512, and finally, the output layer.\nUp to now, we have been using a default optimizer in SimpleModule(). For these data, experiments show that a smaller learning rate performs better than the default 0.01. We use a custom optimizer here with a learning rate of 0.001. Besides this, the logging and training follow a similar pattern to our previous examples. The optimizer takes an argument params that informs the optimizer which parameters are involved in SGD (stochastic gradient descent).\nWe saw earlier that entries of a module’s parameters are tensors. In passing the parameters to the optimizer we are doing more than simply passing arrays; part of the structure of the graph is encoded in the tensors themselves.\n\ncifar_optimizer = RMSprop(cifar_model.parameters(), lr=0.001)\ncifar_module = SimpleModule.classification(cifar_model,\n                                    optimizer=cifar_optimizer)\ncifar_logger = CSVLogger('logs', name='CIFAR100')\n\n\ncifar_trainer = Trainer(deterministic=True,\n                        max_epochs=30,\n                        logger=cifar_logger,\n                        callbacks=[ErrorTracker()])\ncifar_trainer.fit(cifar_module,\n                  datamodule=cifar_dm)\n\nThis model takes 10 minutes or more to run and achieves about 42% accuracy on the test data. Although this is not terrible for 100-class data (a random classifier gets 1% accuracy), searching the web we see results around 75%. Typically it takes a lot of architecture carpentry, fiddling with regularization, and time, to achieve such results.\nLet’s take a look at the validation and training accuracy across epochs.\n\nlog_path = cifar_logger.experiment.metrics_file_path\ncifar_results = pd.read_csv(log_path)\nfig, ax = subplots(1, 1, figsize=(6, 6))\nsummary_plot(cifar_results,\n             ax,\n             col='accuracy',\n             ylabel='Accuracy')\nax.set_xticks(np.linspace(0, 10, 6).astype(int))\nax.set_ylabel('Accuracy')\nax.set_ylim([0, 1]);\n\nFinally, we evaluate our model on our test data.\n\ncifar_trainer.test(cifar_module,\n                   datamodule=cifar_dm)\n\n\nHardware Acceleration\nAs deep learning has become ubiquitous in machine learning, hardware manufacturers have produced special libraries that can often speed up the gradient-descent steps.\nFor instance, Mac OS devices with the M1 chip may have the Metal programming framework enabled, which can speed up the torch computations. We present an example of how to use this acceleration.\nThe main changes are to the Trainer() call as well as to the metrics that will be evaluated on the data. These metrics must be told where the data will be located at evaluation time. This is accomplished with a call to the to() method of the metrics.\n\ntry:\n    for name, metric in cifar_module.metrics.items():\n        cifar_module.metrics[name] = metric.to('mps')\n    cifar_trainer_mps = Trainer(accelerator='mps',\n                                deterministic=True,\n                                max_epochs=30)\n    cifar_trainer_mps.fit(cifar_module,\n                          datamodule=cifar_dm)\n    cifar_trainer_mps.test(cifar_module,\n                          datamodule=cifar_dm)\nexcept:\n    pass\n\nThis yields approximately two- or three-fold acceleration for each epoch. We have protected this code block using try: and except: clauses; if it works, we get the speedup, if it fails, nothing happens."
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#using-pretrained-cnn-models",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#using-pretrained-cnn-models",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Using Pretrained CNN Models",
    "text": "Using Pretrained CNN Models\nWe now show how to use a CNN pretrained on the imagenet database to classify natural images, and demonstrate how we produced Figure 10.10. We copied six JPEG images from a digital photo album into the directory book_images. These images are available from the data section of <www.statlearning.com>, the ISLP book website. Download book_images.zip; when clicked it creates the book_images directory.\nThe pretrained network we use is called resnet50; specification details can be found on the web. We will read in the images, and convert them into the array format expected by the torch software to match the specifications in resnet50. The conversion involves a resize, a crop and then a predefined standardization for each of the three channels. We now read in the images and preprocess them.\n\nresize = Resize((232,232))\ncrop = CenterCrop(224)\nnormalize = Normalize([0.485,0.456,0.406],\n                      [0.229,0.224,0.225])\nimgfiles = sorted([f for f in glob('book_images/*')])\nimgs = torch.stack([torch.div(crop(resize(read_image(f))), 255)\n                    for f in imgfiles])\nimgs = normalize(imgs)\nimgs.size()\n\nWe now set up the trained network with the weights we read in code block~6. The model has 50 layers, with a fair bit of complexity.\n\nresnet_model = resnet50(weights=ResNet50_Weights.DEFAULT)\nsummary(resnet_model,\n        input_data=imgs,\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nWe set the mode to eval() to ensure that the model is ready to predict on new data.\n\nresnet_model.eval()\n\nInspecting the output above, we see that when setting up the resnet_model, the authors defined a Bottleneck, much like our BuildingBlock module.\nWe now feed our six images through the fitted network.\n\nimg_preds = resnet_model(imgs)\n\nLet’s look at the predicted probabilities for each of the top 3 choices. First we compute the probabilities by applying the softmax to the logits in img_preds. Note that we have had to call the detach() method on the tensor img_preds in order to convert it to our a more familiar ndarray.\n\nimg_probs = np.exp(np.asarray(img_preds.detach()))\nimg_probs /= img_probs.sum(1)[:,None]\n\nIn order to see the class labels, we must download the index file associated with imagenet. {This is avalable from the book website and s3.amazonaws.com/deep-learning-models/image-models/imagenet_class_index.json.}\n\nlabs = json.load(open('imagenet_class_index.json'))\nclass_labels = pd.DataFrame([(int(k), v[1]) for k, v in \n                           labs.items()],\n                           columns=['idx', 'label'])\nclass_labels = class_labels.set_index('idx')\nclass_labels = class_labels.sort_index()\n\nWe’ll now construct a data frame for each image file with the labels with the three highest probabilities as estimated by the model above.\n\nfor i, imgfile in enumerate(imgfiles):\n    img_df = class_labels.copy()\n    img_df['prob'] = img_probs[i]\n    img_df = img_df.sort_values(by='prob', ascending=False)[:3]\n    print(f'Image: {imgfile}')\n    print(img_df.reset_index().drop(columns=['idx']))\n\nWe see that the model is quite confident about Flamingo.jpg, but a little less so for the other images.\nWe end this section with our usual cleanup.\n\ndel(cifar_test,\n    cifar_train,\n    cifar_dm,\n    cifar_module,\n    cifar_logger,\n    cifar_optimizer,\n    cifar_trainer)"
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#imdb-document-classification",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#imdb-document-classification",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "IMDB Document Classification",
    "text": "IMDB Document Classification\nWe now implement models for sentiment classification (Section 10.4) on the IMDB dataset. As mentioned above code block~8, we are using a preprocessed version of the IMDB dataset found in the keras package. As keras uses tensorflow, a different tensor and deep learning library, we have converted the data to be suitable for torch. The code used to convert from keras is available in the module ISLP.torch._make_imdb. It requires some of the keras packages to run. These data use a dictionary of size 10,000.\nWe have stored three different representations of the review data for this lab:\n\nload_tensor(), a sparse tensor version usable by torch;\nload_sparse(), a sparse matrix version usable by sklearn, since we will compare with a lasso fit;\nload_sequential(), a padded version of the original sequence representation, limited to the last 500 words of each review.\n\n\n(imdb_seq_train,\n imdb_seq_test) = load_sequential(root='data/IMDB')\npadded_sample = np.asarray(imdb_seq_train.tensors[0][0])\nsample_review = padded_sample[padded_sample > 0][:12]\nsample_review[:12]\n\nThe datasets imdb_seq_train and imdb_seq_test are both instances of the class TensorDataset. The tensors used to construct them can be found in the tensors attribute, with the first tensor the features X and the second the outcome Y. We have taken the first row of features and stored it as padded_sample. In the preprocessing used to form these data, sequences were padded with 0s in the beginning if they were not long enough, hence we remove this padding by restricting to entries where padded_sample > 0. We then provide the first 12 words of the sample review.\nWe can find these words in the lookup dictionary from the ISLP.torch.imdb module.\n\nlookup = load_lookup(root='data/IMDB')\n' '.join(lookup[i] for i in sample_review)\n\nFor our first model, we have created a binary feature for each of the 10,000 possible words in the dataset, with an entry of one in the \\(i,j\\) entry if word \\(j\\) appears in review \\(i\\). As most reviews are quite short, such a feature matrix has over 98% zeros. These data are accessed using load_tensor() from the ISLP library.\n\nmax_num_workers=10\n(imdb_train,\n imdb_test) = load_tensor(root='data/IMDB')\nimdb_dm = SimpleDataModule(imdb_train,\n                           imdb_test,\n                           validation=2000,\n                           num_workers=min(6, max_num_workers),\n                           batch_size=512)\n\nWe’ll use a two-layer model for our first model.\n\nclass IMDBModel(nn.Module):\n\n    def __init__(self, input_size):\n        super(IMDBModel, self).__init__()\n        self.dense1 = nn.Linear(input_size, 16)\n        self.activation = nn.ReLU()\n        self.dense2 = nn.Linear(16, 16)\n        self.output = nn.Linear(16, 1)\n\n    def forward(self, x):\n        val = x\n        for _map in [self.dense1,\n                     self.activation,\n                     self.dense2,\n                     self.activation,\n                     self.output]:\n            val = _map(val)\n        return torch.flatten(val)\n\nWe now instantiate our model and look at a summary.\n\nimdb_model = IMDBModel(imdb_test.tensors[0].size()[1])\nsummary(imdb_model,\n        input_size=imdb_test.tensors[0].size(),\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nWe’ll again use a smaller learning rate for these data, hence we pass an optimizer to the SimpleModule. Since the reviews are classified into positive or negative sentiment, we use SimpleModule.binary_classification(). {Our use of binary_classification() instead of classification() is due to some subtlety in how torchmetrics.Accuracy() works, as well as the data type of the targets.}\n\nimdb_optimizer = RMSprop(imdb_model.parameters(), lr=0.001)\nimdb_module = SimpleModule.binary_classification(\n                         imdb_model,\n                         optimizer=imdb_optimizer)\n\nHaving loaded the datasets into a data module and created a SimpleModule, the remaining steps are familiar.\n\nimdb_logger = CSVLogger('logs', name='IMDB')\nimdb_trainer = Trainer(deterministic=True,\n                       max_epochs=30,\n                       logger=imdb_logger,\n                       callbacks=[ErrorTracker()])\nimdb_trainer.fit(imdb_module,\n                 datamodule=imdb_dm)\n\nEvaluating the test error yields roughly 86% accuracy.\n\ntest_results = imdb_trainer.test(imdb_module, datamodule=imdb_dm)\ntest_results\n\n\nComparison to Lasso\nWe now fit a lasso logistic regression model using LogisticRegression() from sklearn. Since sklearn does not recognize the sparse tensors of torch, we use a sparse matrix that is recognized by sklearn.\n\n((X_train, Y_train),\n (X_valid, Y_valid),\n (X_test, Y_test)) = load_sparse(validation=2000,\n                                 random_state=0,\n                                 root='data/IMDB')\n\nSimilar to what we did in Section 10.9.1, we construct a series of 50 values for the lasso reguralization parameter \\(\\lambda\\).\n\nlam_max = np.abs(X_train.T * (Y_train - Y_train.mean())).max()\nlam_val = lam_max * np.exp(np.linspace(np.log(1),\n                                       np.log(1e-4), 50))\n\nWith LogisticRegression() the regularization parameter \\(C\\) is specified as the inverse of \\(\\lambda\\). There are several solvers for logistic regression; here we use liblinear which works well with the sparse input format.\n\nlogit = LogisticRegression(penalty='l1', \n                           C=1/lam_max,\n                           solver='liblinear',\n                           warm_start=True,\n                           fit_intercept=True)\n\nThe path of 50 values takes approximately 40 seconds to run.\n\ncoefs = []\nintercepts = []\n\nfor l in lam_val:\n    logit.C = 1/l\n    logit.fit(X_train, Y_train)\n    coefs.append(logit.coef_.copy())\n    intercepts.append(logit.intercept_)\n\nThe coefficient and intercepts have an extraneous dimension which can be removed by the np.squeeze() function.\n\ncoefs = np.squeeze(coefs)\nintercepts = np.squeeze(intercepts)\n\nWe’ll now make a plot to compare our neural network results with the lasso.\n\n%%capture\nfig, axes = subplots(1, 2, figsize=(16, 8), sharey=True)\nfor ((X_, Y_),\n     data_,\n     color) in zip([(X_train, Y_train),\n                    (X_valid, Y_valid),\n                    (X_test, Y_test)],\n                    ['Training', 'Validation', 'Test'],\n                    ['black', 'red', 'blue']):\n    linpred_ = X_ * coefs.T + intercepts[None,:]\n    label_ = np.array(linpred_ > 0)\n    accuracy_ = np.array([np.mean(Y_ == l) for l in label_.T])\n    axes[0].plot(-np.log(lam_val / X_train.shape[0]),\n                 accuracy_,\n                 '.--',\n                 color=color,\n                 markersize=13,\n                 linewidth=2,\n                 label=data_)\naxes[0].legend()\naxes[0].set_xlabel(r'$-\\log(\\lambda)$', fontsize=20)\naxes[0].set_ylabel('Accuracy', fontsize=20)\n\nNotice the use of %%capture, which suppresses the displaying of the partially completed figure. This is useful when making a complex figure, since the steps can be spread across two or more cells. We now add a plot of the lasso accuracy, and display the composed figure by simply entering its name at the end of the cell.\n\nimdb_results = pd.read_csv(imdb_logger.experiment.metrics_file_path)\nsummary_plot(imdb_results,\n             axes[1],\n             col='accuracy',\n             ylabel='Accuracy')\naxes[1].set_xticks(np.linspace(0, 30, 7).astype(int))\naxes[1].set_ylabel('Accuracy', fontsize=20)\naxes[1].set_xlabel('Epoch', fontsize=20)\naxes[1].set_ylim([0.5, 1]);\naxes[1].axhline(test_results[0]['test_accuracy'],\n                color='blue',\n                linestyle='--',\n                linewidth=3)\nfig\n\nFrom the graphs we see that the accuracy of the lasso logistic regression peaks at about \\(0.88\\), as it does for the neural network.\nOnce again, we end with a cleanup.\n\ndel(imdb_model,\n    imdb_trainer,\n    imdb_logger,\n    imdb_dm,\n    imdb_train,\n    imdb_test)"
  },
  {
    "objectID": "python-notebooks/Ch10-deeplearning-lab.html#recurrent-neural-networks",
    "href": "python-notebooks/Ch10-deeplearning-lab.html#recurrent-neural-networks",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Recurrent Neural Networks",
    "text": "Recurrent Neural Networks\nIn this lab we fit the models illustrated in Section 10.5.\n\nSequential Models for Document Classification\nHere we fit a simple LSTM RNN for sentiment prediction to the IMDb movie-review data, as discussed in Section 10.5.1. For an RNN we use the sequence of words in a document, taking their order into account. We loaded the preprocessed data at the beginning of Section 10.9.5. A script that details the preprocessing can be found in the ISLP library. Notably, since more than 90% of the documents had fewer than 500 words, we set the document length to 500. For longer documents, we used the last 500 words, and for shorter documents, we padded the front with blanks.\n\nimdb_seq_dm = SimpleDataModule(imdb_seq_train,\n                               imdb_seq_test,\n                               validation=2000,\n                               batch_size=300,\n                               num_workers=min(6, max_num_workers)\n                               )\n\nThe first layer of the RNN is an embedding layer of size 32, which will be learned during training. This layer one-hot encodes each document as a matrix of dimension \\(500 \\times 10,003\\), and then maps these \\(10,003\\) dimensions down to \\(32\\). {The extra 3 dimensions correspond to commonly occurring non-word entries in the reviews.} Since each word is represented by an integer, this is effectively achieved by the creation of an embedding matrix of size \\(10,003\\times 32\\); each of the 500 integers in the document are then mapped to the appropriate 32 real numbers by indexing the appropriate rows of this matrix.\nThe second layer is an LSTM with 32 units, and the output layer is a single logit for the binary classification task. In the last line of the forward() method below, we take the last 32-dimensional output of the LSTM and map it to our response.\n\nclass LSTMModel(nn.Module):\n    def __init__(self, input_size):\n        super(LSTMModel, self).__init__()\n        self.embedding = nn.Embedding(input_size, 32)\n        self.lstm = nn.LSTM(input_size=32,\n                            hidden_size=32,\n                            batch_first=True)\n        self.dense = nn.Linear(32, 1)\n    def forward(self, x):\n        val, (h_n, c_n) = self.lstm(self.embedding(x))\n        return torch.flatten(self.dense(val[:,-1]))\n\nWe instantiate and take a look at the summary of the model, using the first 10 documents in the corpus.\n\nlstm_model = LSTMModel(X_test.shape[-1])\nsummary(lstm_model,\n        input_data=imdb_seq_train.tensors[0][:10],\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nThe 10,003 is suppressed in the summary, but we see it in the parameter count, since \\(10,003\\times 32=320,096\\).\n\nlstm_module = SimpleModule.binary_classification(lstm_model)\nlstm_logger = CSVLogger('logs', name='IMDB_LSTM')\n\n\nlstm_trainer = Trainer(deterministic=True,\n                       max_epochs=20,\n                       logger=lstm_logger,\n                       callbacks=[ErrorTracker()])\nlstm_trainer.fit(lstm_module,\n                 datamodule=imdb_seq_dm)\n\nThe rest is now similar to other networks we have fit. We track the test performance as the network is fit, and see that it attains 85% accuracy.\n\nlstm_trainer.test(lstm_module, datamodule=imdb_seq_dm)\n\nWe once again show the learning progress, followed by cleanup.\n\nlstm_results = pd.read_csv(lstm_logger.experiment.metrics_file_path)\nfig, ax = subplots(1, 1, figsize=(6, 6))\nsummary_plot(lstm_results,\n             ax,\n             col='accuracy',\n             ylabel='Accuracy')\nax.set_xticks(np.linspace(0, 20, 5).astype(int))\nax.set_ylabel('Accuracy')\nax.set_ylim([0.5, 1])\n\n\ndel(lstm_model,\n    lstm_trainer,\n    lstm_logger,\n    imdb_seq_dm,\n    imdb_seq_train,\n    imdb_seq_test)\n\n\n\nTime Series Prediction\nWe now show how to fit the models in Section 10.5.2 for time series prediction. We first load and standardize the data.\n\nNYSE = load_data('NYSE')\ncols = ['DJ_return', 'log_volume', 'log_volatility']\nX = pd.DataFrame(StandardScaler(\n                     with_mean=True,\n                     with_std=True).fit_transform(NYSE[cols]),\n                 columns=NYSE[cols].columns,\n                 index=NYSE.index)\n\nNext we set up the lagged versions of the data, dropping any rows with missing values using the dropna() method.\n\nfor lag in range(1, 6):\n    for col in cols:\n        newcol = np.zeros(X.shape[0]) * np.nan\n        newcol[lag:] = X[col].values[:-lag]\n        X.insert(len(X.columns), \"{0}_{1}\".format(col, lag), newcol)\nX.insert(len(X.columns), 'train', NYSE['train'])\nX = X.dropna()\n\nFinally, we extract the response, training indicator, and drop the current day’s DJ_return and log_volatility to predict only from previous day’s data.\n\nY, train = X['log_volume'], X['train']\nX = X.drop(columns=['train'] + cols)\nX.columns\n\nWe first fit a simple linear model and compute the \\(R^2\\) on the test data using the score() method.\n\nM = LinearRegression()\nM.fit(X[train], Y[train])\nM.score(X[~train], Y[~train])\n\nWe refit this model, including the factor variable day_of_week. For a categorical series in pandas, we can form the indicators using the get_dummies() method.\n\nX_day = pd.merge(X, \n                 pd.get_dummies(NYSE['day_of_week']),\n                 on='date')\n\nNote that we do not have to reinstantiate the linear regression model as its fit() method accepts a design matrix and a response directly.\n\nM.fit(X_day[train], Y[train])\nM.score(X_day[~train], Y[~train])\n\nThis model achieves an \\(R^2\\) of about 46%.\nTo fit the RNN, we must reshape the data, as it will expect 5 lagged versions of each feature as indicated by the input_shape argument to the layer nn.RNN() below. We first ensure the columns of our data frame are such that a reshaped matrix will have the variables correctly lagged. We use the reindex() method to do this.\nFor an input shape (5,3), each row represents a lagged version of the three variables. The nn.RNN() layer also expects the first row of each observation to be earliest in time, so we must reverse the current order. Hence we loop over range(5,0,-1) below, which is an example of using a slice() to index iterable objects. The general notation is start:end:step.\n\nordered_cols = []\nfor lag in range(5,0,-1):\n    for col in cols:\n        ordered_cols.append('{0}_{1}'.format(col, lag))\nX = X.reindex(columns=ordered_cols)\nX.columns\n\nWe now reshape the data.\n\nX_rnn = X.to_numpy().reshape((-1,5,3))\nX_rnn.shape\n\nBy specifying the first size as -1, numpy.reshape() deduces its size based on the remaining arguments.\nNow we are ready to proceed with the RNN, which uses 12 hidden units, and 10% dropout. After passing through the RNN, we extract the final time point as val[:,-1] in forward() below. This gets passed through a 10% dropout and then flattened through a linear layer.\n\nclass NYSEModel(nn.Module):\n    def __init__(self):\n        super(NYSEModel, self).__init__()\n        self.rnn = nn.RNN(3,\n                          12,\n                          batch_first=True)\n        self.dense = nn.Linear(12, 1)\n        self.dropout = nn.Dropout(0.1)\n    def forward(self, x):\n        val, h_n = self.rnn(x)\n        val = self.dense(self.dropout(val[:,-1]))\n        return torch.flatten(val)\nnyse_model = NYSEModel()\n\nWe fit the model in a similar fashion to previous networks. We supply the fit function with test data as validation data, so that when we monitor its progress and plot the history function we can see the progress on the test data. Of course we should not use this as a basis for early stopping, since then the test performance would be biased.\nWe form the training dataset similar to our Hitters example.\n\ndatasets = []\nfor mask in [train, ~train]:\n    X_rnn_t = torch.tensor(X_rnn[mask].astype(np.float32))\n    Y_t = torch.tensor(Y[mask].astype(np.float32))\n    datasets.append(TensorDataset(X_rnn_t, Y_t))\nnyse_train, nyse_test = datasets\n\nFollowing our usual pattern, we inspect the summary.\n\nsummary(nyse_model,\n        input_data=X_rnn_t,\n        col_names=['input_size',\n                   'output_size',\n                   'num_params'])\n\nWe again put the two datasets into a data module, with a batch size of 64.\n\nnyse_dm = SimpleDataModule(nyse_train,\n                           nyse_test,\n                           num_workers=min(4, max_num_workers),\n                           validation=nyse_test,\n                           batch_size=64)\n\nWe run some data through our model to be sure the sizes match up correctly.\n\nfor idx, (x, y) in enumerate(nyse_dm.train_dataloader()):\n    out = nyse_model(x)\n    print(y.size(), out.size())\n    if idx >= 2:\n        break\n\nWe follow our previous example for setting up a trainer for a regression problem, requesting the \\(R^2\\) metric to be be computed at each epoch.\n\nnyse_optimizer = RMSprop(nyse_model.parameters(),\n                         lr=0.001)\nnyse_module = SimpleModule.regression(nyse_model,\n                                      optimizer=nyse_optimizer,\n                                      metrics={'r2':R2Score()})\n\nFitting the model should by now be familiar. The results on the test data are very similar to the linear AR model.\n\nnyse_trainer = Trainer(deterministic=True,\n                       max_epochs=200,\n                       callbacks=[ErrorTracker()])\nnyse_trainer.fit(nyse_module,\n                 datamodule=nyse_dm)\nnyse_trainer.test(nyse_module,\n                  datamodule=nyse_dm)\n\nWe could also fit a model without the nn.RNN() layer by just using a nn.Flatten() layer instead. This would be a nonlinear AR model. If in addition we excluded the hidden layer, this would be equivalent to our earlier linear AR model.\nInstead we will fit a nonlinear AR model using the feature set X_day that includes the day_of_week indicators. To do so, we must first create our test and training datasets and a corresponding data module. This may seem a little burdensome, but is part of the general pipeline for torch.\n\ndatasets = []\nfor mask in [train, ~train]:\n    X_day_t = torch.tensor(\n                   np.asarray(X_day[mask]).astype(np.float32))\n    Y_t = torch.tensor(np.asarray(Y[mask]).astype(np.float32))\n    datasets.append(TensorDataset(X_day_t, Y_t))\nday_train, day_test = datasets\n\nCreating a data module follows a familiar pattern.\n\nday_dm = SimpleDataModule(day_train,\n                          day_test,\n                          num_workers=min(4, max_num_workers),\n                          validation=day_test,\n                          batch_size=64)\n\nWe build a NonLinearARModel() that takes as input the 20 features and a hidden layer with 32 units. The remaining steps are familiar.\n\nclass NonLinearARModel(nn.Module):\n    def __init__(self):\n        super(NonLinearARModel, self).__init__()\n        self._forward = nn.Sequential(nn.Flatten(),\n                                      nn.Linear(20, 32),\n                                      nn.ReLU(),\n                                      nn.Dropout(0.5),\n                                      nn.Linear(32, 1))\n    def forward(self, x):\n        return torch.flatten(self._forward(x))\n\n\nnl_model = NonLinearARModel()\nnl_optimizer = RMSprop(nl_model.parameters(),\n                           lr=0.001)\nnl_module = SimpleModule.regression(nl_model,\n                                        optimizer=nl_optimizer,\n                                        metrics={'r2':R2Score()})\n\nWe continue with the usual training steps, fit the model, and evaluate the test error. We see the test \\(R^2\\) is a slight improvement over the linear AR model that also includes day_of_week.\n\nnl_trainer = Trainer(deterministic=True,\n                         max_epochs=20,\n                         callbacks=[ErrorTracker()])\nnl_trainer.fit(nl_module, datamodule=day_dm)\nnl_trainer.test(nl_module, datamodule=day_dm)"
  },
  {
    "objectID": "python-notebooks/Ch11-surv-lab.html#brain-cancer-data",
    "href": "python-notebooks/Ch11-surv-lab.html#brain-cancer-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Brain Cancer Data",
    "text": "Brain Cancer Data\nWe begin with the BrainCancer data set, contained in the ISLP package.\n\nBrainCancer = load_data('BrainCancer')\nBrainCancer.columns\n\nThe rows index the 88 patients, while the 8 columns contain the predictors and outcome variables. We first briefly examine the data.\n\nBrainCancer['sex'].value_counts()\n\n\nBrainCancer['diagnosis'].value_counts()\n\n\nBrainCancer['status'].value_counts()\n\nBefore beginning an analysis, it is important to know how the status variable has been coded. Most software uses the convention that a status of 1 indicates an uncensored observation (often death), and a status of 0 indicates a censored observation. But some scientists might use the opposite coding. For the BrainCancer data set 35 patients died before the end of the study, so we are using the conventional coding.\nTo begin the analysis, we re-create the Kaplan-Meier survival curve shown in Figure 11.2. The main package we will use for survival analysis is lifelines. The variable time corresponds to \\(y_i\\), the time to the \\(i\\)th event (either censoring or death). The first argument to km.fit is the event time, and the second argument is the censoring variable, with a 1 indicating an observed failure time. The plot() method produces a survival curve with pointwise confidence intervals. By default, these are 90% confidence intervals, but this can be changed by setting the alpha argument to one minus the desired confidence level.\n\nfig, ax = subplots(figsize=(8,8))\nkm = KaplanMeierFitter()\nkm_brain = km.fit(BrainCancer['time'], BrainCancer['status'])\nkm_brain.plot(label='Kaplan Meier estimate', ax=ax)\n\nNext we create Kaplan-Meier survival curves that are stratified by sex, in order to reproduce Figure 11.3. We do this using the groupby() method of a dataframe. This method returns a generator that can be iterated over in the for loop. In this case, the items in the for loop are 2-tuples representing the groups: the first entry is the value of the grouping column sex while the second value is the dataframe consisting of all rows in the dataframe matching that value of sex. We will want to use this data below in the log-rank test, hence we store this information in the dictionary by_sex. Finally, we have also used the notion of string interpolation to automatically label the different lines in the plot. String interpolation is a powerful technique to format strings — Python has many ways to facilitate such operations.\n\nfig, ax = subplots(figsize=(8,8))\nby_sex = {}\nfor sex, df in BrainCancer.groupby('sex'):\n    by_sex[sex] = df\n    km_sex = km.fit(df['time'], df['status'])\n    km_sex.plot(label='Sex=%s' % sex, ax=ax)\n\nAs discussed in Section 11.4, we can perform a log-rank test to compare the survival of males to females. We use the logrank_test() function from the lifelines.statistics module. The first two arguments are the event times, with the second denoting the corresponding (optional) censoring indicators.\n\nlogrank_test(by_sex['Male']['time'],\n             by_sex['Female']['time'],\n             by_sex['Male']['status'],\n             by_sex['Female']['status'])\n\nThe resulting \\(p\\)-value is \\(0.23\\), indicating no evidence of a difference in survival between the two sexes.\nNext, we use the CoxPHFitter() estimator from lifelines to fit Cox proportional hazards models. To begin, we consider a model that uses sex as the only predictor.\n\ncoxph = CoxPHFitter # shorthand\nsex_df = BrainCancer[['time', 'status', 'sex']]\nmodel_df = MS(['time', 'status', 'sex'],\n              intercept=False).fit_transform(sex_df)\ncox_fit = coxph().fit(model_df,\n                      'time',\n                      'status')\ncox_fit.summary[['coef', 'se(coef)', 'p']]\n\nThe first argument to fit should be a data frame containing at least the event time (the second argument time in this case), as well as an optional censoring variable (the argument status in this case). Note also that the Cox model does not include an intercept, which is why we used the intercept=False argument to ModelSpec above. The summary() method delivers many columns; we chose to abbreviate its output here. It is possible to obtain the likelihood ratio test comparing this model to the one with no features as follows:\n\ncox_fit.log_likelihood_ratio_test()\n\nRegardless of which test we use, we see that there is no clear evidence for a difference in survival between males and females. As we learned in this chapter, the score test from the Cox model is exactly equal to the log rank test statistic!\nNow we fit a model that makes use of additional predictors. We first note that one of our diagnosis values is missing, hence we drop that observation before continuing.\n\ncleaned = BrainCancer.dropna()\nall_MS = MS(cleaned.columns, intercept=False)\nall_df = all_MS.fit_transform(cleaned)\nfit_all = coxph().fit(all_df,\n                      'time',\n                      'status')\nfit_all.summary[['coef', 'se(coef)', 'p']]\n\nThe diagnosis variable has been coded so that the baseline corresponds to HG glioma. The results indicate that the risk associated with HG glioma is more than eight times (i.e. \\(e^{2.15}=8.62\\)) the risk associated with meningioma. In other words, after adjusting for the other predictors, patients with HG glioma have much worse survival compared to those with meningioma. In addition, larger values of the Karnofsky index, ki, are associated with lower risk, i.e. longer survival.\nFinally, we plot estimated survival curves for each diagnosis category, adjusting for the other predictors. To make these plots, we set the values of the other predictors equal to the mean for quantitative variables and equal to the mode for categorical. To do this, we use the apply() method across rows (i.e. axis=0) with a function representative that checks if a column is categorical or not.\n\nlevels = cleaned['diagnosis'].unique()\ndef representative(series):\n    if hasattr(series.dtype, 'categories'):\n        return pd.Series.mode(series)\n    else:\n        return series.mean()\nmodal_data = cleaned.apply(representative, axis=0)\n\nWe make four copies of the column means and assign the diagnosis column to be the four different diagnoses.\n\nmodal_df = pd.DataFrame(\n              [modal_data.iloc[0] for _ in range(len(levels))])\nmodal_df['diagnosis'] = levels\nmodal_df\n\nWe then construct the model matrix based on the model specification all_MS used to fit the model, and name the rows according to the levels of diagnosis.\n\nmodal_X = all_MS.transform(modal_df)\nmodal_X.index = levels\nmodal_X\n\nWe can use the predict_survival_function() method to obtain the estimated survival function.\n\npredicted_survival = fit_all.predict_survival_function(modal_X)\npredicted_survival\n\nThis returns a data frame, whose plot methods yields the different survival curves. To avoid clutter in the plots, we do not display confidence intervals.\n\nfig, ax = subplots(figsize=(8, 8))\npredicted_survival.plot(ax=ax);"
  },
  {
    "objectID": "python-notebooks/Ch11-surv-lab.html#publication-data",
    "href": "python-notebooks/Ch11-surv-lab.html#publication-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Publication Data",
    "text": "Publication Data\nThe Publication data presented in Section 11.5.4 can be found in the ISLP package. We first reproduce Figure 11.5 by plotting the Kaplan-Meier curves stratified on the posres variable, which records whether the study had a positive or negative result.\n\nfig, ax = subplots(figsize=(8,8))\nPublication = load_data('Publication')\nby_result = {}\nfor result, df in Publication.groupby('posres'):\n    by_result[result] = df\n    km_result = km.fit(df['time'], df['status'])\n    km_result.plot(label='Result=%d' % result, ax=ax)\n\nAs discussed previously, the \\(p\\)-values from fitting Cox’s proportional hazards model to the posres variable are quite large, providing no evidence of a difference in time-to-publication between studies with positive versus negative results.\n\nposres_df = MS(['posres',\n                'time',\n                'status'],\n                intercept=False).fit_transform(Publication)\nposres_fit = coxph().fit(posres_df,\n                         'time',\n                         'status')\nposres_fit.summary[['coef', 'se(coef)', 'p']]\n\nHowever, the results change dramatically when we include other predictors in the model. Here we exclude the funding mechanism variable.\n\nmodel = MS(Publication.columns.drop('mech'),\n           intercept=False)\ncoxph().fit(model.fit_transform(Publication),\n            'time',\n            'status').summary[['coef', 'se(coef)', 'p']]\n\nWe see that there are a number of statistically significant variables, including whether the trial focused on a clinical endpoint, the impact of the study, and whether the study had positive or negative results."
  },
  {
    "objectID": "python-notebooks/Ch11-surv-lab.html#call-center-data",
    "href": "python-notebooks/Ch11-surv-lab.html#call-center-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Call Center Data",
    "text": "Call Center Data\nIn this section, we will simulate survival data using the relationship between cumulative hazard and the survival function explored in Exercise 8. Our simulated data will represent the observed wait times (in seconds) for 2,000 customers who have phoned a call center. In this context, censoring occurs if a customer hangs up before his or her call is answered.\nThere are three covariates: Operators (the number of call center operators available at the time of the call, which can range from \\(5\\) to \\(15\\)), Center (either A, B, or C), and Time of day (Morning, Afternoon, or Evening). We generate data for these covariates so that all possibilities are equally likely: for instance, morning, afternoon and evening calls are equally likely, and any number of operators from \\(5\\) to \\(15\\) is equally likely.\n\nrng = np.random.default_rng(10)\nN = 2000\nOperators = rng.choice(np.arange(5, 16),\n                       N,\n                       replace=True)\nCenter = rng.choice(['A', 'B', 'C'],\n                    N,\n                    replace=True)\nTime = rng.choice(['Morn.', 'After.', 'Even.'],\n                   N,\n                   replace=True)\nD = pd.DataFrame({'Operators': Operators,\n                  'Center': pd.Categorical(Center),\n                  'Time': pd.Categorical(Time)})\n\nWe then build a model matrix (omitting the intercept)\n\nmodel = MS(['Operators',\n            'Center',\n            'Time'],\n           intercept=False)\nX = model.fit_transform(D)\n\nIt is worthwhile to take a peek at the model matrix X, so that we can be sure that we understand how the variables have been coded. By default, the levels of categorical variables are sorted and, as usual, the first column of the one-hot encoding of the variable is dropped.\n\nX[:5]\n\nNext, we specify the coefficients and the hazard function.\n\ntrue_beta = np.array([0.04, -0.3, 0, 0.2, -0.2])\ntrue_linpred = X.dot(true_beta)\nhazard = lambda t: 1e-5 * t\n\nHere, we have set the coefficient associated with Operators to equal \\(0.04\\); in other words, each additional operator leads to a \\(e^{0.04}=1.041\\)-fold increase in the “risk” that the call will be answered, given the Center and Time covariates. This makes sense: the greater the number of operators at hand, the shorter the wait time! The coefficient associated with Center == B is \\(-0.3\\), and Center == A is treated as the baseline. This means that the risk of a call being answered at Center B is 0.74 times the risk that it will be answered at Center A; in other words, the wait times are a bit longer at Center B.\nRecall from Section 2.3.7 the use of lambda for creating short functions on the fly. We use the function sim_time() from the ISLP.survival package. This function uses the relationship between the survival function and cumulative hazard \\(S(t) = \\exp(-H(t))\\) and the specific form of the cumulative hazard function in the Cox model to simulate data based on values of the linear predictor true_linpred and the cumulative hazard. We need to provide the cumulative hazard function, which we do here.\n\ncum_hazard = lambda t: 1e-5 * t**2 / 2\n\nWe are now ready to generate data under the Cox proportional hazards model. We truncate the maximum time to 1000 seconds to keep simulated wait times reasonable. The function sim_time() takes a linear predictor, a cumulative hazard function and a random number generator.\n\nW = np.array([sim_time(l, cum_hazard, rng)\n              for l in true_linpred])\nD['Wait time'] = np.clip(W, 0, 1000)\n\nWe now simulate our censoring variable, for which we assume 90% of calls were answered (Failed==1) before the customer hung up (Failed==0).\n\nD['Failed'] = rng.choice([1, 0],\n                         N,\n                         p=[0.9, 0.1])\nD[:5]\n\n\nD['Failed'].mean()\n\nWe now plot Kaplan-Meier survival curves. First, we stratify by Center.\n\nfig, ax = subplots(figsize=(8,8))\nby_center = {}\nfor center, df in D.groupby('Center'):\n    by_center[center] = df\n    km_center = km.fit(df['Wait time'], df['Failed'])\n    km_center.plot(label='Center=%s' % center, ax=ax)\nax.set_title(\"Probability of Still Being on Hold\")\n\nNext, we stratify by Time.\n\nfig, ax = subplots(figsize=(8,8))\nby_time = {}\nfor time, df in D.groupby('Time'):\n    by_time[time] = df\n    km_time = km.fit(df['Wait time'], df['Failed'])\n    km_time.plot(label='Time=%s' % time, ax=ax)\nax.set_title(\"Probability of Still Being on Hold\")\n\nIt seems that calls at Call Center B take longer to be answered than calls at Centers A and C. Similarly, it appears that wait times are longest in the morning and shortest in the evening hours. We can use a log-rank test to determine whether these differences are statistically significant using the function multivariate_logrank_test().\n\nmultivariate_logrank_test(D['Wait time'],\n                          D['Center'],\n                          D['Failed'])\n\nNext, we consider the effect of Time.\n\nmultivariate_logrank_test(D['Wait time'],\n                          D['Time'],\n                          D['Failed'])\n\nAs in the case of a categorical variable with 2 levels, these results are similar to the likelihood ratio test from the Cox proportional hazards model. First, we look at the results for Center.\n\nX = MS(['Wait time',\n        'Failed',\n        'Center'],\n        intercept=False).fit_transform(D)\nF = coxph().fit(X, 'Wait time', 'Failed')\nF.log_likelihood_ratio_test()\n\nNext, we look at the results for Time.\n\nX = MS(['Wait time',\n        'Failed',\n        'Time'],\n       intercept=False).fit_transform(D)\nF = coxph().fit(X, 'Wait time', 'Failed')\nF.log_likelihood_ratio_test()\n\nWe find that differences between centers are highly significant, as are differences between times of day.\nFinally, we fit Cox’s proportional hazards model to the data.\n\nX = MS(D.columns,\n       intercept=False).fit_transform(D)\nfit_queuing = coxph().fit(\n                  X,\n                 'Wait time',\n                 'Failed')\nfit_queuing.summary[['coef', 'se(coef)', 'p']]\n\nThe \\(p\\)-values for Center B and evening time are very small. It is also clear that the hazard — that is, the instantaneous risk that a call will be answered — increases with the number of operators. Since we generated the data ourselves, we know that the true coefficients for Operators, Center = B, Center = C, Time = Even. and Time = Morn. are \\(0.04\\), \\(-0.3\\), \\(0\\), \\(0.2\\), and \\(-0.2\\), respectively. The coefficient estimates from the fitted Cox model are fairly accurate."
  },
  {
    "objectID": "python-notebooks/Ch12-unsup-lab.html",
    "href": "python-notebooks/Ch12-unsup-lab.html",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "",
    "text": "# Lab: Unsupervised Learning In this lab we demonstrate PCA and clustering on several datasets. As in other labs, we import some of our libraries at this top level. This makes the code more readable, as scanning the first few lines of the notebook tell us what libraries are used in this notebook.\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.datasets import get_rdataset\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom ISLP import load_data\n\nWe also collect the new imports needed for this lab.\n\nfrom sklearn.cluster import \\\n     (KMeans,\n      AgglomerativeClustering)\nfrom scipy.cluster.hierarchy import \\\n     (dendrogram,\n      cut_tree)\nfrom ISLP.cluster import compute_linkage\n\n\n\nIn this lab, we perform PCA on USArrests, a data set in the R computing environment. We retrieve the data using get_rdataset(), which can fetch data from many standard R packages.\nThe rows of the data set contain the 50 states, in alphabetical order.\n\nUSArrests = get_rdataset('USArrests').data\nUSArrests\n\nThe columns of the data set contain the four variables.\n\nUSArrests.columns\n\nWe first briefly examine the data. We notice that the variables have vastly different means.\n\nUSArrests.mean()\n\nDataframes have several useful methods for computing column-wise summaries. We can also examine the variance of the four variables using the var() method.\n\nUSArrests.var()\n\nNot surprisingly, the variables also have vastly different variances. The UrbanPop variable measures the percentage of the population in each state living in an urban area, which is not a comparable number to the number of rapes in each state per 100,000 individuals. PCA looks for derived variables that account for most of the variance in the data set. If we do not scale the variables before performing PCA, then the principal components would mostly be driven by the Assault variable, since it has by far the largest variance. So if the variables are measured in different units or vary widely in scale, it is recommended to standardize the variables to have standard deviation one before performing PCA. Typically we set the means to zero as well.\nThis scaling can be done via the StandardScaler() transform imported above. We first fit the scaler, which computes the necessary means and standard deviations and then apply it to our data using the transform method. As before, we combine these steps using the fit_transform() method.\n\nscaler = StandardScaler(with_std=True,\n                        with_mean=True)\nUSArrests_scaled = scaler.fit_transform(USArrests)\n\nHaving scaled the data, we can then perform principal components analysis using the PCA() transform from the sklearn.decomposition package.\n\npcaUS = PCA()\n\n(By default, the PCA() transform centers the variables to have mean zero though it does not scale them.) The transform pcaUS can be used to find the PCA scores returned by fit(). Once the fit method has been called, the pcaUS object also contains a number of useful quantities.\n\npcaUS.fit(USArrests_scaled)\n\nAfter fitting, the mean_ attribute corresponds to the means of the variables. In this case, since we centered and scaled the data with scaler() the means will all be 0.\n\npcaUS.mean_\n\nThe scores can be computed using the transform() method of pcaUS after it has been fit.\n\nscores = pcaUS.transform(USArrests_scaled)\n\nWe will plot these scores a bit further down. The components_ attribute provides the principal component loadings: each row of pcaUS.components_ contains the corresponding principal component loading vector.\n\npcaUS.components_ \n\nThe biplot is a common visualization method used with PCA. It is not built in as a standard part of sklearn, though there are python packages that do produce such plots. Here we make a simple biplot manually.\n\ni, j = 0, 1 # which components\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\nax.scatter(scores[:,0], scores[:,1])\nax.set_xlabel('PC%d' % (i+1))\nax.set_ylabel('PC%d' % (j+1))\nfor k in range(pcaUS.components_.shape[1]):\n    ax.arrow(0, 0, pcaUS.components_[i,k], pcaUS.components_[j,k])\n    ax.text(pcaUS.components_[i,k],\n            pcaUS.components_[j,k],\n            USArrests.columns[k])\n\nNotice that this figure is a reflection of Figure 12.1 through the \\(y\\)-axis. Recall that the principal components are only unique up to a sign change, so we can reproduce that figure by flipping the signs of the second set of scores and loadings. We also increase the length of the arrows to emphasize the loadings.\n\nscale_arrow = s_ = 2\nscores[:,1] *= -1\npcaUS.components_[1] *= -1 # flip the y-axis\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\nax.scatter(scores[:,0], scores[:,1])\nax.set_xlabel('PC%d' % (i+1))\nax.set_ylabel('PC%d' % (j+1))\nfor k in range(pcaUS.components_.shape[1]):\n    ax.arrow(0, 0, s_*pcaUS.components_[i,k], s_*pcaUS.components_[j,k])\n    ax.text(s_*pcaUS.components_[i,k],\n            s_*pcaUS.components_[j,k],\n            USArrests.columns[k])\n\nThe standard deviations of the principal component scores are as follows:\n\nscores.std(0, ddof=1)\n\nThe variance of each score can be extracted directly from the pcaUS object via the explained_variance_ attribute.\n\npcaUS.explained_variance_\n\nThe proportion of variance explained by each principal component (PVE) is stored as explained_variance_ratio_:\n\npcaUS.explained_variance_ratio_\n\nWe see that the first principal component explains 62.0% of the variance in the data, the next principal component explains 24.7% of the variance, and so forth. We can plot the PVE explained by each component, as well as the cumulative PVE. We first plot the proportion of variance explained.\n\n%%capture\nfig, axes = plt.subplots(1, 2, figsize=(15, 6))\nticks = np.arange(pcaUS.n_components_)+1\nax = axes[0]\nax.plot(ticks,\n        pcaUS.explained_variance_ratio_,\n        marker='o')\nax.set_xlabel('Principal Component');\nax.set_ylabel('Proportion of Variance Explained')\nax.set_ylim([0,1])\nax.set_xticks(ticks)\n\nNotice the use of %%capture, which suppresses the displaying of the partially completed figure.\n\nax = axes[1]\nax.plot(ticks,\n        pcaUS.explained_variance_ratio_.cumsum(),\n        marker='o')\nax.set_xlabel('Principal Component')\nax.set_ylabel('Cumulative Proportion of Variance Explained')\nax.set_ylim([0, 1])\nax.set_xticks(ticks)\nfig\n\nThe result is similar to that shown in Figure 12.3. Note that the method cumsum() computes the cumulative sum of the elements of a numeric vector. For instance:\n\na = np.array([1,2,8,-3])\nnp.cumsum(a)\n\n\n\n\nWe now re-create the analysis carried out on the USArrests data in Section 12.3.\nWe saw in Section 12.2.2 that solving the optimization problem (12.6) on a centered data matrix \\(\\bf X\\) is equivalent to computing the first \\(M\\) principal components of the data. We use our scaled and centered USArrests data as \\(\\bf X\\) below. The singular value decomposition (SVD) is a general algorithm for solving (12.6).\n\nX = USArrests_scaled\nU, D, V = np.linalg.svd(X, full_matrices=False)\nU.shape, D.shape, V.shape\n\nThe np.linalg.svd() function returns three components, U, D and V. The matrix V is equivalent to the loading matrix from principal components (up to an unimportant sign flip). Using the full_matrices=False option ensures that for a tall matrix the shape of U is the same as the shape of X.\n\nV\n\n\npcaUS.components_\n\nThe matrix U corresponds to a standardized version of the PCA score matrix (each column standardized to have sum-of-squares one). If we multiply each column of U by the corresponding element of D, we recover the PCA scores exactly (up to a meaningless sign flip).\n\n(U * D[None,:])[:3]\n\n\nscores[:3]\n\nWhile it would be possible to carry out this lab using the PCA() estimator, here we use the np.linalg.svd() function in order to illustrate its use.\nWe now omit 20 entries in the \\(50\\times 4\\) data matrix at random. We do so by first selecting 20 rows (states) at random, and then selecting one of the four entries in each row at random. This ensures that every row has at least three observed values.\n\nn_omit = 20\nnp.random.seed(15)\nr_idx = np.random.choice(np.arange(X.shape[0]),\n                         n_omit,\n                         replace=False)\nc_idx = np.random.choice(np.arange(X.shape[1]),\n                         n_omit,\n                         replace=True)\nXna = X.copy()\nXna[r_idx, c_idx] = np.nan\n\nHere the array r_idx contains 20 integers from 0 to 49; this represents the states (rows of X) that are selected to contain missing values. And c_idx contains 20 integers from 0 to 3, representing the features (columns in X) that contain the missing values for each of the selected states.\nWe now write some code to implement Algorithm 12.1. We first write a function that takes in a matrix, and returns an approximation to the matrix using the svd() function. This will be needed in Step 2 of Algorithm 12.1.\n\ndef low_rank(X, M=1):\n    U, D, V = np.linalg.svd(X)\n    L = U[:,:M] * D[None,:M]\n    return L.dot(V[:M])\n\nTo conduct Step 1 of the algorithm, we initialize Xhat — this is \\(\\tilde{\\bf X}\\) in Algorithm 12.1 — by replacing the missing values with the column means of the non-missing entries. These are stored in Xbar below after running np.nanmean() over the row axis. We make a copy so that when we assign values to Xhat below we do not also overwrite the values in Xna.\n\nXhat = Xna.copy()\nXbar = np.nanmean(Xhat, axis=0)\nXhat[r_idx, c_idx] = Xbar[c_idx]\n\nBefore we begin Step 2, we set ourselves up to measure the progress of our iterations:\n\nthresh = 1e-7\nrel_err = 1\ncount = 0\nismiss = np.isnan(Xna)\nmssold = np.mean(Xhat[~ismiss]**2)\nmss0 = np.mean(Xna[~ismiss]**2)\n\nHere ismiss is a logical matrix with the same dimensions as Xna; a given element is True if the corresponding matrix element is missing. The notation ~ismiss negates this boolean vector. This is useful because it allows us to access both the missing and non-missing entries. We store the mean of the squared non-missing elements in mss0. We store the mean squared error of the non-missing elements of the old version of Xhat in mssold (which currently agrees with mss0). We plan to store the mean squared error of the non-missing elements of the current version of Xhat in mss, and will then iterate Step 2 of Algorithm 12.1 until the relative error, defined as (mssold - mss) / mss0, falls below thresh = 1e-7. {Algorithm 12.1 tells us to iterate Step 2 until (12.14) is no longer decreasing. Determining whether (12.14) is decreasing requires us only to keep track of mssold - mss. However, in practice, we keep track of (mssold - mss) / mss0 instead: this makes it so that the number of iterations required for Algorithm 12.1 to converge does not depend on whether we multiplied the raw data \\(\\bf X\\) by a constant factor.}\nIn Step 2(a) of Algorithm 12.1, we approximate Xhat using low_rank(); we call this Xapp. In Step 2(b), we use Xapp to update the estimates for elements in Xhat that are missing in Xna. Finally, in Step 2(c), we compute the relative error. These three steps are contained in the following while loop:\n\nwhile rel_err > thresh:\n    count += 1\n    # Step 2(a)\n    Xapp = low_rank(Xhat, M=1)\n    # Step 2(b)\n    Xhat[ismiss] = Xapp[ismiss]\n    # Step 2(c)\n    mss = np.mean(((Xna - Xapp)[~ismiss])**2)\n    rel_err = (mssold - mss) / mss0\n    mssold = mss\n    print(\"Iteration: {0}, MSS:{1:.3f}, Rel.Err {2:.2e}\"\n          .format(count, mss, rel_err))\n\nWe see that after eight iterations, the relative error has fallen below thresh = 1e-7, and so the algorithm terminates. When this happens, the mean squared error of the non-missing elements equals 0.381.\nFinally, we compute the correlation between the 20 imputed values and the actual values:\n\nnp.corrcoef(Xapp[ismiss], X[ismiss])[0,1]\n\nIn this lab, we implemented Algorithm 12.1 ourselves for didactic purposes. However, a reader who wishes to apply matrix completion to their data might look to more specialized Python implementations.\n\n\n\n\n\nThe estimator sklearn.cluster.KMeans() performs \\(K\\)-means clustering in Python. We begin with a simple simulated example in which there truly are two clusters in the data: the first 25 observations have a mean shift relative to the next 25 observations.\n\nnp.random.seed(0);\nX = np.random.standard_normal((50,2));\nX[:25,0] += 3;\nX[:25,1] -= 4;\n\nWe now perform \\(K\\)-means clustering with \\(K=2\\).\n\nkmeans = KMeans(n_clusters=2,\n                random_state=2,\n                n_init=20).fit(X)\n\nWe specify random_state to make the results reproducible. The cluster assignments of the 50 observations are contained in kmeans.labels_.\n\nkmeans.labels_\n\nThe \\(K\\)-means clustering perfectly separated the observations into two clusters even though we did not supply any group information to KMeans(). We can plot the data, with each observation colored according to its cluster assignment.\n\nfig, ax = plt.subplots(1, 1, figsize=(8,8))\nax.scatter(X[:,0], X[:,1], c=kmeans.labels_)\nax.set_title(\"K-Means Clustering Results with K=2\");\n\nHere the observations can be easily plotted because they are two-dimensional. If there were more than two variables then we could instead perform PCA and plot the first two principal component score vectors to represent the clusters.\nIn this example, we knew that there really were two clusters because we generated the data. However, for real data, we do not know the true number of clusters, nor whether they exist in any precise way. We could instead have performed \\(K\\)-means clustering on this example with \\(K=3\\).\n\nkmeans = KMeans(n_clusters=3,\n                random_state=3,\n                n_init=20).fit(X)\nfig, ax = plt.subplots(figsize=(8,8))\nax.scatter(X[:,0], X[:,1], c=kmeans.labels_)\nax.set_title(\"K-Means Clustering Results with K=3\");\n\nWhen \\(K=3\\), \\(K\\)-means clustering splits up the two clusters. We have used the n_init argument to run the \\(K\\)-means with 20 initial cluster assignments (the default is 10). If a value of n_init greater than one is used, then \\(K\\)-means clustering will be performed using multiple random assignments in Step 1 of Algorithm 12.2, and the KMeans() function will report only the best results. Here we compare using n_init=1 to n_init=20.\n\nkmeans1 = KMeans(n_clusters=3,\n                random_state=3,\n                n_init=1).fit(X)\nkmeans20 = KMeans(n_clusters=3,\n                  random_state=3,\n                  n_init=20).fit(X);\nkmeans1.inertia_, kmeans20.inertia_\n\nNote that kmeans.inertia_ is the total within-cluster sum of squares, which we seek to minimize by performing \\(K\\)-means clustering (12.17).\nWe strongly recommend always running \\(K\\)-means clustering with a large value of n_init, such as 20 or 50, since otherwise an undesirable local optimum may be obtained.\nWhen performing \\(K\\)-means clustering, in addition to using multiple initial cluster assignments, it is also important to set a random seed using the random_state argument to KMeans(). This way, the initial cluster assignments in Step 1 can be replicated, and the \\(K\\)-means output will be fully reproducible.\n\n\n\nThe AgglomerativeClustering() class from the sklearn.clustering package implements hierarchical clustering. As its name is long, we use the short hand HClust for hierarchical clustering. Note that this will not change the return type when using this method, so instances will still be of class AgglomerativeClustering. In the following example we use the data from the previous lab to plot the hierarchical clustering dendrogram using complete, single, and average linkage clustering with Euclidean distance as the dissimilarity measure. We begin by clustering observations using complete linkage.\n\nHClust = AgglomerativeClustering\nhc_comp = HClust(distance_threshold=0,\n                 n_clusters=None,\n                 linkage='complete')\nhc_comp.fit(X)\n\nThis computes the entire dendrogram. We could just as easily perform hierarchical clustering with average or single linkage instead:\n\nhc_avg = HClust(distance_threshold=0,\n                n_clusters=None,\n                linkage='average');\nhc_avg.fit(X)\nhc_sing = HClust(distance_threshold=0,\n                 n_clusters=None,\n                 linkage='single');\nhc_sing.fit(X);\n\nTo use a precomputed distance matrix, we provide an additional argument metric=\"precomputed\". In the code below, the first four lines computes the \\(50\\times 50\\) pairwise-distance matrix.\n\nD = np.zeros((X.shape[0], X.shape[0]));\nfor i in range(X.shape[0]):\n    x_ = np.multiply.outer(np.ones(X.shape[0]), X[i])\n    D[i] = np.sqrt(np.sum((X - x_)**2, 1));\nhc_sing_pre = HClust(distance_threshold=0,\n                     n_clusters=None,\n                     metric='precomputed',\n                     linkage='single')\nhc_sing_pre.fit(D)\n\nWe use dendrogram() from scipy.cluster.hierarchy to plot the dendrogram. However, dendrogram() expects a so-called linkage-matrix representation of the clustering, which is not provided by AgglomerativeClustering(), but can be computed. The function compute_linkage() in the ISLP.cluster package is provided for this purpose.\nWe can now plot the dendrograms. The numbers at the bottom of the plot identify each observation. The dendrogram() function has a default method to color different branches of the tree that suggests a pre-defined cut of the tree at a particular depth. We prefer to overwrite this default by setting this threshold to be infinite. Since we want this behavior for many dendrograms, we store these values in a dictionary cargs and pass this as keyword arguments using the notation **cargs.\n\ncargs = {'color_threshold':-np.inf,\n         'above_threshold_color':'black'}\nlinkage_comp = compute_linkage(hc_comp)\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ndendrogram(linkage_comp,\n           ax=ax,\n           **cargs);\n\nWe may want to color branches of the tree above and below a cut-threshold differently. This can be achieved by changing the color_threshold. Let’s cut the tree at a height of 4, coloring links that merge above 4 in black.\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ndendrogram(linkage_comp,\n           ax=ax,\n           color_threshold=4,\n           above_threshold_color='black');\n\nTo determine the cluster labels for each observation associated with a given cut of the dendrogram, we can use the cut_tree() function from scipy.cluster.hierarchy:\n\ncut_tree(linkage_comp, n_clusters=4).T\n\nThis can also be achieved by providing an argument n_clusters to HClust(); however each cut would require recomputing the clustering. Similarly, trees may be cut by distance threshold with an argument of distance_threshold to HClust() or height to cut_tree().\n\ncut_tree(linkage_comp, height=5)\n\nTo scale the variables before performing hierarchical clustering of the observations, we use StandardScaler() as in our PCA example:\n\nscaler = StandardScaler()\nX_scale = scaler.fit_transform(X)\nhc_comp_scale = HClust(distance_threshold=0,\n                       n_clusters=None,\n                       linkage='complete').fit(X_scale)\nlinkage_comp_scale = compute_linkage(hc_comp_scale)\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ndendrogram(linkage_comp_scale, ax=ax, **cargs)\nax.set_title(\"Hierarchical Clustering with Scaled Features\");\n\nCorrelation-based distances between observations can be used for clustering. The correlation between two observations measures the similarity of their feature values. {Suppose each observation has \\(p\\) features, each a single numerical value. We measure the similarity of two such observations by computing the correlation of these \\(p\\) pairs of numbers.} With \\(n\\) observations, the \\(n\\times n\\) correlation matrix can then be used as a similarity (or affinity) matrix, i.e. so that one minus the correlation matrix is the dissimilarity matrix used for clustering.\nNote that using correlation only makes sense for data with at least three features since the absolute correlation between any two observations with measurements on two features is always one. Hence, we will cluster a three-dimensional data set.\n\nX = np.random.standard_normal((30, 3))\ncorD = 1 - np.corrcoef(X)\nhc_cor = HClust(linkage='complete',\n                distance_threshold=0,\n                n_clusters=None,\n                metric='precomputed')\nhc_cor.fit(corD)\nlinkage_cor = compute_linkage(hc_cor)\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ndendrogram(linkage_cor, ax=ax, **cargs)\nax.set_title(\"Complete Linkage with Correlation-Based Dissimilarity\");\n\n\n\n\n\nUnsupervised techniques are often used in the analysis of genomic data. In particular, PCA and hierarchical clustering are popular tools. We illustrate these techniques on the NCI60 cancer cell line microarray data, which consists of 6830 gene expression measurements on 64 cancer cell lines.\n\nNCI60 = load_data('NCI60')\nnci_labs = NCI60['labels']\nnci_data = NCI60['data']\n\nEach cell line is labeled with a cancer type. We do not make use of the cancer types in performing PCA and clustering, as these are unsupervised techniques. But after performing PCA and clustering, we will check to see the extent to which these cancer types agree with the results of these unsupervised techniques.\nThe data has 64 rows and 6830 columns.\n\nnci_data.shape\n\nWe begin by examining the cancer types for the cell lines.\n\nnci_labs.value_counts()\n\n\n\nWe first perform PCA on the data after scaling the variables (genes) to have standard deviation one, although here one could reasonably argue that it is better not to scale the genes as they are measured in the same units.\n\nscaler = StandardScaler()\nnci_scaled = scaler.fit_transform(nci_data)\nnci_pca = PCA()\nnci_scores = nci_pca.fit_transform(nci_scaled)\n\nWe now plot the first few principal component score vectors, in order to visualize the data. The observations (cell lines) corresponding to a given cancer type will be plotted in the same color, so that we can see to what extent the observations within a cancer type are similar to each other.\n\ncancer_types = list(np.unique(nci_labs))\nnci_groups = np.array([cancer_types.index(lab)\n                       for lab in nci_labs.values])\nfig, axes = plt.subplots(1, 2, figsize=(15,6))\nax = axes[0]\nax.scatter(nci_scores[:,0],\n           nci_scores[:,1],\n           c=nci_groups,\n           marker='o',\n           s=50)\nax.set_xlabel('PC1'); ax.set_ylabel('PC2')\nax = axes[1]\nax.scatter(nci_scores[:,0],\n           nci_scores[:,2],\n           c=nci_groups,\n           marker='o',\n           s=50)\nax.set_xlabel('PC1'); ax.set_ylabel('PC3');\n\nOn the whole, cell lines corresponding to a single cancer type do tend to have similar values on the first few principal component score vectors. This indicates that cell lines from the same cancer type tend to have pretty similar gene expression levels.\nWe can also plot the percent variance explained by the principal components as well as the cumulative percent variance explained. This is similar to the plots we made earlier for the USArrests data.\n\nfig, axes = plt.subplots(1, 2, figsize=(15,6))\nax = axes[0]\nticks = np.arange(nci_pca.n_components_)+1\nax.plot(ticks,\n        nci_pca.explained_variance_ratio_,\n        marker='o')\nax.set_xlabel('Principal Component');\nax.set_ylabel('PVE')\nax = axes[1]\nax.plot(ticks,\n        nci_pca.explained_variance_ratio_.cumsum(),\n        marker='o');\nax.set_xlabel('Principal Component')\nax.set_ylabel('Cumulative PVE');\n\nWe see that together, the first seven principal components explain around 40% of the variance in the data. This is not a huge amount of the variance. However, looking at the scree plot, we see that while each of the first seven principal components explain a substantial amount of variance, there is a marked decrease in the variance explained by further principal components. That is, there is an elbow in the plot after approximately the seventh principal component. This suggests that there may be little benefit to examining more than seven or so principal components (though even examining seven principal components may be difficult).\n\n\n\nWe now perform hierarchical clustering of the cell lines in the NCI60 data using complete, single, and average linkage. Once again, the goal is to find out whether or not the observations cluster into distinct types of cancer. Euclidean distance is used as the dissimilarity measure. We first write a short function to produce the three dendrograms.\n\ndef plot_nci(linkage, ax, cut=-np.inf):\n    cargs = {'above_threshold_color':'black',\n             'color_threshold':cut}\n    hc = HClust(n_clusters=None,\n                distance_threshold=0,\n                linkage=linkage.lower()).fit(nci_scaled)\n    linkage_ = compute_linkage(hc)\n    dendrogram(linkage_,\n               ax=ax,\n               labels=np.asarray(nci_labs),\n               leaf_font_size=10,\n               **cargs)\n    ax.set_title('%s Linkage' % linkage)\n    return hc\n\nLet’s plot our results.\n\nfig, axes = plt.subplots(3, 1, figsize=(15,30))      \nax = axes[0]; hc_comp = plot_nci('Complete', ax)\nax = axes[1]; hc_avg = plot_nci('Average', ax)\nax = axes[2]; hc_sing = plot_nci('Single', ax)\n\nWe see that the choice of linkage certainly does affect the results obtained. Typically, single linkage will tend to yield trailing clusters: very large clusters onto which individual observations attach one-by-one. On the other hand, complete and average linkage tend to yield more balanced, attractive clusters. For this reason, complete and average linkage are generally preferred to single linkage. Clearly cell lines within a single cancer type do tend to cluster together, although the clustering is not perfect. We will use complete linkage hierarchical clustering for the analysis that follows.\nWe can cut the dendrogram at the height that will yield a particular number of clusters, say four:\n\nlinkage_comp = compute_linkage(hc_comp)\ncomp_cut = cut_tree(linkage_comp, n_clusters=4).reshape(-1)\npd.crosstab(nci_labs['label'],\n            pd.Series(comp_cut.reshape(-1), name='Complete'))\n\nThere are some clear patterns. All the leukemia cell lines fall in one cluster, while the breast cancer cell lines are spread out over three different clusters.\nWe can plot a cut on the dendrogram that produces these four clusters:\n\nfig, ax = plt.subplots(figsize=(10,10))\nplot_nci('Complete', ax, cut=140)\nax.axhline(140, c='r', linewidth=4);\n\nThe axhline() function draws a horizontal line line on top of any existing set of axes. The argument 140 plots a horizontal line at height 140 on the dendrogram; this is a height that results in four distinct clusters. It is easy to verify that the resulting clusters are the same as the ones we obtained in comp_cut.\nWe claimed earlier in Section 12.4.2 that \\(K\\)-means clustering and hierarchical clustering with the dendrogram cut to obtain the same number of clusters can yield very different results. How do these NCI60 hierarchical clustering results compare to what we get if we perform \\(K\\)-means clustering with \\(K=4\\)?\n\nnci_kmeans = KMeans(n_clusters=4, \n                    random_state=0,\n                    n_init=20).fit(nci_scaled)\npd.crosstab(pd.Series(comp_cut, name='HClust'),\n            pd.Series(nci_kmeans.labels_, name='K-means'))\n\nWe see that the four clusters obtained using hierarchical clustering and \\(K\\)-means clustering are somewhat different. First we note that the labels in the two clusterings are arbitrary. That is, swapping the identifier of the cluster does not change the clustering. We see here Cluster 3 in \\(K\\)-means clustering is identical to cluster 2 in hierarchical clustering. However, the other clusters differ: for instance, cluster 0 in \\(K\\)-means clustering contains a portion of the observations assigned to cluster 0 by hierarchical clustering, as well as all of the observations assigned to cluster 1 by hierarchical clustering.\nRather than performing hierarchical clustering on the entire data matrix, we can also perform hierarchical clustering on the first few principal component score vectors, regarding these first few components as a less noisy version of the data.\n\nhc_pca = HClust(n_clusters=None,\n                distance_threshold=0,\n                linkage='complete'\n                ).fit(nci_scores[:,:5])\nlinkage_pca = compute_linkage(hc_pca)\nfig, ax = plt.subplots(figsize=(8,8))\ndendrogram(linkage_pca,\n           labels=np.asarray(nci_labs),\n           leaf_font_size=10,\n           ax=ax,\n           **cargs)\nax.set_title(\"Hier. Clust. on First Five Score Vectors\")\npca_labels = pd.Series(cut_tree(linkage_pca,\n                                n_clusters=4).reshape(-1),\n                       name='Complete-PCA')\npd.crosstab(nci_labs['label'], pca_labels)"
  },
  {
    "objectID": "python-notebooks/Ch13-multiple-lab.html#review-of-hypothesis-tests",
    "href": "python-notebooks/Ch13-multiple-lab.html#review-of-hypothesis-tests",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Review of Hypothesis Tests",
    "text": "Review of Hypothesis Tests\nWe begin by performing some one-sample \\(t\\)-tests.\nFirst we create 100 variables, each consisting of 10 observations. The first 50 variables have mean \\(0.5\\) and variance \\(1\\), while the others have mean \\(0\\) and variance \\(1\\).\n\nrng = np.random.default_rng(12)\nX = rng.standard_normal((10, 100))\ntrue_mean = np.array([0.5]*50 + [0]*50)\nX += true_mean[None,:]\n\nTo begin, we use ttest_1samp() from the scipy.stats module to test \\(H_{0}: \\mu_1=0\\), the null hypothesis that the first variable has mean zero.\n\nresult = ttest_1samp(X[:,0], 0)\nresult.pvalue\n\nThe \\(p\\)-value comes out to 0.931, which is not low enough to reject the null hypothesis at level \\(\\alpha=0.05\\). In this case, \\(\\mu_1=0.5\\), so the null hypothesis is false. Therefore, we have made a Type II error by failing to reject the null hypothesis when the null hypothesis is false.\nWe now test \\(H_{0,j}: \\mu_j=0\\) for \\(j=1,\\ldots,100\\). We compute the 100 \\(p\\)-values, and then construct a vector recording whether the \\(j\\)th \\(p\\)-value is less than or equal to 0.05, in which case we reject \\(H_{0j}\\), or greater than 0.05, in which case we do not reject \\(H_{0j}\\), for \\(j=1,\\ldots,100\\).\n\np_values = np.empty(100)\nfor i in range(100):\n   p_values[i] = ttest_1samp(X[:,i], 0).pvalue\ndecision = pd.cut(p_values,\n                  [0, 0.05, 1],\n                  labels=['Reject H0',\n                          'Do not reject H0'])\ntruth = pd.Categorical(true_mean == 0,\n                       categories=[True, False],\n                       ordered=True)\n\nSince this is a simulated data set, we can create a \\(2 \\times 2\\) table similar to Table 13.2.\n\npd.crosstab(decision,\n            truth,\n     rownames=['Decision'],\n     colnames=['H0'])\n\nTherefore, at level \\(\\alpha=0.05\\), we reject 15 of the 50 false null hypotheses, and we incorrectly reject 5 of the true null hypotheses. Using the notation from Section 13.3, we have \\(V=5\\), \\(S=15\\), \\(U=45\\) and \\(W=35\\). We have set \\(\\alpha=0.05\\), which means that we expect to reject around 5% of the true null hypotheses. This is in line with the \\(2 \\times 2\\) table above, which indicates that we rejected \\(V=5\\) of the \\(50\\) true null hypotheses.\nIn the simulation above, for the false null hypotheses, the ratio of the mean to the standard deviation was only \\(0.5/1 = 0.5\\). This amounts to quite a weak signal, and it resulted in a high number of Type II errors. Let’s instead simulate data with a stronger signal, so that the ratio of the mean to the standard deviation for the false null hypotheses equals \\(1\\). We make only 10 Type II errors.\n\ntrue_mean = np.array([1]*50 + [0]*50)\nX = rng.standard_normal((10, 100))\nX += true_mean[None,:]\nfor i in range(100):\n   p_values[i] = ttest_1samp(X[:,i], 0).pvalue\ndecision = pd.cut(p_values,\n                  [0, 0.05, 1],\n                  labels=['Reject H0',\n                          'Do not reject H0'])\ntruth = pd.Categorical(true_mean == 0,\n                       categories=[True, False],\n                       ordered=True)\npd.crosstab(decision,\n            truth,\n            rownames=['Decision'],\n            colnames=['H0'])"
  },
  {
    "objectID": "python-notebooks/Ch13-multiple-lab.html#family-wise-error-rate",
    "href": "python-notebooks/Ch13-multiple-lab.html#family-wise-error-rate",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Family-Wise Error Rate",
    "text": "Family-Wise Error Rate\nRecall from (13.5) that if the null hypothesis is true for each of \\(m\\) independent hypothesis tests, then the FWER is equal to \\(1-(1-\\alpha)^m\\). We can use this expression to compute the FWER for \\(m=1,\\ldots, 500\\) and \\(\\alpha=0.05\\), \\(0.01\\), and \\(0.001\\). We plot the FWER for these values of \\(\\alpha\\) in order to reproduce Figure 13.2.\n\nm = np.linspace(1, 501)\nfig, ax = plt.subplots()\n[ax.plot(m,\n         1 - (1 - alpha)**m,\n         label=r'$\\alpha=%s$' % str(alpha))\n         for alpha in [0.05, 0.01, 0.001]]\nax.set_xscale('log')\nax.set_xlabel('Number of Hypotheses')\nax.set_ylabel('Family-Wise Error Rate')\nax.legend()\nax.axhline(0.05, c='k', ls='--');\n\nAs discussed previously, even for moderate values of \\(m\\) such as \\(50\\), the FWER exceeds \\(0.05\\) unless \\(\\alpha\\) is set to a very low value, such as \\(0.001\\). Of course, the problem with setting \\(\\alpha\\) to such a low value is that we are likely to make a number of Type II errors: in other words, our power is very low.\nWe now conduct a one-sample \\(t\\)-test for each of the first five managers in the\nFund dataset, in order to test the null hypothesis that the \\(j\\)th fund manager’s mean return equals zero, \\(H_{0,j}: \\mu_j=0\\).\n\nFund = load_data('Fund')\nfund_mini = Fund.iloc[:,:5]\nfund_mini_pvals = np.empty(5)\nfor i in range(5):\n    fund_mini_pvals[i] = ttest_1samp(fund_mini.iloc[:,i], 0).pvalue\nfund_mini_pvals\n\nThe \\(p\\)-values are low for Managers One and Three, and high for the other three managers. However, we cannot simply reject \\(H_{0,1}\\) and \\(H_{0,3}\\), since this would fail to account for the multiple testing that we have performed. Instead, we will conduct Bonferroni’s method and Holm’s method to control the FWER.\nTo do this, we use the multipletests() function from the statsmodels module (abbreviated to mult_test()). Given the \\(p\\)-values, for methods like Holm and Bonferroni the function outputs adjusted \\(p\\)-values, which can be thought of as a new set of \\(p\\)-values that have been corrected for multiple testing. If the adjusted \\(p\\)-value for a given hypothesis is less than or equal to \\(\\alpha\\), then that hypothesis can be rejected while maintaining a FWER of no more than \\(\\alpha\\). In other words, for such methods, the adjusted \\(p\\)-values resulting from the multipletests() function can simply be compared to the desired FWER in order to determine whether or not to reject each hypothesis. We will later see that we can use the same function to control FDR as well.\nThe mult_test() function takes \\(p\\)-values and a method argument, as well as an optional alpha argument. It returns the decisions (reject below) as well as the adjusted \\(p\\)-values (bonf).\n\nreject, bonf = mult_test(fund_mini_pvals, method = \"bonferroni\")[:2]\nreject\n\nThe \\(p\\)-values bonf are simply the fund_mini_pvalues multiplied by 5 and truncated to be less than or equal to 1.\n\nbonf, np.minimum(fund_mini_pvals * 5, 1)\n\nTherefore, using Bonferroni’s method, we are able to reject the null hypothesis only for Manager One while controlling FWER at \\(0.05\\).\nBy contrast, using Holm’s method, the adjusted \\(p\\)-values indicate that we can reject the null hypotheses for Managers One and Three at a FWER of \\(0.05\\).\n\nmult_test(fund_mini_pvals, method = \"holm\", alpha=0.05)[:2]\n\nAs discussed previously, Manager One seems to perform particularly well, whereas Manager Two has poor performance.\n\nfund_mini.mean()\n\nIs there evidence of a meaningful difference in performance between these two managers? We can check this by performing a paired \\(t\\)-test using the ttest_rel() function from scipy.stats:\n\nttest_rel(fund_mini['Manager1'],\n          fund_mini['Manager2']).pvalue\n\nThe test results in a \\(p\\)-value of 0.038, suggesting a statistically significant difference.\nHowever, we decided to perform this test only after examining the data and noting that Managers One and Two had the highest and lowest mean performances. In a sense, this means that we have implicitly performed \\({5 \\choose 2} = 5(5-1)/2=10\\) hypothesis tests, rather than just one, as discussed in Section 13.3.2. Hence, we use the pairwise_tukeyhsd() function from statsmodels.stats.multicomp to apply Tukey’s method in order to adjust for multiple testing. This function takes as input a fitted ANOVA regression model, which is essentially just a linear regression in which all of the predictors are qualitative. In this case, the response consists of the monthly excess returns achieved by each manager, and the predictor indicates the manager to which each return corresponds.\n\nreturns = np.hstack([fund_mini.iloc[:,i] for i in range(5)])\nmanagers = np.hstack([[i+1]*50 for i in range(5)])\ntukey = pairwise_tukeyhsd(returns, managers)\nprint(tukey.summary())\n\nThe pairwise_tukeyhsd() function provides confidence intervals for the difference between each pair of managers (lower and upper), as well as a \\(p\\)-value. All of these quantities have been adjusted for multiple testing. Notice that the \\(p\\)-value for the difference between Managers One and Two has increased from \\(0.038\\) to \\(0.186\\), so there is no longer clear evidence of a difference between the managers’ performances. We can plot the confidence intervals for the pairwise comparisons using the plot_simultaneous() method of tukey. Any pair of intervals that don’t overlap indicates a significant difference at the nominal level of 0.05. In this case, no differences are considered significant as reported in the table above.\n\nfig, ax = plt.subplots(figsize=(8,8))\ntukey.plot_simultaneous(ax=ax);"
  },
  {
    "objectID": "python-notebooks/Ch13-multiple-lab.html#false-discovery-rate",
    "href": "python-notebooks/Ch13-multiple-lab.html#false-discovery-rate",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "False Discovery Rate",
    "text": "False Discovery Rate\nNow we perform hypothesis tests for all 2,000 fund managers in the Fund dataset. We perform a one-sample \\(t\\)-test of \\(H_{0,j}: \\mu_j=0\\), which states that the \\(j\\)th fund manager’s mean return is zero.\n\nfund_pvalues = np.empty(2000)\nfor i, manager in enumerate(Fund.columns):\n    fund_pvalues[i] = ttest_1samp(Fund[manager], 0).pvalue\n\nThere are far too many managers to consider trying to control the FWER. Instead, we focus on controlling the FDR: that is, the expected fraction of rejected null hypotheses that are actually false positives. The multipletests() function (abbreviated mult_test()) can be used to carry out the Benjamini–Hochberg procedure.\n\nfund_qvalues = mult_test(fund_pvalues, method = \"fdr_bh\")[1]\nfund_qvalues[:10]\n\nThe q-values output by the Benjamini–Hochberg procedure can be interpreted as the smallest FDR threshold at which we would reject a particular null hypothesis. For instance, a \\(q\\)-value of \\(0.1\\) indicates that we can reject the corresponding null hypothesis at an FDR of 10% or greater, but that we cannot reject the null hypothesis at an FDR below 10%.\nIf we control the FDR at 10%, then for how many of the fund managers can we reject \\(H_{0,j}: \\mu_j=0\\)?\n\n(fund_qvalues <= 0.1).sum()\n\nWe find that 146 of the 2,000 fund managers have a \\(q\\)-value below 0.1; therefore, we are able to conclude that 146 of the fund managers beat the market at an FDR of 10%. Only about 15 (10% of 146) of these fund managers are likely to be false discoveries.\nBy contrast, if we had instead used Bonferroni’s method to control the FWER at level \\(\\alpha=0.1\\), then we would have failed to reject any null hypotheses!\n\n(fund_pvalues <= 0.1 / 2000).sum()\n\nFigure 13.6 displays the ordered \\(p\\)-values, \\(p_{(1)} \\leq p_{(2)} \\leq \\cdots \\leq p_{(2000)}\\), for the Fund dataset, as well as the threshold for rejection by the Benjamini–Hochberg procedure. Recall that the Benjamini–Hochberg procedure identifies the largest \\(p\\)-value such that \\(p_{(j)}<qj/m\\), and rejects all hypotheses for which the \\(p\\)-value is less than or equal to \\(p_{(j)}\\). In the code below, we implement the Benjamini–Hochberg procedure ourselves, in order to illustrate how it works. We first order the \\(p\\)-values. We then identify all \\(p\\)-values that satisfy \\(p_{(j)}<qj/m\\) (sorted_set_). Finally, selected_ is a boolean array indicating which \\(p\\)-values are less than or equal to the largest \\(p\\)-value in sorted_[sorted_set_]. Therefore, selected_ indexes the \\(p\\)-values rejected by the Benjamini–Hochberg procedure.\n\nsorted_ = np.sort(fund_pvalues)\nm = fund_pvalues.shape[0]\nq = 0.1\nsorted_set_ = np.where(sorted_ < q * np.linspace(1, m, m) / m)[0]\nif sorted_set_.shape[0] > 0:\n    selected_ = fund_pvalues < sorted_[sorted_set_].max()\n    sorted_set_ = np.arange(sorted_set_.max())\nelse:\n    selected_ = []\n    sorted_set_ = []\n\nWe now reproduce the middle panel of Figure 13.6.\n\nfig, ax = plt.subplots()\nax.scatter(np.arange(0, sorted_.shape[0]) + 1,\n           sorted_, s=10)\nax.set_yscale('log')\nax.set_xscale('log')\nax.set_ylabel('P-Value')\nax.set_xlabel('Index')\nax.scatter(sorted_set_+1, sorted_[sorted_set_], c='r', s=20)\nax.axline((0, 0), (1,q/m), c='k', ls='--', linewidth=3);"
  },
  {
    "objectID": "python-notebooks/Ch13-multiple-lab.html#a-re-sampling-approach",
    "href": "python-notebooks/Ch13-multiple-lab.html#a-re-sampling-approach",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "A Re-Sampling Approach",
    "text": "A Re-Sampling Approach\nHere, we implement the re-sampling approach to hypothesis testing using the Khan dataset, which we investigated in Section 13.5. First, we merge the training and testing data, which results in observations on 83 patients for 2,308 genes.\n\nKhan = load_data('Khan')      \nD = pd.concat([Khan['xtrain'], Khan['xtest']])\nD['Y'] = pd.concat([Khan['ytrain'], Khan['ytest']])\nD['Y'].value_counts()\n\nThere are four classes of cancer. For each gene, we compare the mean expression in the second class (rhabdomyosarcoma) to the mean expression in the fourth class (Burkitt’s lymphoma). Performing a standard two-sample \\(t\\)-test\nusing ttest_ind() from scipy.stats on the \\(11\\)th gene produces a test-statistic of -2.09 and an associated \\(p\\)-value of 0.0412, suggesting modest evidence of a difference in mean expression levels between the two cancer types.\n\nD2 = D[lambda df:df['Y'] == 2]\nD4 = D[lambda df:df['Y'] == 4]\ngene_11 = 'G0011'\nobservedT, pvalue = ttest_ind(D2[gene_11],\n                              D4[gene_11],\n                              equal_var=True)\nobservedT, pvalue\n\nHowever, this \\(p\\)-value relies on the assumption that under the null hypothesis of no difference between the two groups, the test statistic follows a \\(t\\)-distribution with \\(29+25-2=52\\) degrees of freedom. Instead of using this theoretical null distribution, we can randomly split the 54 patients into two groups of 29 and 25, and compute a new test statistic. Under the null hypothesis of no difference between the groups, this new test statistic should have the same distribution as our original one. Repeating this process 10,000 times allows us to approximate the null distribution of the test statistic. We compute the fraction of the time that our observed test statistic exceeds the test statistics obtained via re-sampling.\n\nB = 10000\nTnull = np.empty(B)\nD_ = np.hstack([D2[gene_11], D4[gene_11]])\nn_ = D2[gene_11].shape[0]\nD_null = D_.copy()\nfor b in range(B):\n    rng.shuffle(D_null)\n    ttest_ = ttest_ind(D_null[:n_],\n                       D_null[n_:],\n                       equal_var=True)\n    Tnull[b] = ttest_.statistic\n(np.abs(Tnull) > np.abs(observedT)).mean()\n\nThis fraction, 0.0398, is our re-sampling-based \\(p\\)-value. It is almost identical to the \\(p\\)-value of 0.0412 obtained using the theoretical null distribution. We can plot a histogram of the re-sampling-based test statistics in order to reproduce Figure 13.7.\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.hist(Tnull,\n        bins=100,\n        density=True,\n        facecolor='y',\n        label='Null')\nxval = np.linspace(-4.2, 4.2, 1001)\nax.plot(xval,\n        t_dbn.pdf(xval, D_.shape[0]-2),\n        c='r')\nax.axvline(observedT,\n           c='b',\n           label='Observed')\nax.legend()\nax.set_xlabel(\"Null Distribution of Test Statistic\");\n\nThe re-sampling-based null distribution is almost identical to the theoretical null distribution, which is displayed in red.\nFinally, we implement the plug-in re-sampling FDR approach outlined in Algorithm 13.4. Depending on the speed of your computer, calculating the FDR for all 2,308 genes in the Khan dataset may take a while. Hence, we will illustrate the approach on a random subset of 100 genes. For each gene, we first compute the observed test statistic, and then produce 10,000 re-sampled test statistics. This may take a few minutes to run. If you are in a rush, then you could set B equal to a smaller value (e.g. B=500).\n\nm, B = 100, 10000\nidx = rng.choice(Khan['xtest'].columns, m, replace=False)\nT_vals = np.empty(m)\nTnull_vals = np.empty((m, B))\n\nfor j in range(m):\n    col = idx[j]\n    T_vals[j] = ttest_ind(D2[col],\n                          D4[col],\n                          equal_var=True).statistic\n    D_ = np.hstack([D2[col], D4[col]])\n    D_null = D_.copy()\n    for b in range(B):\n        rng.shuffle(D_null)\n        ttest_ = ttest_ind(D_null[:n_],\n                           D_null[n_:],\n                           equal_var=True)\n        Tnull_vals[j,b] = ttest_.statistic\n\nNext, we compute the number of rejected null hypotheses \\(R\\), the estimated number of false positives \\(\\widehat{V}\\), and the estimated FDR, for a range of threshold values \\(c\\) in Algorithm 13.4. The threshold values are chosen using the absolute values of the test statistics from the 100 genes.\n\ncutoffs = np.sort(np.abs(T_vals))\nFDRs, Rs, Vs = np.empty((3, m))\nfor j in range(m):\n   R = np.sum(np.abs(T_vals) >= cutoffs[j])\n   V = np.sum(np.abs(Tnull_vals) >= cutoffs[j]) / B\n   Rs[j] = R\n   Vs[j] = V\n   FDRs[j] = V / R\n\nNow, for any given FDR, we can find the genes that will be rejected. For example, with FDR controlled at 0.1, we reject 15 of the 100 null hypotheses. On average, we would expect about one or two of these genes (i.e. 10% of 15) to be false discoveries. At an FDR of 0.2, we can reject the null hypothesis for 28 genes, of which we expect around six to be false discoveries.\nThe variable idx stores which genes were included in our 100 randomly-selected genes. Let’s look at the genes whose estimated FDR is less than 0.1.\n\nsorted(idx[np.abs(T_vals) >= cutoffs[FDRs < 0.1].min()])\n\nAt an FDR threshold of 0.2, more genes are selected, at the cost of having a higher expected proportion of false discoveries.\n\nsorted(idx[np.abs(T_vals) >= cutoffs[FDRs < 0.2].min()])\n\nThe next line generates Figure 13.11, which is similar to Figure 13.9, except that it is based on only a subset of the genes.\n\nfig, ax = plt.subplots()\nax.plot(Rs, FDRs, 'b', linewidth=3)\nax.set_xlabel(\"Number of Rejections\")\nax.set_ylabel(\"False Discovery Rate\");"
  },
  {
    "objectID": "python-notebooks/Ch14-surv-lab.html",
    "href": "python-notebooks/Ch14-surv-lab.html",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "",
    "text": "We will want to be able to see plots in the notebook. We will therefore include the following as introduced in Chapter 2:\n\n%matplotlib inline\n\n\n\nWe again collect the new imports needed for this lab.\n\nfrom lifelines import \\\n     (KaplanMeierFitter,\n      CoxPHFitter)\nfrom lifelines.statistics import \\\n     (logrank_test,\n      multivariate_logrank_test)\nfrom ISLP.survival import sim_time\n\nIn this lab, we perform survival analyses on three separate data sets. In the first section we analyze the BrainCancer data . Next, we examine the Publication data . Finally, we explore explores a simulated call center data set.\nWe begin by importing some of our libraries at this top level. This makes the code more readable, as scanning the first few lines of the notebook tell us what libraries are used in this notebook.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom ISLP.models import ModelSpec as MS\nfrom ISLP import load_data\n\n\n\n\n\nWe begin with the BrainCancer data set, contained in the ISLP package.\n\nBrainCancer = load_data('BrainCancer')\nBrainCancer.columns\n\nThe rows index the 88 patients, while the columns contain the 8 predictors. We first briefly examine the data.\n\nBrainCancer['sex'].value_counts()\n\n\nBrainCancer['diagnosis'].value_counts()\n\n\nBrainCancer['status'].value_counts()\n\nBefore beginning an analysis, it is important to know how the status variable has been coded. Most software uses the convention that a status of 1 indicates an uncensored observation, and a status of 0 indicates a censored observation. But some scientists might use the opposite coding. For the BrainCancer data set 35 patients died before the end of the study.\nTo begin the analysis, we re-create a Kaplan-Meier survival curve shown in the book. The main package we will use for survival analysis is lifelines. The variable time corresponds to \\(y_i\\), the time to the \\(i\\)th event (either censoring or death). The first argument to km.fit are the event times with the second argument being the censoring variable with a 1 indicating an observed failure time. The plot method plots a curve with pointwise confidence intervals. By default, they produce 90% confidence intervals. This can be changed by setting the alpha argument to 1 minus the desired confidence level.\n\nkm = KaplanMeierFitter()\nkm_brain = km.fit(BrainCancer['time'],\n                  BrainCancer['status'])\nkm_brain.plot(label='Kaplan Meier estimate')\n\nNext we create Kaplan-Meier survival curves that are stratified by sex, in order to reproduce a second figure from the book. We do this by using the groupby method of a DataFrame. This method returns a generator that can be iterated over in the for loop. In this case, the items in the for loop are 2-tuples representing the groups: the first entry is the value of the grouping column sex while the 2nd value is the DataFrame consisting of all rows in the DataFrame matching that value of sex. We will want to use this data below in the log-rank test, hence we store this information in the dictionary by_sex. Finally, we have also used the notion of to automatically label the different lines in the plot. String interpolation is a powerful technique to format strings – python has many ways to facilitate such operations.\n\nby_sex = {}\nfor sex, df in BrainCancer.groupby('sex'):\n    by_sex[sex] = df\n    km_sex = km.fit(df['time'],\n                    df['status'])\n    km_sex.plot(label='Sex=%s' % sex)\n\nAs discussed in the book, we can perform a log-rank test to compare the survival of males to females. We use the logrank_test function from the lifelines.statistics module. The first two arguments are the event times, with the second denoting the corresponding (optional) censoring indicators.\n\nlogrank_test(by_sex['Male']['time'],\n             by_sex['Female']['time'],\n             by_sex['Male']['status'],\n             by_sex['Female']['status'])\n\nThe resulting \\(p\\)-value is \\(0.23\\), indicating no evidence of a difference in survival between the two sexes.\nNext, we fit Cox proportional hazards models using the CoxPHFitter estimator from lifelines. To begin, we consider a model that uses sex as the only predictor.\n\ncoxph = CoxPHFitter # shorthand\nsex_df = BrainCancer[['time', 'status', 'sex']]\nmodel_df = MS(['time', 'status', 'sex'],\n              intercept=False).fit_transform(sex_df)\ncox_fit = coxph().fit(model_df,\n                      'time',\n                      'status')\ncox_fit.summary[['coef', 'se(coef)', 'p']]\n\nThe first argument to fit should be a data frame containing at least the event time (the second argument time in this case) as well as an optional censoring variable (the argument status in this case). Note also that the Cox model does not include an intercept, which is why we used the intercept=False argument to ModelSpec above. It is possible to obtain the likelihood ratio test comparing this model to the one with no features as follows:\n\ncox_fit.log_likelihood_ratio_test()\n\nRegardless of which test we use, we see that there is no clear evidence for a difference in survival between males and females. As we learned in this chapter, the score test from the Cox model is exactly equal to the log rank test statistic!\nNow we fit a model that makes use of additional predictors. We first note that one of our diagnosis values is missing, hence we drop that observation before continuing.\n\ncleaned = BrainCancer.dropna()\nall_MS = MS(cleaned.columns,\n            intercept=False)\nall_df = all_MS.fit_transform(cleaned)\nfit_all = coxph().fit(all_df, \n                      'time', \n                      'status')\nfit_all.summary[['coef', 'se(coef)', 'p']]\n\nThe diagnosis variable has been coded so that the baseline corresponds to HG glioma. The results indicate that the risk associated with HG glioma is more than eight times (i.e. \\(e^{2.15}=8.62\\)) the risk associated with meningioma. In other words, after adjusting for the other predictors, patients with HG glioma have much worse survival compared to those with meningioma. In addition, larger values of the Karnofsky index, ki, are associated with lower risk, i.e. longer survival.\nFinally, we plot estimated survival curves for each diagnosis category, adjusting for the other predictors. To make these plots, we set the values of the other predictors equal to the mean for quantitative variables and equal to the mode for categorical. To do this, we use the apply() method across rows (i.e. axis=0) with a function representative that checks if a column is categorical or not.\n\nlevels = cleaned['diagnosis'].unique()\ndef representative(series):\n    if hasattr(series.dtype, 'categories'):\n        return pd.Series.mode(series)\n    else:\n        return series.mean()\nmodal_data = cleaned.apply(representative, \n                           axis=0)\n\nWe make four copies of the column means and assign the diagnosis column to be the four different diagnoses.\n\nmodal_df = pd.DataFrame([modal_data.iloc[0] for _ in range(len(levels))])\nmodal_df['diagnosis'] = levels\nmodal_df\n\nWe then construct the design matrix based on the model specification all_MS used to fit the model, dropping the time and status variables as these are not used to predict the survival functioin.\n\nmodal_X = all_MS.transform(modal_df)#.drop(columns=['time', 'status'])\nmodal_X.index = levels\nmodal_X\n\nThe estimated survival function can be found using the predict_survival_function() method.\n\npredicted_survival = fit_all.predict_survival_function(modal_X)\npredicted_survival\n\nThis returns a data frame, whose plot methods yields the different survival curves. To avoid clutter in the plots, we do not display confidence intervals.\n\nfig, ax = plt.subplots(1, 1, figsize=(10, 10))\npredicted_survival.plot(ax=ax);\n\n\n\n\nThe Publication data can be found in the ISLP package. We begin by plotting the Kaplan-Meier curves stratified on the posres variable, which records whether the study had a positive or negative result.\n\nPublication = load_data('Publication')\nby_result = {}\nfor result, df in Publication.groupby('posres'):\n    by_result[result] = df\n    km_result = km.fit(df['time'], df['status'])\n    km_result.plot(label='Result=%d' % result)\n\nAs discussed previously, the \\(p\\)-values from fitting Cox’s proportional hazards model to the posres variable are quite large, providing no evidence of a difference in time-to-publication between studies with positive versus negative results.\n\nposres_df = MS(['posres',\n                'time',\n                'status'], intercept=False).fit_transform(Publication)\nposres_fit = coxph().fit(posres_df,\n                         'time',\n                         'status')\nposres_fit.summary[['coef', 'se(coef)', 'p']]\n\nAs expected, the log-rank test provides an identical conclusion.\n\nlogrank_test(by_result[0]['time'],\n             by_result[1]['time'],\n             by_result[0]['status'],\n             by_result[1]['status'])\n\nHowever, the results change dramatically when we include other predictors in the model. Here we have excluded the funding mechanism variable.\n\nmodel = MS(Publication.columns.drop('mech'),\n           intercept=False)\ncoxph().fit(model.fit_transform(Publication),\n            'time',\n            'status').summary[['coef', 'se(coef)', 'p']]\n\nWe see that there are a number of statistically significant variables, including whether the trial focused on a clinical endpoint, the impact of the study, and whether the study had positive or negative results.\n\n\n\nIn this section, we will simulate survival data using the relationship between cumulative hazard and the survival function explored in an exercise. Our simulated data will represent the observed wait times (in seconds) for 2,000 customers who have phoned a call center. In this context, censoring occurs if a customer hangs up before his or her call is answered.\nThere are three covariates: Operators (the number of call center operators available at the time of the call, which can range from \\(5\\) to \\(15\\)), Center (either A, B, or C), and Time of day (Morning, Afternoon, or Evening). We generate data for these covariates so that all possibilities are equally likely: for instance, morning, afternoon and evening calls are equally likely, and any number of operators from \\(5\\) to \\(15\\) is equally likely. We use the ModelSpec function from the ISLP.models package introduced in Chapter 3.\n\nnp.random.seed(10)\nN = 2000\nOperators = np.random.choice(np.arange(5, 16),\n                             N,\n                             replace=True)\nCenter = np.random.choice(['A', 'B', 'C'], \n                          N,\n                          replace=True)\nTime = np.random.choice(['Morn.', 'After.', 'Even.'], \n                        N,\n                        replace=True)\nD = pd.DataFrame({'Operators': Operators,\n                  'Center': pd.Categorical(Center),\n                  'Time': pd.Categorical(Time)})      \nmodel = MS(['Operators',\n            'Center',\n            'Time'],\n           intercept=False)\nX = model.fit_transform(D)\n\nIt is worthwhile to take a peek at the design matrix X, so that we can be sure that we understand how the variables have been coded. By default, the levels of categorical variables are sorted and the first column of the usual one-hot encoding of the variable is dropped.\n\nX[:5]\n\nNext, we specify the coefficients and the hazard function.\n\ntrue_beta = np.array([0.04, -0.3, 0, 0.2, -0.2])\ntrue_linpred = X.dot(true_beta)\nhazard = lambda t: 1e-5 * t\n\nWe use the function sim_time from the ISLP.survival package. This function uses the relationship between the survival function and cumulative hazard \\(S(t) = \\exp(-H(t))\\) and the specific form of the cumulative hazard function in the Cox model to simulate data based on values of the linear predictor true_linpred and the cumulative hazard. We can generate if we know the inverse of the cumulative hazard function.\n\ncum_hazard = lambda t: 1e-5 * t**2 / 2\n\nHere, we have set the coefficient associated with Operators to equal \\(0.04\\); in other words, each additional operator leads to a \\(e^{0.04}=1.041\\)-fold increase in the “risk” that the call will be answered, given the Center and Time covariates. This makes sense: the greater the number of operators at hand, the shorter the wait time! The coefficient associated with Center == B is \\(-0.3\\), and Center == A is treated as the baseline. This means that the risk of a call being answered at Center B is 0.74 times the risk that it will be answered at Center A; in other words, the wait times are a bit longer at Center B.\nWe are now ready to generate data under the Cox proportional hazards model. We’ll truncate the maximum time to 1000 seconds to keep simulated wait times reasonable.\n\nW = np.array([sim_time(l, cum_hazard)\n              for l in true_linpred])\nD['Wait time'] = np.clip(W, 0, 1000)\n\nWe now simulate our censoring variable, for which we assume 90% of calls were answered (Failed==1) before the customer hungup (Failed==0).\n\nD['Failed'] = np.random.choice([1, 0],\n                                N,\n                                p=[0.9, 0.1])\nD[:5]\n\n\nD['Failed'].mean()\n\nWe now plot Kaplan-Meier survival curves. First, we stratify by Center\n\nby_center = {}\nfor center, df in D.groupby('Center'):\n    by_center[center] = df\n    km_center = km.fit(df['Wait time'], df['Failed'])\n    km_center.plot(label='Center=%s' % center)\nax = plt.gca()\nax.set_title(\"Probability of Still Being on Hold\")\n\nNext, we stratify by Time.\n\nby_time = {}\nfor time, df in D.groupby('Time'):\n    by_time[time] = df\n    km_time = km.fit(df['Wait time'], df['Failed'])\n    km_time.plot(label='Time=%s' % time)\nax = plt.gca()\nax.set_title(\"Probability of Still Being on Hold\")\n\nIt seems that calls at Call Center B take longer to be answered than calls at Centers A and C. Similarly, it appears that wait times are longest in the morning and shortest in the evening hours. We can use a log-rank test to determine whether these differences are statistically significant using multivariate_logrank_test.\n\nmultivariate_logrank_test(D['Wait time'],\n                          D['Center'],\n                          D['Failed'])\n\nNext, we consider the effect of Time.\n\nmultivariate_logrank_test(D['Wait time'],\n                          D['Time'],\n                          D['Failed'])\n\nAs in the case of a categorical variable with 2 outcomes, these results are similar to the likelihood ratio test from the Cox proportional hazards model. First, let’s look at the results for Center.\n\nX = MS(['Wait time',\n        'Failed',\n        'Center'],\n        intercept=False).fit_transform(D)\nF = coxph().fit(X, 'Wait time', 'Failed')\nF.log_likelihood_ratio_test()\n\nNext, the results for Time.\n\nX = MS(['Wait time',\n        'Failed',\n        'Time'],\n       intercept=False).fit_transform(D)\nF = coxph().fit(X, 'Wait time', 'Failed')\nF.log_likelihood_ratio_test()\n\nWe find that differences between centers are highly significant, as are differences between times of day.\nFinally, we fit a complete Cox’s proportional hazards model to the data.\n\nX = MS(D.columns,\n       intercept=False).fit_transform(D)\nfit_queuing = coxph().fit(\n                  X,\n                 'Wait time',\n                 'Failed')\nfit_queuing.summary[['coef', 'se(coef)', 'p']]\n\nThe \\(p\\)-values for Center B and evening time are very small. It is also clear that the hazard — that is, the instantaneous risk that a call will be answered — increases with the number of operators. Since we generated the data ourselves, we know that the true coefficients for Center B, Center C, Operators evening time, and morning time are \\(-0.3\\), \\(0\\), \\(0.04\\), and \\(0.2\\), \\(-0.2\\), respectively. The coefficient estimates resulting from the Cox model are fairly accurate."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#getting-started",
    "href": "python-notebooks/Ch2-statlearn-lab.html#getting-started",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Getting Started",
    "text": "Getting Started\nTo run the labs in this book, you will need two things:\n\nAn installation of Python3, which is the specific version of Python used in the labs.\nAccess to Jupyter, a very popular Python interface that runs code through a file called a notebook.\n\nYou can download and install Python3 by following the instructions available at anaconda.com.\nThere are a number of ways to get access to Jupyter. Here are just a few:\n\nUsing Google’s Colaboratory service: colab.research.google.com/.\nUsing JupyterHub, available at jupyter.org/hub.\nUsing your own jupyter installation. Installation instructions are available at jupyter.org/install.\n\nPlease see the Python resources page on the book website statlearning.com for up-to-date information about getting Python and Jupyter working on your computer.\nYou will need to install the ISLP package, which provides access to the datasets and custom-built functions that we provide. Inside a macOS or Linux terminal type pip install ISLP; this also installs most other packages needed in the labs. The Python resources page has a link to the ISLP documentation website.\nTo run this lab, download the file Ch2-statlearn-lab.ipynb from the Python resources page. Now run the following code at the command line: jupyter lab Ch2-statlearn-lab.ipynb.\nIf you’re using Windows, you can use the start menu to access anaconda, and follow the links. For example, to install ISLP and run this lab, you can run the same code above in an anaconda shell."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#basic-commands",
    "href": "python-notebooks/Ch2-statlearn-lab.html#basic-commands",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Basic Commands",
    "text": "Basic Commands\nIn this lab, we will introduce some simple Python commands. For more resources about Python in general, readers may want to consult the tutorial at docs.python.org/3/tutorial/.\nLike most programming languages, Python uses functions to perform operations. To run a function called fun, we type fun(input1,input2), where the inputs (or arguments) input1 and input2 tell Python how to run the function. A function can have any number of inputs. For example, the print() function outputs a text representation of all of its arguments to the console.\n\nprint('fit a model with', 11, 'variables')\n\nThe following command will provide information about the print() function.\n\nprint?\n\nAdding two integers in Python is pretty intuitive.\n\n3 + 5\n\nIn Python, textual data is handled using strings. For instance, \"hello\" and 'hello' are strings. We can concatenate them using the addition + symbol.\n\n\"hello\" + \" \" + \"world\"\n\nA string is actually a type of sequence: this is a generic term for an ordered list. The three most important types of sequences are lists, tuples, and strings.\nWe introduce lists now.\nThe following command instructs Python to join together the numbers 3, 4, and 5, and to save them as a list named x. When we type x, it gives us back the list.\n\nx = [3, 4, 5]\nx\n\nNote that we used the brackets [] to construct this list.\nWe will often want to add two sets of numbers together. It is reasonable to try the following code, though it will not produce the desired results.\n\ny = [4, 9, 7]\nx + y\n\nThe result may appear slightly counterintuitive: why did Python not add the entries of the lists element-by-element? In Python, lists hold arbitrary objects, and are added using concatenation. In fact, concatenation is the behavior that we saw earlier when we entered \"hello\" + \" \" + \"world\".\nThis example reflects the fact that Python is a general-purpose programming language. Much of Python’s data-specific functionality comes from other packages, notably numpy and pandas. In the next section, we will introduce the numpy package. More information about numpy can be found at docs.scipy.org/doc/numpy/user/quickstart.html."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#introduction-to-numerical-python",
    "href": "python-notebooks/Ch2-statlearn-lab.html#introduction-to-numerical-python",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Introduction to Numerical Python",
    "text": "Introduction to Numerical Python\nAs mentioned earlier, this book makes use of functionality that is contained in the numpy library, or package. A package is a collection of modules that are not necessarily included in the base Python distribution. The name numpy is an abbreviation for numerical Python.\nTo access numpy, we must first import it.\n\nimport numpy as np \n\nIn the previous line, we named the numpy module np; an abbreviation for easier referencing.\nIn numpy, an array is a generic term for a multidimensional set of numbers. We use the np.array() function to define x and y, which are one-dimensional arrays, i.e. vectors.\n\nx = np.array([3, 4, 5])\ny = np.array([4, 9, 7])\n\nNote that if you forgot to run the import numpy as np command earlier, then you will encounter an error in calling the np.array() function in the previous line. The syntax np.array() indicates that the function being called is part of the numpy package, which we have abbreviated as np.\nSince x and y have been defined using np.array(), we get a sensible result when we add them together. Compare this to our results in the previous section, when we tried to add two lists without using numpy.\n\nx + y\n\nIn numpy, matrices are typically represented as two-dimensional arrays, and vectors as one-dimensional arrays. {While it is also possible to create matrices using np.matrix(), we will use np.array() throughout the labs in this book.} We can create a two-dimensional array as follows.\n\nx = np.array([[1, 2], [3, 4]])\nx\n\nThe object x has several attributes, or associated objects. To access an attribute of x, we type x.attribute, where we replace attribute with the name of the attribute. For instance, we can access the ndim attribute of x as follows.\n\nx.ndim\n\nThe output indicates that x is a two-dimensional array.\nSimilarly, x.dtype is the data type attribute of the object x. This indicates that x is comprised of 64-bit integers:\n\nx.dtype\n\nWhy is x comprised of integers? This is because we created x by passing in exclusively integers to the np.array() function. If we had passed in any decimals, then we would have obtained an array of floating point numbers (i.e. real-valued numbers).\n\nnp.array([[1, 2], [3.0, 4]]).dtype\n\nTyping fun? will cause Python to display documentation associated with the function fun, if it exists. We can try this for np.array().\n\nnp.array?\n\nThis documentation indicates that we could create a floating point array by passing a dtype argument into np.array().\n\nnp.array([[1, 2], [3, 4]], float).dtype\n\nThe array x is two-dimensional. We can find out the number of rows and columns by looking at its shape attribute.\n\nx.shape\n\nA method is a function that is associated with an object. For instance, given an array x, the expression x.sum() sums all of its elements, using the sum() method for arrays. The call x.sum() automatically provides x as the first argument to its sum() method.\n\nx = np.array([1, 2, 3, 4])\nx.sum()\n\nWe could also sum the elements of x by passing in x as an argument to the np.sum() function.\n\nx = np.array([1, 2, 3, 4])\nnp.sum(x)\n\nAs another example, the reshape() method returns a new array with the same elements as x, but a different shape. We do this by passing in a tuple in our call to reshape(), in this case (2, 3). This tuple specifies that we would like to create a two-dimensional array with \\(2\\) rows and \\(3\\) columns. {Like lists, tuples represent a sequence of objects. Why do we need more than one way to create a sequence? There are a few differences between tuples and lists, but perhaps the most important is that elements of a tuple cannot be modified, whereas elements of a list can be.}\nIn what follows, the \\n character creates a new line.\n\nx = np.array([1, 2, 3, 4, 5, 6])\nprint('beginning x:\\n', x)\nx_reshape = x.reshape((2, 3))\nprint('reshaped x:\\n', x_reshape)\n\nThe previous output reveals that numpy arrays are specified as a sequence of rows. This is called row-major ordering, as opposed to column-major ordering.\nPython (and hence numpy) uses 0-based indexing. This means that to access the top left element of x_reshape, we type in x_reshape[0,0].\n\nx_reshape[0, 0] \n\nSimilarly, x_reshape[1,2] yields the element in the second row and the third column of x_reshape.\n\nx_reshape[1, 2] \n\nSimilarly, x[2] yields the third entry of x.\nNow, let’s modify the top left element of x_reshape. To our surprise, we discover that the first element of x has been modified as well!\n\nprint('x before we modify x_reshape:\\n', x)\nprint('x_reshape before we modify x_reshape:\\n', x_reshape)\nx_reshape[0, 0] = 5\nprint('x_reshape after we modify its top left element:\\n', x_reshape)\nprint('x after we modify top left element of x_reshape:\\n', x)\n\nModifying x_reshape also modified x because the two objects occupy the same space in memory.\nWe just saw that we can modify an element of an array. Can we also modify a tuple? It turns out that we cannot — and trying to do so introduces an exception, or error.\n\nmy_tuple = (3, 4, 5)\nmy_tuple[0] = 2\n\nWe now briefly mention some attributes of arrays that will come in handy. An array’s shape attribute contains its dimension; this is always a tuple. The ndim attribute yields the number of dimensions, and T provides its transpose.\n\nx_reshape.shape, x_reshape.ndim, x_reshape.T\n\nNotice that the three individual outputs (2,3), 2, and array([[5, 4],[2, 5], [3,6]]) are themselves output as a tuple.\nWe will often want to apply functions to arrays. For instance, we can compute the square root of the entries using the np.sqrt() function:\n\nnp.sqrt(x)\n\nWe can also square the elements:\n\nx**2\n\nWe can compute the square roots using the same notation, raising to the power of \\(1/2\\) instead of 2.\n\nx**0.5\n\nThroughout this book, we will often want to generate random data. The np.random.normal() function generates a vector of random normal variables. We can learn more about this function by looking at the help page, via a call to np.random.normal?. The first line of the help page reads normal(loc=0.0, scale=1.0, size=None). This signature line tells us that the function’s arguments are loc, scale, and size. These are keyword arguments, which means that when they are passed into the function, they can be referred to by name (in any order). {Python also uses positional arguments. Positional arguments do not need to use a keyword. To see an example, type in np.sum?. We see that a is a positional argument, i.e. this function assumes that the first unnamed argument that it receives is the array to be summed. By contrast, axis and dtype are keyword arguments: the position in which these arguments are entered into np.sum() does not matter.} By default, this function will generate random normal variable(s) with mean (loc) \\(0\\) and standard deviation (scale) \\(1\\); furthermore, a single random variable will be generated unless the argument to size is changed.\nWe now generate 50 independent random variables from a \\(N(0,1)\\) distribution.\n\nx = np.random.normal(size=50)\nx\n\nWe create an array y by adding an independent \\(N(50,1)\\) random variable to each element of x.\n\ny = x + np.random.normal(loc=50, scale=1, size=50)\n\nThe np.corrcoef() function computes the correlation matrix between x and y. The off-diagonal elements give the correlation between x and y.\n\nnp.corrcoef(x, y)\n\nIf you’re following along in your own Jupyter notebook, then you probably noticed that you got a different set of results when you ran the past few commands. In particular, each time we call np.random.normal(), we will get a different answer, as shown in the following example.\n\nprint(np.random.normal(scale=5, size=2))\nprint(np.random.normal(scale=5, size=2)) \n\nIn order to ensure that our code provides exactly the same results each time it is run, we can set a random seed using the np.random.default_rng() function. This function takes an arbitrary, user-specified integer argument. If we set a random seed before generating random data, then re-running our code will yield the same results. The object rng has essentially all the random number generating methods found in np.random. Hence, to generate normal data we use rng.normal().\n\nrng = np.random.default_rng(1303)\nprint(rng.normal(scale=5, size=2))\nrng2 = np.random.default_rng(1303)\nprint(rng2.normal(scale=5, size=2)) \n\nThroughout the labs in this book, we use np.random.default_rng() whenever we perform calculations involving random quantities within numpy. In principle, this should enable the reader to exactly reproduce the stated results. However, as new versions of numpy become available, it is possible that some small discrepancies may occur between the output in the labs and the output from numpy.\nThe np.mean(), np.var(), and np.std() functions can be used to compute the mean, variance, and standard deviation of arrays. These functions are also available as methods on the arrays.\n\nrng = np.random.default_rng(3)\ny = rng.standard_normal(10)\nnp.mean(y), y.mean()\n\n\nnp.var(y), y.var(), np.mean((y - y.mean())**2)\n\nNotice that by default np.var() divides by the sample size \\(n\\) rather than \\(n-1\\); see the ddof argument in np.var?.\n\nnp.sqrt(np.var(y)), np.std(y)\n\nThe np.mean(), np.var(), and np.std() functions can also be applied to the rows and columns of a matrix. To see this, we construct a \\(10 \\times 3\\) matrix of \\(N(0,1)\\) random variables, and consider computing its row sums.\n\nX = rng.standard_normal((10, 3))\nX\n\nSince arrays are row-major ordered, the first axis, i.e. axis=0, refers to its rows. We pass this argument into the mean() method for the object X.\n\nX.mean(axis=0)\n\nThe following yields the same result.\n\nX.mean(0)"
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#graphics",
    "href": "python-notebooks/Ch2-statlearn-lab.html#graphics",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Graphics",
    "text": "Graphics\nIn Python, common practice is to use the library matplotlib for graphics. However, since Python was not written with data analysis in mind, the notion of plotting is not intrinsic to the language. We will use the subplots() function from matplotlib.pyplot to create a figure and the axes onto which we plot our data. For many more examples of how to make plots in Python, readers are encouraged to visit matplotlib.org/stable/gallery/.\nIn matplotlib, a plot consists of a figure and one or more axes. You can think of the figure as the blank canvas upon which one or more plots will be displayed: it is the entire plotting window. The axes contain important information about each plot, such as its \\(x\\)- and \\(y\\)-axis labels, title, and more. (Note that in matplotlib, the word axes is not the plural of axis: a plot’s axes contains much more information than just the \\(x\\)-axis and the \\(y\\)-axis.)\nWe begin by importing the subplots() function from matplotlib. We use this function throughout when creating figures. The function returns a tuple of length two: a figure object as well as the relevant axes object. We will typically pass figsize as a keyword argument. Having created our axes, we attempt our first plot using its plot() method. To learn more about it, type ax.plot?.\n\nfrom matplotlib.pyplot import subplots\nfig, ax = subplots(figsize=(8, 8))\nx = rng.standard_normal(100)\ny = rng.standard_normal(100)\nax.plot(x, y);\n\nWe pause here to note that we have unpacked the tuple of length two returned by subplots() into the two distinct variables fig and ax. Unpacking is typically preferred to the following equivalent but slightly more verbose code:\n\noutput = subplots(figsize=(8, 8))\nfig = output[0]\nax = output[1]\n\nWe see that our earlier cell produced a line plot, which is the default. To create a scatterplot, we provide an additional argument to ax.plot(), indicating that circles should be displayed.\n\nfig, ax = subplots(figsize=(8, 8))\nax.plot(x, y, 'o');\n\nDifferent values of this additional argument can be used to produce different colored lines as well as different linestyles.\nAs an alternative, we could use the ax.scatter() function to create a scatterplot.\n\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o');\n\nNotice that in the code blocks above, we have ended the last line with a semicolon. This prevents ax.plot(x, y) from printing text to the notebook. However, it does not prevent a plot from being produced. If we omit the trailing semi-colon, then we obtain the following output:\n\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o')\n\nIn what follows, we will use trailing semicolons whenever the text that would be output is not germane to the discussion at hand.\nTo label our plot, we make use of the set_xlabel(), set_ylabel(), and set_title() methods of ax.\n\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(x, y, marker='o')\nax.set_xlabel(\"this is the x-axis\")\nax.set_ylabel(\"this is the y-axis\")\nax.set_title(\"Plot of X vs Y\");\n\nHaving access to the figure object fig itself means that we can go in and change some aspects and then redisplay it. Here, we change the size from (8, 8) to (12, 3).\n\nfig.set_size_inches(12,3)\nfig\n\nOccasionally we will want to create several plots within a figure. This can be achieved by passing additional arguments to subplots(). Below, we create a \\(2 \\times 3\\) grid of plots in a figure of size determined by the figsize argument. In such situations, there is often a relationship between the axes in the plots. For example, all plots may have a common \\(x\\)-axis. The subplots() function can automatically handle this situation when passed the keyword argument sharex=True. The axes object below is an array pointing to different plots in the figure.\n\nfig, axes = subplots(nrows=2,\n                     ncols=3,\n                     figsize=(15, 5))\n\nWe now produce a scatter plot with 'o' in the second column of the first row and a scatter plot with '+' in the third column of the second row.\n\naxes[0,1].plot(x, y, 'o')\naxes[1,2].scatter(x, y, marker='+')\nfig\n\nType subplots? to learn more about subplots().\nTo save the output of fig, we call its savefig() method. The argument dpi is the dots per inch, used to determine how large the figure will be in pixels.\n\nfig.savefig(\"Figure.png\", dpi=400)\nfig.savefig(\"Figure.pdf\", dpi=200);\n\nWe can continue to modify fig using step-by-step updates; for example, we can modify the range of the \\(x\\)-axis, re-save the figure, and even re-display it.\n\naxes[0,1].set_xlim([-1,1])\nfig.savefig(\"Figure_updated.jpg\")\nfig\n\nWe now create some more sophisticated plots. The ax.contour() method produces a contour plot in order to represent three-dimensional data, similar to a topographical map. It takes three arguments:\n\nA vector of x values (the first dimension),\nA vector of y values (the second dimension), and\nA matrix whose elements correspond to the z value (the third dimension) for each pair of (x,y) coordinates.\n\nTo create x and y, we’ll use the function np.linspace(). The command np.linspace(a, b, n) returns a vector of n numbers starting at a and ending at b.\n\nfig, ax = subplots(figsize=(8, 8))\nx = np.linspace(-np.pi, np.pi, 50)\ny = x\nf = np.multiply.outer(np.cos(y), 1 / (1 + x**2))\nax.contour(x, y, f);\n\nWe can increase the resolution by adding more levels to the image.\n\nfig, ax = subplots(figsize=(8, 8))\nax.contour(x, y, f, levels=45);\n\nTo fine-tune the output of the ax.contour() function, take a look at the help file by typing ?plt.contour.\nThe ax.imshow() method is similar to ax.contour(), except that it produces a color-coded plot whose colors depend on the z value. This is known as a heatmap, and is sometimes used to plot temperature in weather forecasts.\n\nfig, ax = subplots(figsize=(8, 8))\nax.imshow(f);"
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#sequences-and-slice-notation",
    "href": "python-notebooks/Ch2-statlearn-lab.html#sequences-and-slice-notation",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Sequences and Slice Notation",
    "text": "Sequences and Slice Notation\nAs seen above, the function np.linspace() can be used to create a sequence of numbers.\n\nseq1 = np.linspace(0, 10, 11)\nseq1\n\nThe function np.arange() returns a sequence of numbers spaced out by step. If step is not specified, then a default value of \\(1\\) is used. Let’s create a sequence that starts at \\(0\\) and ends at \\(10\\).\n\nseq2 = np.arange(0, 10)\nseq2\n\nWhy isn’t \\(10\\) output above? This has to do with slice notation in Python. Slice notation\nis used to index sequences such as lists, tuples and arrays. Suppose we want to retrieve the fourth through sixth (inclusive) entries of a string. We obtain a slice of the string using the indexing notation [3:6].\n\n\"hello world\"[3:6]\n\nIn the code block above, the notation 3:6 is shorthand for slice(3,6) when used inside [].\n\n\"hello world\"[slice(3,6)]\n\nYou might have expected slice(3,6) to output the fourth through seventh characters in the text string (recalling that Python begins its indexing at zero), but instead it output the fourth through sixth. This also explains why the earlier np.arange(0, 10) command output only the integers from \\(0\\) to \\(9\\). See the documentation slice? for useful options in creating slices."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#indexing-data",
    "href": "python-notebooks/Ch2-statlearn-lab.html#indexing-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Indexing Data",
    "text": "Indexing Data\nTo begin, we create a two-dimensional numpy array.\n\nA = np.array(np.arange(16)).reshape((4, 4))\nA\n\nTyping A[1,2] retrieves the element corresponding to the second row and third column. (As usual, Python indexes from \\(0.\\))\n\nA[1,2]\n\nThe first number after the open-bracket symbol [ refers to the row, and the second number refers to the column.\n\nIndexing Rows, Columns, and Submatrices\nTo select multiple rows at a time, we can pass in a list specifying our selection. For instance, [1,3] will retrieve the second and fourth rows:\n\nA[[1,3]]\n\nTo select the first and third columns, we pass in [0,2] as the second argument in the square brackets. In this case we need to supply the first argument : which selects all rows.\n\nA[:,[0,2]]\n\nNow, suppose that we want to select the submatrix made up of the second and fourth rows as well as the first and third columns. This is where indexing gets slightly tricky. It is natural to try to use lists to retrieve the rows and columns:\n\nA[[1,3],[0,2]]\n\nOops — what happened? We got a one-dimensional array of length 2 identical to\n\nnp.array([A[1,0],A[3,2]])\n\nSimilarly, the following code fails to extract the submatrix comprised of the second and fourth rows and the first, third, and fourth columns:\n\nA[[1,3],[0,2,3]]\n\nWe can see what has gone wrong here. When supplied with two indexing lists, the numpy interpretation is that these provide pairs of \\(i,j\\) indices for a series of entries. That is why the pair of lists must have the same length. However, that was not our intent, since we are looking for a submatrix.\nOne easy way to do this is as follows. We first create a submatrix by subsetting the rows of A, and then on the fly we make a further submatrix by subsetting its columns.\n\nA[[1,3]][:,[0,2]]\n\nThere are more efficient ways of achieving the same result.\nThe convenience function np.ix_() allows us to extract a submatrix using lists, by creating an intermediate mesh object.\n\nidx = np.ix_([1,3],[0,2,3])\nA[idx]\n\nAlternatively, we can subset matrices efficiently using slices.\nThe slice 1:4:2 captures the second and fourth items of a sequence, while the slice 0:3:2 captures the first and third items (the third element in a slice sequence is the step size).\n\nA[1:4:2,0:3:2]\n\nWhy are we able to retrieve a submatrix directly using slices but not using lists? Its because they are different Python types, and are treated differently by numpy. Slices can be used to extract objects from arbitrary sequences, such as strings, lists, and tuples, while the use of lists for indexing is more limited.\n\n\nBoolean Indexing\nIn numpy, a Boolean is a type that equals either True or False (also represented as \\(1\\) and \\(0\\), respectively). The next line creates a vector of \\(0\\)’s, represented as Booleans, of length equal to the first dimension of A.\n\nkeep_rows = np.zeros(A.shape[0], bool)\nkeep_rows\n\nWe now set two of the elements to True.\n\nkeep_rows[[1,3]] = True\nkeep_rows\n\nNote that the elements of keep_rows, when viewed as integers, are the same as the values of np.array([0,1,0,1]). Below, we use == to verify their equality. When applied to two arrays, the == operation is applied elementwise.\n\nnp.all(keep_rows == np.array([0,1,0,1]))\n\n(Here, the function np.all() has checked whether all entries of an array are True. A similar function, np.any(), can be used to check whether any entries of an array are True.)\nHowever, even though np.array([0,1,0,1]) and keep_rows are equal according to ==, they index different sets of rows! The former retrieves the first, second, first, and second rows of A.\n\nA[np.array([0,1,0,1])]\n\nBy contrast, keep_rows retrieves only the second and fourth rows of A — i.e. the rows for which the Boolean equals TRUE.\n\nA[keep_rows]\n\nThis example shows that Booleans and integers are treated differently by numpy.\nWe again make use of the np.ix_() function to create a mesh containing the second and fourth rows, and the first, third, and fourth columns. This time, we apply the function to Booleans, rather than lists.\n\nkeep_cols = np.zeros(A.shape[1], bool)\nkeep_cols[[0, 2, 3]] = True\nidx_bool = np.ix_(keep_rows, keep_cols)\nA[idx_bool]\n\nWe can also mix a list with an array of Booleans in the arguments to np.ix_():\n\nidx_mixed = np.ix_([1,3], keep_cols)\nA[idx_mixed]\n\nFor more details on indexing in numpy, readers are referred to the numpy tutorial mentioned earlier."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#loading-data",
    "href": "python-notebooks/Ch2-statlearn-lab.html#loading-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Loading Data",
    "text": "Loading Data\nData sets often contain different types of data, and may have names associated with the rows or columns. For these reasons, they typically are best accommodated using a data frame. We can think of a data frame as a sequence of arrays of identical length; these are the columns. Entries in the different arrays can be combined to form a row. The pandas library can be used to create and work with data frame objects.\n\nReading in a Data Set\nThe first step of most analyses involves importing a data set into Python.\nBefore attempting to load a data set, we must make sure that Python knows where to find the file containing it. If the file is in the same location as this notebook file, then we are all set. Otherwise, the command os.chdir() can be used to change directory. (You will need to call import os before calling os.chdir().)\nWe will begin by reading in Auto.csv, available on the book website. This is a comma-separated file, and can be read in using pd.read_csv():\n\nimport pandas as pd\nAuto = pd.read_csv('Auto.csv')\nAuto\n\nThe book website also has a whitespace-delimited version of this data, called Auto.data. This can be read in as follows:\n\nAuto = pd.read_csv('Auto.data', delim_whitespace=True)\n\nBoth Auto.csv and Auto.data are simply text files. Before loading data into Python, it is a good idea to view it using a text editor or other software, such as Microsoft Excel.\nWe now take a look at the column of Auto corresponding to the variable horsepower:\n\nAuto['horsepower']\n\nWe see that the dtype of this column is object. It turns out that all values of the horsepower column were interpreted as strings when reading in the data. We can find out why by looking at the unique values.\n\nnp.unique(Auto['horsepower'])\n\nWe see the culprit is the value ?, which is being used to encode missing values.\nTo fix the problem, we must provide pd.read_csv() with an argument called na_values. Now, each instance of ? in the file is replaced with the value np.nan, which means not a number:\n\nAuto = pd.read_csv('Auto.data',\n                   na_values=['?'],\n                   delim_whitespace=True)\nAuto['horsepower'].sum()\n\nThe Auto.shape attribute tells us that the data has 397 observations, or rows, and nine variables, or columns.\n\nAuto.shape\n\nThere are various ways to deal with missing data. In this case, since only five of the rows contain missing observations, we choose to use the Auto.dropna() method to simply remove these rows.\n\nAuto_new = Auto.dropna()\nAuto_new.shape\n\n\n\nBasics of Selecting Rows and Columns\nWe can use Auto.columns to check the variable names.\n\nAuto = Auto_new # overwrite the previous value\nAuto.columns\n\nAccessing the rows and columns of a data frame is similar, but not identical, to accessing the rows and columns of an array. Recall that the first argument to the [] method is always applied to the rows of the array.\nSimilarly, passing in a slice to the [] method creates a data frame whose rows are determined by the slice:\n\nAuto[:3]\n\nSimilarly, an array of Booleans can be used to subset the rows:\n\nidx_80 = Auto['year'] > 80\nAuto[idx_80]\n\nHowever, if we pass in a list of strings to the [] method, then we obtain a data frame containing the corresponding set of columns.\n\nAuto[['mpg', 'horsepower']]\n\nSince we did not specify an index column when we loaded our data frame, the rows are labeled using integers 0 to 396.\n\nAuto.index\n\nWe can use the set_index() method to re-name the rows using the contents of Auto['name'].\n\nAuto_re = Auto.set_index('name')\nAuto_re\n\n\nAuto_re.columns\n\nWe see that the column 'name' is no longer there.\nNow that the index has been set to name, we can access rows of the data frame by name using the {loc[]} method of Auto:\n\nrows = ['amc rebel sst', 'ford torino']\nAuto_re.loc[rows]\n\nAs an alternative to using the index name, we could retrieve the 4th and 5th rows of Auto using the {iloc[]} method:\n\nAuto_re.iloc[[3,4]]\n\nWe can also use it to retrieve the 1st, 3rd and and 4th columns of Auto_re:\n\nAuto_re.iloc[:,[0,2,3]]\n\nWe can extract the 4th and 5th rows, as well as the 1st, 3rd and 4th columns, using a single call to iloc[]:\n\nAuto_re.iloc[[3,4],[0,2,3]]\n\nIndex entries need not be unique: there are several cars in the data frame named ford galaxie 500.\n\nAuto_re.loc['ford galaxie 500', ['mpg', 'origin']]\n\n\n\nMore on Selecting Rows and Columns\nSuppose now that we want to create a data frame consisting of the weight and origin of the subset of cars with year greater than 80 — i.e. those built after 1980. To do this, we first create a Boolean array that indexes the rows. The loc[] method allows for Boolean entries as well as strings:\n\nidx_80 = Auto_re['year'] > 80\nAuto_re.loc[idx_80, ['weight', 'origin']]\n\nTo do this more concisely, we can use an anonymous function called a lambda:\n\nAuto_re.loc[lambda df: df['year'] > 80, ['weight', 'origin']]\n\nThe lambda call creates a function that takes a single argument, here df, and returns df['year']>80. Since it is created inside the loc[] method for the dataframe Auto_re, that dataframe will be the argument supplied. As another example of using a lambda, suppose that we want all cars built after 1980 that achieve greater than 30 miles per gallon:\n\nAuto_re.loc[lambda df: (df['year'] > 80) & (df['mpg'] > 30),\n            ['weight', 'origin']\n           ]\n\nThe symbol & computes an element-wise and operation. As another example, suppose that we want to retrieve all Ford and Datsun cars with displacement less than 300. We check whether each name entry contains either the string ford or datsun using the str.contains() method of the index attribute of of the dataframe:\n\nAuto_re.loc[lambda df: (df['displacement'] < 300)\n                       & (df.index.str.contains('ford')\n                       | df.index.str.contains('datsun')),\n            ['weight', 'origin']\n           ]\n\nHere, the symbol | computes an element-wise or operation.\nIn summary, a powerful set of operations is available to index the rows and columns of data frames. For integer based queries, use the iloc[] method. For string and Boolean selections, use the loc[] method. For functional queries that filter rows, use the loc[] method with a function (typically a lambda) in the rows argument."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#for-loops",
    "href": "python-notebooks/Ch2-statlearn-lab.html#for-loops",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "For Loops",
    "text": "For Loops\nA for loop is a standard tool in many languages that repeatedly evaluates some chunk of code while varying different values inside the code. For example, suppose we loop over elements of a list and compute their sum.\n\ntotal = 0\nfor value in [3,2,19]:\n    total += value\nprint('Total is: {0}'.format(total))\n\nThe indented code beneath the line with the for statement is run for each value in the sequence specified in the for statement. The loop ends either when the cell ends or when code is indented at the same level as the original for statement. We see that the final line above which prints the total is executed only once after the for loop has terminated. Loops can be nested by additional indentation.\n\ntotal = 0\nfor value in [2,3,19]:\n    for weight in [3, 2, 1]:\n        total += value * weight\nprint('Total is: {0}'.format(total))\n\nAbove, we summed over each combination of value and weight. We also took advantage of the increment notation in Python: the expression a += b is equivalent to a = a + b. Besides being a convenient notation, this can save time in computationally heavy tasks in which the intermediate value of a+b need not be explicitly created.\nPerhaps a more common task would be to sum over (value, weight) pairs. For instance, to compute the average value of a random variable that takes on possible values 2, 3 or 19 with probability 0.2, 0.3, 0.5 respectively we would compute the weighted sum. Tasks such as this can often be accomplished using the zip() function that loops over a sequence of tuples.\n\ntotal = 0\nfor value, weight in zip([2,3,19],\n                         [0.2,0.3,0.5]):\n    total += weight * value\nprint('Weighted average is: {0}'.format(total))\n\n\nString Formatting\nIn the code chunk above we also printed a string displaying the total. However, the object total is an integer and not a string. Inserting the value of something into a string is a common task, made simple using some of the powerful string formatting tools in Python. Many data cleaning tasks involve manipulating and programmatically producing strings.\nFor example we may want to loop over the columns of a data frame and print the percent missing in each column. Let’s create a data frame D with columns in which 20% of the entries are missing i.e. set to np.nan. We’ll create the values in D from a normal distribution with mean 0 and variance 1 using rng.standard_normal() and then overwrite some random entries using rng.choice().\n\nrng = np.random.default_rng(1)\nA = rng.standard_normal((127, 5))\nM = rng.choice([0, np.nan], p=[0.8,0.2], size=A.shape)\nA += M\nD = pd.DataFrame(A, columns=['food',\n                             'bar',\n                             'pickle',\n                             'snack',\n                             'popcorn'])\nD[:3]\n\n\nfor col in D.columns:\n    template = 'Column \"{0}\" has {1:.2%} missing values'\n    print(template.format(col,\n          np.isnan(D[col]).mean()))\n\nWe see that the template.format() method expects two arguments {0} and {1:.2%}, and the latter includes some formatting information. In particular, it specifies that the second argument should be expressed as a percent with two decimal digits.\nThe reference docs.python.org/3/library/string.html includes many helpful and more complex examples."
  },
  {
    "objectID": "python-notebooks/Ch2-statlearn-lab.html#additional-graphical-and-numerical-summaries",
    "href": "python-notebooks/Ch2-statlearn-lab.html#additional-graphical-and-numerical-summaries",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Additional Graphical and Numerical Summaries",
    "text": "Additional Graphical and Numerical Summaries\nWe can use the ax.plot() or ax.scatter() functions to display the quantitative variables. However, simply typing the variable names will produce an error message, because Python does not know to look in the Auto data set for those variables.\n\nfig, ax = subplots(figsize=(8, 8))\nax.plot(horsepower, mpg, 'o');\n\nWe can address this by accessing the columns directly:\n\nfig, ax = subplots(figsize=(8, 8))\nax.plot(Auto['horsepower'], Auto['mpg'], 'o');\n\nAlternatively, we can use the plot() method with the call Auto.plot(). Using this method, the variables can be accessed by name. The plot methods of a data frame return a familiar object: an axes. We can use it to update the plot as we did previously:\n\nax = Auto.plot.scatter('horsepower', 'mpg');\nax.set_title('Horsepower vs. MPG')\n\nIf we want to save the figure that contains a given axes, we can find the relevant figure by accessing the figure attribute:\n\nfig = ax.figure\nfig.savefig('horsepower_mpg.png');\n\nWe can further instruct the data frame to plot to a particular axes object. In this case the corresponding plot() method will return the modified axes we passed in as an argument. Note that when we request a one-dimensional grid of plots, the object axes is similarly one-dimensional. We place our scatter plot in the middle plot of a row of three plots within a figure.\n\nfig, axes = subplots(ncols=3, figsize=(15, 5))\nAuto.plot.scatter('horsepower', 'mpg', ax=axes[1]);\n\nNote also that the columns of a data frame can be accessed as attributes: try typing in Auto.horsepower.\nWe now consider the cylinders variable. Typing in Auto.cylinders.dtype reveals that it is being treated as a quantitative variable. However, since there is only a small number of possible values for this variable, we may wish to treat it as qualitative. Below, we replace the cylinders column with a categorical version of Auto.cylinders. The function pd.Series() owes its name to the fact that pandas is often used in time series applications.\n\nAuto.cylinders = pd.Series(Auto.cylinders, dtype='category')\nAuto.cylinders.dtype\n\nNow that cylinders is qualitative, we can display it using the boxplot() method.\n\nfig, ax = subplots(figsize=(8, 8))\nAuto.boxplot('mpg', by='cylinders', ax=ax);\n\nThe hist() method can be used to plot a histogram.\n\nfig, ax = subplots(figsize=(8, 8))\nAuto.hist('mpg', ax=ax);\n\nThe color of the bars and the number of bins can be changed:\n\nfig, ax = subplots(figsize=(8, 8))\nAuto.hist('mpg', color='red', bins=12, ax=ax);\n\nSee Auto.hist? for more plotting options.\nWe can use the pd.plotting.scatter_matrix() function to create a scatterplot matrix to visualize all of the pairwise relationships between the columns in a data frame.\n\npd.plotting.scatter_matrix(Auto);\n\nWe can also produce scatterplots for a subset of the variables.\n\npd.plotting.scatter_matrix(Auto[['mpg',\n                                 'displacement',\n                                 'weight']]);\n\nThe describe() method produces a numerical summary of each column in a data frame.\n\nAuto[['mpg', 'weight']].describe()\n\nWe can also produce a summary of just a single column.\n\nAuto['cylinders'].describe()\nAuto['mpg'].describe()\n\nTo exit Jupyter, select File / Close and Halt."
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#importing-packages",
    "href": "python-notebooks/Ch3-linreg-lab.html#importing-packages",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Importing packages",
    "text": "Importing packages\nWe import our standard libraries at this top level.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.pyplot import subplots\n\n\nNew imports\nThroughout this lab we will introduce new functions and libraries. However, we will import them here to emphasize these are the new code objects in this lab. Keeping imports near the top of a notebook makes the code more readable, since scanning the first few lines tells us what libraries are used.\n\nimport statsmodels.api as sm\n\nWe will provide relevant details about the functions below as they are needed.\nBesides importing whole modules, it is also possible to import only a few items from a given module. This will help keep the namespace clean. We will use a few specific objects from the statsmodels package which we import here.\n\nfrom statsmodels.stats.outliers_influence \\\n     import variance_inflation_factor as VIF\nfrom statsmodels.stats.anova import anova_lm\n\nAs one of the import statements above is quite a long line, we inserted a line break \\ to ease readability.\nWe will also use some functions written for the labs in this book in the ISLP package.\n\nfrom ISLP import load_data\nfrom ISLP.models import (ModelSpec as MS,\n                         summarize,\n                         poly)\n\n\n\nInspecting Objects and Namespaces\nThe function dir() provides a list of objects in a namespace.\n\ndir()\n\nThis shows you everything that Python can find at the top level. There are certain objects like __builtins__ that contain references to built-in functions like print().\nEvery python object has its own notion of namespace, also accessible with dir(). This will include both the attributes of the object as well as any methods associated with it. For instance, we see 'sum' in the listing for an array.\n\nA = np.array([3,5,11])\ndir(A)\n\nThis indicates that the object A.sum exists. In this case it is a method that can be used to compute the sum of the array A as can be seen by typing A.sum?.\n\nA.sum()"
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#simple-linear-regression",
    "href": "python-notebooks/Ch3-linreg-lab.html#simple-linear-regression",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Simple Linear Regression",
    "text": "Simple Linear Regression\nIn this section we will construct model matrices (also called design matrices) using the ModelSpec() transform from ISLP.models.\nWe will use the Boston housing data set, which is contained in the ISLP package. The Boston dataset records medv (median house value) for \\(506\\) neighborhoods around Boston. We will build a regression model to predict medv using \\(13\\) predictors such as rmvar (average number of rooms per house), age (proportion of owner-occupied units built prior to 1940), and lstat (percent of households with low socioeconomic status). We will use statsmodels for this task, a Python package that implements several commonly used regression methods.\nWe have included a simple loading function load_data() in the ISLP package:\n\nBoston = load_data(\"Boston\")\nBoston.columns\n\nType Boston? to find out more about these data.\nWe start by using the sm.OLS() function to fit a simple linear regression model. Our response will be medv and lstat will be the single predictor. For this model, we can create the model matrix by hand.\n\nX = pd.DataFrame({'intercept': np.ones(Boston.shape[0]),\n                  'lstat': Boston['lstat']})\nX[:4]\n\nWe extract the response, and fit the model.\n\ny = Boston['medv']\nmodel = sm.OLS(y, X)\nresults = model.fit()\n\nNote that sm.OLS() does not fit the model; it specifies the model, and then model.fit() does the actual fitting.\nOur ISLP function summarize() produces a simple table of the parameter estimates, their standard errors, t-statistics and p-values. The function takes a single argument, such as the object results returned here by the fit method, and returns such a summary.\n\nsummarize(results)\n\nBefore we describe other methods for working with fitted models, we outline a more useful and general framework for constructing a model matrix~X. ### Using Transformations: Fit and Transform Our model above has a single predictor, and constructing X was straightforward. In practice we often fit models with more than one predictor, typically selected from an array or data frame. We may wish to introduce transformations to the variables before fitting the model, specify interactions between variables, and expand some particular variables into sets of variables (e.g. polynomials). The sklearn package has a particular notion for this type of task: a transform. A transform is an object that is created with some parameters as arguments. The object has two main methods: fit() and transform().\nWe provide a general approach for specifying models and constructing the model matrix through the transform ModelSpec() in the ISLP library. ModelSpec() (renamed MS() in the preamble) creates a transform object, and then a pair of methods transform() and fit() are used to construct a corresponding model matrix.\nWe first describe this process for our simple regression model using a single predictor lstat in the Boston data frame, but will use it repeatedly in more complex tasks in this and other labs in this book. In our case the transform is created by the expression design = MS(['lstat']).\nThe fit() method takes the original array and may do some initial computations on it, as specified in the transform object. For example, it may compute means and standard deviations for centering and scaling. The transform() method applies the fitted transformation to the array of data, and produces the model matrix.\n\ndesign = MS(['lstat'])\ndesign = design.fit(Boston)\nX = design.transform(Boston)\nX[:4]\n\nIn this simple case, the fit() method does very little; it simply checks that the variable 'lstat' specified in design exists in Boston. Then transform() constructs the model matrix with two columns: an intercept and the variable lstat.\nThese two operations can be combined with the fit_transform() method.\n\ndesign = MS(['lstat'])\nX = design.fit_transform(Boston)\nX[:4]\n\nNote that, as in the previous code chunk when the two steps were done separately, the design object is changed as a result of the fit() operation. The power of this pipeline will become clearer when we fit more complex models that involve interactions and transformations.\nLet’s return to our fitted regression model. The object results has several methods that can be used for inference. We already presented a function summarize() for showing the essentials of the fit. For a full and somewhat exhaustive summary of the fit, we can use the summary() method.\n\nresults.summary()\n\nThe fitted coefficients can also be retrieved as the params attribute of results.\n\nresults.params\n\nThe get_prediction() method can be used to obtain predictions, and produce confidence intervals and prediction intervals for the prediction of medv for given values of lstat.\nWe first create a new data frame, in this case containing only the variable lstat, with the values for this variable at which we wish to make predictions. We then use the transform() method of design to create the corresponding model matrix.\n\nnew_df = pd.DataFrame({'lstat':[5, 10, 15]})\nnewX = design.transform(new_df)\nnewX\n\nNext we compute the predictions at newX, and view them by extracting the predicted_mean attribute.\n\nnew_predictions = results.get_prediction(newX);\nnew_predictions.predicted_mean\n\nWe can produce confidence intervals for the predicted values.\n\nnew_predictions.conf_int(alpha=0.05)\n\nPrediction intervals are computing by setting obs=True:\n\nnew_predictions.conf_int(obs=True, alpha=0.05)\n\nFor instance, the 95% confidence interval associated with an lstat value of 10 is (24.47, 25.63), and the 95% prediction interval is (12.82, 37.28). As expected, the confidence and prediction intervals are centered around the same point (a predicted value of 25.05 for medv when lstat equals 10), but the latter are substantially wider.\nNext we will plot medv and lstat using DataFrame.plot.scatter(), and wish to add the regression line to the resulting plot.\n\nDefining Functions\nWhile there is a function within the ISLP package that adds a line to an existing plot, we take this opportunity to define our first function to do so.\n\ndef abline(ax, b, m):\n    \"Add a line with slope m and intercept b to ax\"\n    xlim = ax.get_xlim()\n    ylim = [m * xlim[0] + b, m * xlim[1] + b]\n    ax.plot(xlim, ylim)\n\nA few things are illustrated above. First we see the syntax for defining a function: def funcname(...). The function has arguments ax, b, m where ax is an axis object for an exisiting plot, b is the intercept and m is the slope of the desired line. Other plotting options can be passed on to ax.plot by including additional optional arguments as follows:\n\ndef abline(ax, b, m, *args, **kwargs):\n    \"Add a line with slope m and intercept b to ax\"\n    xlim = ax.get_xlim()\n    ylim = [m * xlim[0] + b, m * xlim[1] + b]\n    ax.plot(xlim, ylim, *args, **kwargs)\n\nThe addition of *args allows any number of non-named arguments to abline, while *kwargs allows any number of named arguments (such as linewidth=3) to abline. In our function, we pass these arguments verbatim to ax.plot above. Readers interested in learning more about functions are referred to the section on defining functions in docs.python.org/tutorial.\nLet’s use our new function to add this regression line to a plot of medv vs. lstat.\n\nax = Boston.plot.scatter('lstat', 'medv')\nabline(ax,\n       results.params[0],\n       results.params[1],\n       'r--',\n       linewidth=3)\n\nThus, the final call to ax.plot() is ax.plot(xlim, ylim, 'r--', linewidth=3). We have used the argument 'r--' to produce a red dashed line, and added an argument to make it of width 3. There is some evidence for non-linearity in the relationship between lstat and medv. We will explore this issue later in this lab.\nAs mentioned above, there is an existing function to add a line to a plot — ax.axline() — but knowing how to write such functions empowers us to create more expressive displays.\nNext we examine some diagnostic plots, several of which were discussed in Section 3.3.3. We can find the fitted values and residuals of the fit as attributes of the results object. Various influence measures describing the regression model are computed with the get_influence() method. As we will not use the fig component returned as the first value from subplots(), we simply capture the second returned value in ax below.\n\nax = subplots(figsize=(8,8))[1]\nax.scatter(results.fittedvalues, results.resid)\nax.set_xlabel('Fitted value')\nax.set_ylabel('Residual')\nax.axhline(0, c='k', ls='--');\n\nWe add a horizontal line at 0 for reference using the ax.axhline() method, indicating it should be black (c='k') and have a dashed linestyle (ls='--').\nOn the basis of the residual plot, there is some evidence of non-linearity. Leverage statistics can be computed for any number of predictors using the hat_matrix_diag attribute of the value returned by the get_influence() method.\n\ninfl = results.get_influence()\nax = subplots(figsize=(8,8))[1]\nax.scatter(np.arange(X.shape[0]), infl.hat_matrix_diag)\nax.set_xlabel('Index')\nax.set_ylabel('Leverage')\nnp.argmax(infl.hat_matrix_diag)\n\nThe np.argmax() function identifies the index of the largest element of an array, optionally computed over an axis of the array. In this case, we maximized over the entire array to determine which observation has the largest leverage statistic."
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#multiple-linear-regression",
    "href": "python-notebooks/Ch3-linreg-lab.html#multiple-linear-regression",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Multiple Linear Regression",
    "text": "Multiple Linear Regression\nIn order to fit a multiple linear regression model using least squares, we again use the ModelSpec() transform to construct the required model matrix and response. The arguments to ModelSpec() can be quite general, but in this case a list of column names suffice. We consider a fit here with the two variables lstat and age.\n\nX = MS(['lstat', 'age']).fit_transform(Boston)\nmodel1 = sm.OLS(y, X)\nresults1 = model1.fit()\nsummarize(results1)\n\nNotice how we have compacted the first line into a succinct expression describing the construction of X.\nThe Boston data set contains 12 variables, and so it would be cumbersome to have to type all of these in order to perform a regression using all of the predictors. Instead, we can use the following short-hand:\n\nterms = Boston.columns.drop('medv')\nterms\n\nWe can now fit the model with all the variables in terms using the same model matrix builder.\n\nX = MS(terms).fit_transform(Boston)\nmodel = sm.OLS(y, X)\nresults = model.fit()\nsummarize(results)\n\nWhat if we would like to perform a regression using all of the variables but one? For example, in the above regression output, age has a high \\(p\\)-value. So we may wish to run a regression excluding this predictor. The following syntax results in a regression using all predictors except age.\n\nminus_age = Boston.columns.drop(['medv', 'age']) \nXma = MS(minus_age).fit_transform(Boston)\nmodel1 = sm.OLS(y, Xma)\nsummarize(model1.fit())"
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#multivariate-goodness-of-fit",
    "href": "python-notebooks/Ch3-linreg-lab.html#multivariate-goodness-of-fit",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Multivariate Goodness of Fit",
    "text": "Multivariate Goodness of Fit\nWe can access the individual components of results by name (dir(results) shows us what is available). Hence results.rsquared gives us the \\(R^2\\), and np.sqrt(results.scale) gives us the RSE.\nVariance inflation factors (section 3.3.3) are sometimes useful to assess the effect of collinearity in the model matrix of a regression model. We will compute the VIFs in our multiple regression fit, and use the opportunity to introduce the idea of list comprehension.\n\nList Comprehension\nOften we encounter a sequence of objects which we would like to transform for some other task. Below, we compute the VIF for each feature in our X matrix and produce a data frame whose index agrees with the columns of X. The notion of list comprehension can often make such a task easier.\nList comprehensions are simple and powerful ways to form lists of Python objects. The language also supports dictionary and generator comprehension, though these are beyond our scope here. Let’s look at an example. We compute the VIF for each of the variables in the model matrix X, using the function variance_inflation_factor().\n\nvals = [VIF(X, i)\n        for i in range(1, X.shape[1])]\nvif = pd.DataFrame({'vif':vals},\n                   index=X.columns[1:])\nvif\n\nThe function VIF() takes two arguments: a dataframe or array, and a variable column index. In the code above we call VIF() on the fly for all columns in X.\nWe have excluded column 0 above (the intercept), which is not of interest. In this case the VIFs are not that exciting.\nThe object vals above could have been constructed with the following for loop:\n\nvals = []\nfor i in range(1, X.values.shape[1]):\n    vals.append(VIF(X.values, i))\n\nList comprehension allows us to perform such repetitive operations in a more straightforward way. ## Interaction Terms It is easy to include interaction terms in a linear model using ModelSpec(). Including a tuple (\"lstat\",\"age\") tells the model matrix builder to include an interaction term between lstat and age.\n\nX = MS(['lstat',\n        'age',\n        ('lstat', 'age')]).fit_transform(Boston)\nmodel2 = sm.OLS(y, X)\nsummarize(model2.fit())"
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#non-linear-transformations-of-the-predictors",
    "href": "python-notebooks/Ch3-linreg-lab.html#non-linear-transformations-of-the-predictors",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Non-linear Transformations of the Predictors",
    "text": "Non-linear Transformations of the Predictors\nThe model matrix builder can include terms beyond just column names and interactions. For instance, the poly() function supplied in ISLP specifies that columns representing polynomial functions of its first argument are added to the model matrix.\n\nX = MS([poly('lstat', degree=2), 'age']).fit_transform(Boston)\nmodel3 = sm.OLS(y, X)\nresults3 = model3.fit()\nsummarize(results3)\n\nThe effectively zero p-value associated with the quadratic term (i.e. the third row above) suggests that it leads to an improved model.\nBy default, poly() creates a basis matrix for inclusion in the model matrix whose columns are orthogonal polynomials, which are designed for stable least squares computations. {Actually, poly() is a wrapper for the workhorse and standalone function Poly() that does the work in building the model matrix.} Alternatively, had we included an argument raw=True in the above call to poly(), the basis matrix would consist simply of lstat and lstat**2. Since either of these bases represent quadratic polynomials, the fitted values would not change in this case, just the polynomial coefficients. Also by default, the columns created by poly() do not include an intercept column as that is automatically added by MS().\nWe use the anova_lm() function to further quantify the extent to which the quadratic fit is superior to the linear fit.\n\nanova_lm(results1, results3)\n\nHere results1 represents the linear submodel containing predictors lstat and age, while results3 corresponds to the larger model above with a quadratic term in lstat. The anova_lm() function performs a hypothesis test comparing the two models. The null hypothesis is that the quadratic term in the bigger model is not needed, and the alternative hypothesis is that the bigger model is superior. Here the F-statistic is 177.28 and the associated p-value is zero. In this case the F-statistic is the square of the t-statistic for the quadratic term in the linear model summary for results3 — a consequence of the fact that these nested models differ by one degree of freedom. This provides very clear evidence that the quadratic polynomial in lstat improves the linear model. This is not surprising, since earlier we saw evidence for non-linearity in the relationship between medv and lstat.\nThe function anova_lm() can take more than two nested models as input, in which case it compares every successive pair of models. That also explains why their are NaNs in the first row above, since there is no previous model with which to compare the first.\n\nax = subplots(figsize=(8,8))[1]\nax.scatter(results3.fittedvalues, results3.resid)\nax.set_xlabel('Fitted value')\nax.set_ylabel('Residual')\nax.axhline(0, c='k', ls='--')\n\nWe see that when the quadratic term is included in the model, there is little discernible pattern in the residuals. In order to create a cubic or higher-degree polynomial fit, we can simply change the degree argument to poly()."
  },
  {
    "objectID": "python-notebooks/Ch3-linreg-lab.html#qualitative-predictors",
    "href": "python-notebooks/Ch3-linreg-lab.html#qualitative-predictors",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Qualitative Predictors",
    "text": "Qualitative Predictors\nHere we use the Carseats data, which is included in the ISLP package. We will attempt to predict Sales (child car seat sales) in 400 locations based on a number of predictors.\n\nCarseats = load_data('Carseats')\nCarseats.columns\n\nThe Carseats\ndata includes qualitative predictors such as ShelveLoc, an indicator of the quality of the shelving location — that is, the space within a store in which the car seat is displayed. The predictor ShelveLoc takes on three possible values, Bad, Medium, and Good. Given a qualitative variable such as ShelveLoc, ModelSpec() generates dummy variables automatically. These variables are often referred to as a one-hot encoding of the categorical feature. Their columns sum to one, so to avoid collinearity with an intercept, the first column is dropped. Below we see the column ShelveLoc[Bad] has been dropped, since Bad is the first level of ShelveLoc. Below we fit a multiple regression model that includes some interaction terms.\n\nallvars = list(Carseats.columns.drop('Sales'))\ny = Carseats['Sales']\nfinal = allvars + [('Income', 'Advertising'),\n                   ('Price', 'Age')]\nX = MS(final).fit_transform(Carseats)\nmodel = sm.OLS(y, X)\nsummarize(model.fit())\n\nIn the first line above, we made allvars a list, so that we could add the interaction terms two lines down. Our model-matrix builder has created a ShelveLoc[Good] dummy variable that takes on a value of 1 if the shelving location is good, and 0 otherwise. It has also created a ShelveLoc[Medium] dummy variable that equals 1 if the shelving location is medium, and 0 otherwise. A bad shelving location corresponds to a zero for each of the two dummy variables. The fact that the coefficient for ShelveLoc[Good] in the regression output is positive indicates that a good shelving location is associated with high sales (relative to a bad location). And ShelveLoc[Medium] has a smaller positive coefficient, indicating that a medium shelving location leads to higher sales than a bad shelving location, but lower sales than a good shelving location."
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#the-stock-market-data",
    "href": "python-notebooks/Ch4-classification-lab.html#the-stock-market-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "The Stock Market Data",
    "text": "The Stock Market Data\nIn this lab we will examine the Smarket data, which is part of the ISLP library. This data set consists of percentage returns for the S&P 500 stock index over 1,250 days, from the beginning of 2001 until the end of 2005. For each date, we have recorded the percentage returns for each of the five previous trading days, Lag1 through Lag5. We have also recorded Volume (the number of shares traded on the previous day, in billions), Today (the percentage return on the date in question) and Direction (whether the market was Up or Down on this date).\nWe start by importing our libraries at this top level; these are all imports we have seen in previous labs.\n\nimport numpy as np\nimport pandas as pd\nfrom matplotlib.pyplot import subplots\nimport statsmodels.api as sm\nfrom ISLP import load_data\nfrom ISLP.models import (ModelSpec as MS,\n                         summarize)\n\nWe also collect together the new imports needed for this lab.\n\nfrom ISLP import confusion_table\nfrom ISLP.models import contrast\nfrom sklearn.discriminant_analysis import \\\n     (LinearDiscriminantAnalysis as LDA,\n      QuadraticDiscriminantAnalysis as QDA)\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\nNow we are ready to load the Smarket data.\n\nSmarket = load_data('Smarket')\nSmarket\n\nThis gives a truncated listing of the data. We can see what the variable names are.\n\nSmarket.columns\n\nWe compute the correlation matrix using the corr() method for data frames, which produces a matrix that contains all of the pairwise correlations among the variables.\nThe pandas library does not report a correlation for the Direction variable because it is qualitative.\n\nSmarket.corr()\n\nAs one would expect, the correlations between the lagged return variables and today’s return are close to zero. The only substantial correlation is between Year and Volume. By plotting the data we see that Volume is increasing over time. In other words, the average number of shares traded daily increased from 2001 to 2005.\n\nSmarket.plot(y='Volume');"
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#logistic-regression",
    "href": "python-notebooks/Ch4-classification-lab.html#logistic-regression",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Logistic Regression",
    "text": "Logistic Regression\nNext, we will fit a logistic regression model in order to predict Direction using Lag1 through Lag5 and Volume. The sm.GLM() function fits generalized linear models, a class of models that includes logistic regression. Alternatively, the function sm.Logit() fits a logistic regression model directly. The syntax of sm.GLM() is similar to that of sm.OLS(), except that we must pass in the argument family=sm.families.Binomial() in order to tell statsmodels to run a logistic regression rather than some other type of generalized linear model.\n\nallvars = Smarket.columns.drop(['Today', 'Direction', 'Year'])\ndesign = MS(allvars)\nX = design.fit_transform(Smarket)\ny = Smarket.Direction == 'Up'\nglm = sm.GLM(y,\n             X,\n             family=sm.families.Binomial())\nresults = glm.fit()\nsummarize(results)\n\nThe smallest p-value here is associated with Lag1. The negative coefficient for this predictor suggests that if the market had a positive return yesterday, then it is less likely to go up today. However, at a value of 0.15, the p-value is still relatively large, and so there is no clear evidence of a real association between Lag1 and Direction.\nWe use the params attribute of results in order to access just the coefficients for this fitted model.\n\nresults.params\n\nLikewise we can use the pvalues attribute to access the p-values for the coefficients.\n\nresults.pvalues\n\nThe predict() method of results can be used to predict the probability that the market will go up, given values of the predictors. This method returns predictions on the probability scale. If no data set is supplied to the predict() function, then the probabilities are computed for the training data that was used to fit the logistic regression model. As with linear regression, one can pass an optional exog argument consistent with a design matrix if desired. Here we have printed only the first ten probabilities.\n\nprobs = results.predict()\nprobs[:10]\n\nIn order to make a prediction as to whether the market will go up or down on a particular day, we must convert these predicted probabilities into class labels, Up or Down. The following two commands create a vector of class predictions based on whether the predicted probability of a market increase is greater than or less than 0.5.\n\nlabels = np.array(['Down']*1250)\nlabels[probs>0.5] = \"Up\"\n\nThe confusion_table() function from the ISLP package summarizes these predictions, showing how many observations were correctly or incorrectly classified. Our function, which is adapted from a similar function in the module sklearn.metrics, transposes the resulting matrix and includes row and column labels. The confusion_table() function takes as first argument the predicted labels, and second argument the true labels.\n\nconfusion_table(labels, Smarket.Direction)\n\nThe diagonal elements of the confusion matrix indicate correct predictions, while the off-diagonals represent incorrect predictions. Hence our model correctly predicted that the market would go up on 507 days and that it would go down on 145 days, for a total of 507 + 145 = 652 correct predictions. The np.mean() function can be used to compute the fraction of days for which the prediction was correct. In this case, logistic regression correctly predicted the movement of the market 52.2% of the time.\n\n(507+145)/1250, np.mean(labels == Smarket.Direction)\n\nAt first glance, it appears that the logistic regression model is working a little better than random guessing. However, this result is misleading because we trained and tested the model on the same set of 1,250 observations. In other words, \\(100-52.2=47.8%\\) is the training error rate. As we have seen previously, the training error rate is often overly optimistic — it tends to underestimate the test error rate. In order to better assess the accuracy of the logistic regression model in this setting, we can fit the model using part of the data, and then examine how well it predicts the held out data. This will yield a more realistic error rate, in the sense that in practice we will be interested in our model’s performance not on the data that we used to fit the model, but rather on days in the future for which the market’s movements are unknown.\nTo implement this strategy, we first create a Boolean vector corresponding to the observations from 2001 through 2004. We then use this vector to create a held out data set of observations from 2005.\n\ntrain = (Smarket.Year < 2005)\nSmarket_train = Smarket.loc[train]\nSmarket_test = Smarket.loc[~train]\nSmarket_test.shape\n\nThe object train is a vector of 1,250 elements, corresponding to the observations in our data set. The elements of the vector that correspond to observations that occurred before 2005 are set to True, whereas those that correspond to observations in 2005 are set to False. Hence train is a boolean array, since its elements are True and False. Boolean arrays can be used to obtain a subset of the rows or columns of a data frame using the loc method. For instance, the command Smarket.loc[train] would pick out a submatrix of the stock market data set, corresponding only to the dates before 2005, since those are the ones for which the elements of train are True. The ~ symbol can be used to negate all of the elements of a Boolean vector. That is, ~train is a vector similar to train, except that the elements that are True in train get swapped to False in ~train, and vice versa. Therefore, Smarket.loc[~train] yields a subset of the rows of the data frame of the stock market data containing only the observations for which train is False. The output above indicates that there are 252 such observations.\nWe now fit a logistic regression model using only the subset of the observations that correspond to dates before 2005. We then obtain predicted probabilities of the stock market going up for each of the days in our test set — that is, for the days in 2005.\n\nX_train, X_test = X.loc[train], X.loc[~train]\ny_train, y_test = y.loc[train], y.loc[~train]\nglm_train = sm.GLM(y_train,\n                   X_train,\n                   family=sm.families.Binomial())\nresults = glm_train.fit()\nprobs = results.predict(exog=X_test)\n\nNotice that we have trained and tested our model on two completely separate data sets: training was performed using only the dates before 2005, and testing was performed using only the dates in 2005.\nFinally, we compare the predictions for 2005 to the actual movements of the market over that time period. We will first store the test and training labels (recall y_test is binary).\n\nD = Smarket.Direction\nL_train, L_test = D.loc[train], D.loc[~train]\n\nNow we threshold the fitted probability at 50% to form our predicted labels.\n\nlabels = np.array(['Down']*252)\nlabels[probs>0.5] = 'Up'\nconfusion_table(labels, L_test)\n\nThe test accuracy is about 48% while the error rate is about 52%\n\nnp.mean(labels == L_test), np.mean(labels != L_test)\n\nThe != notation means not equal to, and so the last command computes the test set error rate. The results are rather disappointing: the test error rate is 52%, which is worse than random guessing! Of course this result is not all that surprising, given that one would not generally expect to be able to use previous days’ returns to predict future market performance. (After all, if it were possible to do so, then the authors of this book would be out striking it rich rather than writing a statistics textbook.)\nWe recall that the logistic regression model had very underwhelming p-values associated with all of the predictors, and that the smallest p-value, though not very small, corresponded to Lag1. Perhaps by removing the variables that appear not to be helpful in predicting Direction, we can obtain a more effective model. After all, using predictors that have no relationship with the response tends to cause a deterioration in the test error rate (since such predictors cause an increase in variance without a corresponding decrease in bias), and so removing such predictors may in turn yield an improvement. Below we refit the logistic regression using just Lag1 and Lag2, which seemed to have the highest predictive power in the original logistic regression model.\n\nmodel = MS(['Lag1', 'Lag2']).fit(Smarket)\nX = model.transform(Smarket)\nX_train, X_test = X.loc[train], X.loc[~train]\nglm_train = sm.GLM(y_train,\n                   X_train,\n                   family=sm.families.Binomial())\nresults = glm_train.fit()\nprobs = results.predict(exog=X_test)\nlabels = np.array(['Down']*252)\nlabels[probs>0.5] = 'Up'\nconfusion_table(labels, L_test)\n\nLet’s evaluate the overall accuracy as well as the accuracy within the days when logistic regression predicts an increase.\n\n(35+106)/252,106/(106+76)\n\nNow the results appear to be a little better: 56% of the daily movements have been correctly predicted. It is worth noting that in this case, a much simpler strategy of predicting that the market will increase every day will also be correct 56% of the time! Hence, in terms of overall error rate, the logistic regression method is no better than the naive approach. However, the confusion matrix shows that on days when logistic regression predicts an increase in the market, it has a 58% accuracy rate. This suggests a possible trading strategy of buying on days when the model predicts an increasing market, and avoiding trades on days when a decrease is predicted. Of course one would need to investigate more carefully whether this small improvement was real or just due to random chance.\nSuppose that we want to predict the returns associated with particular values of Lag1 and Lag2. In particular, we want to predict Direction on a day when Lag1 and Lag2 equal \\(1.2\\) and \\(1.1\\), respectively, and on a day when they equal \\(1.5\\) and \\(-0.8\\). We do this using the predict() function.\n\nnewdata = pd.DataFrame({'Lag1':[1.2, 1.5],\n                        'Lag2':[1.1, -0.8]});\nnewX = model.transform(newdata)\nresults.predict(newX)"
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#linear-discriminant-analysis",
    "href": "python-notebooks/Ch4-classification-lab.html#linear-discriminant-analysis",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Linear Discriminant Analysis",
    "text": "Linear Discriminant Analysis\nWe begin by performing LDA on the Smarket data, using the function LinearDiscriminantAnalysis(), which we have abbreviated LDA(). We fit the model using only the observations before 2005.\n\nlda = LDA(store_covariance=True)\n\nSince the LDA estimator automatically adds an intercept, we should remove the column corresponding to the intercept in both X_train and X_test. We can also directly use the labels rather than the Boolean vectors y_train.\n\nX_train, X_test = [M.drop(columns=['intercept'])\n                   for M in [X_train, X_test]]\nlda.fit(X_train, L_train)\n\nHere we have used the list comprehensions introduced in Section 3.6.4. Looking at our first line above, we see that the right-hand side is a list of length two. This is because the code for M in [X_train, X_test] iterates over a list of length two. While here we loop over a list, the list comprehension method works when looping over any iterable object. We then apply the drop() method to each element in the iteration, collecting the result in a list. The left-hand side tells Python to unpack this list of length two, assigning its elements to the variables X_train and X_test. Of course, this overwrites the previous values of X_train and X_test.\nHaving fit the model, we can extract the means in the two classes with the means_ attribute. These are the average of each predictor within each class, and are used by LDA as estimates of \\(\\mu_k\\). These suggest that there is a tendency for the previous 2 days’ returns to be negative on days when the market increases, and a tendency for the previous days’ returns to be positive on days when the market declines.\n\nlda.means_\n\nThe estimated prior probabilities are stored in the priors_ attribute. The package sklearn typically uses this trailing _ to denote a quantity estimated when using the fit() method. We can be sure of which entry corresponds to which label by looking at the classes_ attribute.\n\nlda.classes_\n\nThe LDA output indicates that \\(\\hat\\pi_{Down}=0.492\\) and \\(\\hat\\pi_{Up}=0.508\\).\n\nlda.priors_\n\nThe linear discriminant vectors can be found in the scalings_ attribute:\n\nlda.scalings_\n\nThese values provide the linear combination of Lag1 and Lag2 that are used to form the LDA decision rule. In other words, these are the multipliers of the elements of \\(X=x\\) in (4.24). If $-0.64Lag1 - 0.51 Lag2 $ is large, then the LDA classifier will predict a market increase, and if it is small, then the LDA classifier will predict a market decline.\n\nlda_pred = lda.predict(X_test)\n\nAs we observed in our comparison of classification methods (Section 4.5), the LDA and logistic regression predictions are almost identical.\n\nconfusion_table(lda_pred, L_test)\n\nWe can also estimate the probability of each class for each point in a training set. Applying a 50% threshold to the posterior probabilities of being in class 1 allows us to recreate the predictions contained in lda_pred.\n\nlda_prob = lda.predict_proba(X_test)\nnp.all(\n       np.where(lda_prob[:,1] >= 0.5, 'Up','Down') == lda_pred\n       )\n\nAbove, we used the np.where() function that creates an array with value 'Up' for indices where the second column of lda_prob (the estimated posterior probability of 'Up') is greater than 0.5. For problems with more than two classes the labels are chosen as the class whose posterior probability is highest:\n\nnp.all(\n       [lda.classes_[i] for i in np.argmax(lda_prob, 1)] == lda_pred\n       )\n\nIf we wanted to use a posterior probability threshold other than 50% in order to make predictions, then we could easily do so. For instance, suppose that we wish to predict a market decrease only if we are very certain that the market will indeed decrease on that day — say, if the posterior probability is at least 90%. We know that the first column of lda_prob corresponds to the label Down after having checked the classes_ attribute, hence we use the column index 0 rather than 1 as we did above.\n\nnp.sum(lda_prob[:,0] > 0.9)\n\nNo days in 2005 meet that threshold! In fact, the greatest posterior probability of decrease in all of 2005 was 52.02%.\nThe LDA classifier above is the first classifier from the sklearn library. We will use several other objects from this library. The objects follow a common structure that simplifies tasks such as cross-validation, which we will see in Chapter 5. Specifically, the methods first create a generic classifier without referring to any data. This classifier is then fit to data with the fit() method and predictions are always produced with the predict() method. This pattern of first instantiating the classifier, followed by fitting it, and then producing predictions is an explicit design choice of sklearn. This uniformity makes it possible to cleanly copy the classifier so that it can be fit on different data; e.g. different training sets arising in cross-validation. This standard pattern also allows for a predictable formation of workflows."
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#quadratic-discriminant-analysis",
    "href": "python-notebooks/Ch4-classification-lab.html#quadratic-discriminant-analysis",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Quadratic Discriminant Analysis",
    "text": "Quadratic Discriminant Analysis\nWe will now fit a QDA model to the Smarket data. QDA is implemented via QuadraticDiscriminantAnalysis() in the sklearn package, which we abbreviate to QDA(). The syntax is very similar to LDA().\n\nqda = QDA(store_covariance=True)\nqda.fit(X_train, L_train)\n\nThe QDA() function will again compute means_ and priors_.\n\nqda.means_, qda.priors_\n\nThe QDA() classifier will estimate one covariance per class. Here is the estimated covariance in the first class:\n\nqda.covariance_[0]\n\nThe output contains the group means. But it does not contain the coefficients of the linear discriminants, because the QDA classifier involves a quadratic, rather than a linear, function of the predictors. The predict() function works in exactly the same fashion as for LDA.\n\nqda_pred = qda.predict(X_test)\nconfusion_table(qda_pred, L_test)\n\nInterestingly, the QDA predictions are accurate almost 60% of the time, even though the 2005 data was not used to fit the model.\n\nnp.mean(qda_pred == L_test)\n\nThis level of accuracy is quite impressive for stock market data, which is known to be quite hard to model accurately. This suggests that the quadratic form assumed by QDA may capture the true relationship more accurately than the linear forms assumed by LDA and logistic regression. However, we recommend evaluating this method’s performance on a larger test set before betting that this approach will consistently beat the market!"
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#naive-bayes",
    "href": "python-notebooks/Ch4-classification-lab.html#naive-bayes",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Naive Bayes",
    "text": "Naive Bayes\nNext, we fit a naive Bayes model to the Smarket data. The syntax is similar to that of LDA() and QDA(). By default, this implementation GaussianNB() of the naive Bayes classifier models each quantitative feature using a Gaussian distribution. However, a kernel density method can also be used to estimate the distributions.\n\nNB = GaussianNB()\nNB.fit(X_train, L_train)\n\nThe classes are stored as classes_.\n\nNB.classes_\n\nThe class prior probabilities are stored in the class_prior_ attribute.\n\nNB.class_prior_\n\nThe parameters of the features can be found in the theta_ and var_ attributes. The number of rows is equal to the number of classes, while the number of columns is equal to the number of features. We see below that the mean for feature Lag1 in the Down class is 0.043.\n\nNB.theta_\n\nIts variance is 1.503.\n\nNB.var_\n\nHow do we know the names of these attributes? We use NB? (or ?NB}).\nWe can easily verify the mean computation:\n\nX_train[L_train == 'Down'].mean()\n\nSimilarly for the variance:\n\nX_train[L_train == 'Down'].var(ddof=0)\n\nSince NB() is a classifier in the sklearn library, making predictions uses the same syntax as for LDA() and QDA() above.\n\nnb_labels = NB.predict(X_test)\nconfusion_table(nb_labels, L_test)\n\nNaive Bayes performs well on these data, with accurate predictions over 59% of the time. This is slightly worse than QDA, but much better than LDA.\nAs for LDA, the predict_proba() method estimates the probability that each observation belongs to a particular class.\n\nNB.predict_proba(X_test)[:5]"
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#k-nearest-neighbors",
    "href": "python-notebooks/Ch4-classification-lab.html#k-nearest-neighbors",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "K-Nearest Neighbors",
    "text": "K-Nearest Neighbors\nWe will now perform KNN using the KNeighborsClassifier() function. This function works similarly to the other model-fitting functions that we have encountered thus far.\nAs is the case for LDA and QDA, we fit the classifier using the fit method. New predictions are formed using the predict method of the object returned by fit().\n\nknn1 = KNeighborsClassifier(n_neighbors=1)\nknn1.fit(X_train, L_train)\nknn1_pred = knn1.predict(X_test)\nconfusion_table(knn1_pred, L_test)\n\nThe results using \\(K=1\\) are not very good, since only \\(50%\\) of the observations are correctly predicted. Of course, it may be that \\(K=1\\) results in an overly-flexible fit to the data.\n\n(83+43)/252, np.mean(knn1_pred == L_test)\n\nBelow, we repeat the analysis using \\(K=3\\).\n\nknn3 = KNeighborsClassifier(n_neighbors=3)\nknn3_pred = knn3.fit(X_train, L_train).predict(X_test)\nnp.mean(knn3_pred == L_test)\n\nThe results have improved slightly. But increasing K further provides no further improvements. It appears that for these data, and this train/test split, QDA gives the best results of the methods that we have examined so far.\nKNN does not perform well on the Smarket data, but it often does provide impressive results. As an example we will apply the KNN approach to the Caravan data set, which is part of the ISLP library. This data set includes 85 predictors that measure demographic characteristics for 5,822 individuals. The response variable is Purchase, which indicates whether or not a given individual purchases a caravan insurance policy. In this data set, only 6% of people purchased caravan insurance.\n\nCaravan = load_data('Caravan')\nPurchase = Caravan.Purchase\nPurchase.value_counts()\n\nThe method value_counts() takes a pd.Series or pd.DataFrame and returns a pd.Series with the corresponding counts for each unique element. In this case Purchase has only Yes and No values and returns how many values of each there are.\n\n348 / 5822\n\nOur features will include all columns except Purchase.\n\nfeature_df = Caravan.drop(columns=['Purchase'])\n\nBecause the KNN classifier predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger effect on the distance between the observations, and hence on the KNN classifier, than variables that are on a small scale. For instance, imagine a data set that contains two variables, salary and age (measured in dollars and years, respectively). As far as KNN is concerned, a difference of 1,000 USD in salary is enormous compared to a difference of 50 years in age. Consequently, salary will drive the KNN classification results, and age will have almost no effect. This is contrary to our intuition that a salary difference of 1,000 USD is quite small compared to an age difference of 50 years. Furthermore, the importance of scale to the KNN classifier leads to another issue: if we measured salary in Japanese yen, or if we measured age in minutes, then we’d get quite different classification results from what we get if these two variables are measured in dollars and years.\nA good way to handle this problem is to standardize the data so that all variables are given a mean of zero and a standard deviation of one. Then all variables will be on a comparable scale. This is accomplished using the StandardScaler() transformation.\n\nscaler = StandardScaler(with_mean=True,\n                        with_std=True,\n                        copy=True)\n\nThe argument with_mean indicates whether or not we should subtract the mean, while with_std indicates whether or not we should scale the columns to have standard deviation of 1 or not. Finally, the argument copy=True indicates that we will always copy data, rather than trying to do calculations in place where possible.\nThis transformation can be fit and then applied to arbitrary data. In the first line below, the parameters for the scaling are computed and stored in scaler, while the second line actually constructs the standardized set of features.\n\nscaler.fit(feature_df)\nX_std = scaler.transform(feature_df)\n\nNow every column of feature_std below has a standard deviation of one and a mean of zero.\n\nfeature_std = pd.DataFrame(\n                 X_std,\n                 columns=feature_df.columns);\nfeature_std.std()\n\nNotice that the standard deviations are not quite \\(1\\) here; this is again due to some procedures using the \\(1/n\\) convention for variances (in this case scaler()), while others use \\(1/(n-1)\\) (the std() method). See the footnote on page 198. In this case it does not matter, as long as the variables are all on the same scale.\nUsing the function train_test_split() we now split the observations into a test set, containing 1000 observations, and a training set containing the remaining observations. The argument random_state=0 ensures that we get the same split each time we rerun the code.\n\n(X_train,\n X_test,\n y_train,\n y_test) = train_test_split(feature_std,\n                            Purchase,\n                            test_size=1000,\n                            random_state=0)\n\n?train_test_split reveals that the non-keyword arguments can be lists, arrays, pandas dataframes etc that all have the same length (shape[0]) and hence are indexable. In this case they are the dataframe feature_std and the response variable Purchase. We fit a KNN model on the training data using \\(K=1\\), and evaluate its performance on the test data.\n\nknn1 = KNeighborsClassifier(n_neighbors=1)\nknn1_pred = knn1.fit(X_train, y_train).predict(X_test)\nnp.mean(y_test != knn1_pred), np.mean(y_test != \"No\")\n\nThe KNN error rate on the 1,000 test observations is about \\(11%\\). At first glance, this may appear to be fairly good. However, since just over 6% of customers purchased insurance, we could get the error rate down to almost 6% by always predicting No regardless of the values of the predictors! This is known as the null rate.}\nSuppose that there is some non-trivial cost to trying to sell insurance to a given individual. For instance, perhaps a salesperson must visit each potential customer. If the company tries to sell insurance to a random selection of customers, then the success rate will be only 6%, which may be far too low given the costs involved. Instead, the company would like to try to sell insurance only to customers who are likely to buy it. So the overall error rate is not of interest. Instead, the fraction of individuals that are correctly predicted to buy insurance is of interest.\n\nconfusion_table(knn1_pred, y_test)\n\nIt turns out that KNN with \\(K=1\\) does far better than random guessing among the customers that are predicted to buy insurance. Among 62 such customers, 9, or 14.5%, actually do purchase insurance. This is double the rate that one would obtain from random guessing.\n\n9/(53+9)\n\n\nTuning Parameters\nThe number of neighbors in KNN is referred to as a tuning parameter, also referred to as a hyperparameter. We do not know a priori what value to use. It is therefore of interest to see how the classifier performs on test data as we vary these parameters. This can be achieved with a for loop, described in Section 2.3.8. Here we use a for loop to look at the accuracy of our classifier in the group predicted to purchase insurance as we vary the number of neighbors from 1 to 5:\n\nfor K in range(1,6):\n    knn = KNeighborsClassifier(n_neighbors=K)\n    knn_pred = knn.fit(X_train, y_train).predict(X_test)\n    C = confusion_table(knn_pred, y_test)\n    templ = ('K={0:d}: # predicted to rent: {1:>2},' +\n            '  # who did rent {2:d}, accuracy {3:.1%}')\n    pred = C.loc['Yes'].sum()\n    did_rent = C.loc['Yes','Yes']\n    print(templ.format(\n          K,\n          pred,\n          did_rent,\n          did_rent / pred))\n\nWe see some variability — the numbers for K=4 are very different from the rest.\n\n\nComparison to Logistic Regression\nAs a comparison, we can also fit a logistic regression model to the data. This can also be done with sklearn, though by default it fits something like the ridge regression version of logistic regression, which we introduce in Chapter 6. This can be modified by appropriately setting the argument C below. Its default value is 1 but by setting it to a very large number, the algorithm converges to the same solution as the usual (unregularized) logistic regression estimator discussed above.\nUnlike the statsmodels package, sklearn focuses less on inference and more on classification. Hence, the summary methods seen in statsmodels and our simplified version seen with summarize are not generally available for the classifiers in sklearn.\n\nlogit = LogisticRegression(C=1e10, solver='liblinear')\nlogit.fit(X_train, y_train)\nlogit_pred = logit.predict_proba(X_test)\nlogit_labels = np.where(logit_pred[:,1] > 5, 'Yes', 'No')\nconfusion_table(logit_labels, y_test)\n\nWe used the argument solver='liblinear' above to avoid a warning with the default solver which would indicate that the algorithm does not converge.\nIf we use \\(0.5\\) as the predicted probability cut-off for the classifier, then we have a problem: none of the test observations are predicted to purchase insurance. However, we are not required to use a cut-off of \\(0.5\\). If we instead predict a purchase any time the predicted probability of purchase exceeds \\(0.25\\), we get much better results: we predict that 29 people will purchase insurance, and we are correct for about 31% of these people. This is almost five times better than random guessing!\n\nlogit_labels = np.where(logit_pred[:,1]>0.25, 'Yes', 'No')\nconfusion_table(logit_labels, y_test)\n\n\n9/(20+9)"
  },
  {
    "objectID": "python-notebooks/Ch4-classification-lab.html#linear-and-poisson-regression-on-the-bikeshare-data",
    "href": "python-notebooks/Ch4-classification-lab.html#linear-and-poisson-regression-on-the-bikeshare-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Linear and Poisson Regression on the Bikeshare Data",
    "text": "Linear and Poisson Regression on the Bikeshare Data\nHere we fit linear and Poisson regression models to the Bikeshare data, as described in Section 4.6. The response bikers measures the number of bike rentals per hour in Washington, DC in the period 2010–2012.\n\nBike = load_data('Bikeshare')\n\nLet’s have a peek at the dimensions and names of the variables in this dataframe.\n\nBike.shape, Bike.columns\n\n\nLinear Regression\nWe begin by fitting a linear regression model to the data.\n\nX = MS(['mnth',\n        'hr',\n        'workingday',\n        'temp',\n        'weathersit']).fit_transform(Bike)\nY = Bike['bikers']\nM_lm = sm.OLS(Y, X).fit()\nsummarize(M_lm)\n\nThere are 24 levels in hr and 40 rows in all. In M_lm, the first levels hr[0] and mnth[Jan] are treated as the baseline values, and so no coefficient estimates are provided for them: implicitly, their coefficient estimates are zero, and all other levels are measured relative to these baselines. For example, the Feb coefficient of \\(6.845\\) signifies that, holding all other variables constant, there are on average about 7 more riders in February than in January. Similarly there are about 16.5 more riders in March than in January.\nThe results seen in Section 4.6.1 used a slightly different coding of the variables hr and mnth, as follows:\n\nhr_encode = contrast('hr', 'sum')\nmnth_encode = contrast('mnth', 'sum')\n\nRefitting again:\n\nX2 = MS([mnth_encode,\n         hr_encode,\n        'workingday',\n        'temp',\n        'weathersit']).fit_transform(Bike)\nM2_lm = sm.OLS(Y, X2).fit()\nS2 = summarize(M2_lm)\nS2\n\nWhat is the difference between the two codings? In M2_lm, a coefficient estimate is reported for all but level 23 of hr and level Dec of mnth. Importantly, in M2_lm, the (unreported) coefficient estimate for the last level of mnth is not zero: instead, it equals the negative of the sum of the coefficient estimates for all of the other levels. Similarly, in M2_lm, the coefficient estimate for the last level of hr is the negative of the sum of the coefficient estimates for all of the other levels. This means that the coefficients of hr and mnth in M2_lm will always sum to zero, and can be interpreted as the difference from the mean level. For example, the coefficient for January of \\(-46.087\\) indicates that, holding all other variables constant, there are typically 46 fewer riders in January relative to the yearly average.\nIt is important to realize that the choice of coding really does not matter, provided that we interpret the model output correctly in light of the coding used. For example, we see that the predictions from the linear model are the same regardless of coding:\n\nnp.sum((M_lm.fittedvalues - M2_lm.fittedvalues)**2)\n\nThe sum of squared differences is zero. We can also see this using the np.allclose() function:\n\nnp.allclose(M_lm.fittedvalues, M2_lm.fittedvalues)\n\nTo reproduce the left-hand side of Figure 4.13 we must first obtain the coefficient estimates associated with mnth. The coefficients for January through November can be obtained directly from the M2_lm object. The coefficient for December must be explicitly computed as the negative sum of all the other months. We first extract all the coefficients for month from the coefficients of M2_lm.\n\ncoef_month = S2[S2.index.str.contains('mnth')]['coef']\ncoef_month\n\nNext, we append Dec as the negative of the sum of all other months.\n\nmonths = Bike['mnth'].dtype.categories\ncoef_month = pd.concat([\n                       coef_month,\n                       pd.Series([-coef_month.sum()],\n                                  index=['mnth[Dec]'\n                                 ])\n                       ])\ncoef_month\n\nFinally, to make the plot neater, we’ll just use the first letter of each month, which is the \\(6\\)th entry of each of the labels in the index.\n\nfig_month, ax_month = subplots(figsize=(8,8))\nx_month = np.arange(coef_month.shape[0])\nax_month.plot(x_month, coef_month, marker='o', ms=10)\nax_month.set_xticks(x_month)\nax_month.set_xticklabels([l[5] for l in coef_month.index], fontsize=20)\nax_month.set_xlabel('Month', fontsize=20)\nax_month.set_ylabel('Coefficient', fontsize=20);\n\nReproducing the right-hand plot in Figure 4.13 follows a similar process.\n\ncoef_hr = S2[S2.index.str.contains('hr')]['coef']\ncoef_hr = coef_hr.reindex(['hr[{0}]'.format(h) for h in range(23)])\ncoef_hr = pd.concat([coef_hr,\n                     pd.Series([-coef_hr.sum()], index=['hr[23]'])\n                    ])\n\nWe now make the hour plot.\n\nfig_hr, ax_hr = subplots(figsize=(8,8))\nx_hr = np.arange(coef_hr.shape[0])\nax_hr.plot(x_hr, coef_hr, marker='o', ms=10)\nax_hr.set_xticks(x_hr[::2])\nax_hr.set_xticklabels(range(24)[::2], fontsize=20)\nax_hr.set_xlabel('Hour', fontsize=20)\nax_hr.set_ylabel('Coefficient', fontsize=20);\n\n\n\nPoisson Regression\nNow we fit instead a Poisson regression model to the Bikeshare data. Very little changes, except that we now use the function sm.GLM() with the Poisson family specified:\n\nM_pois = sm.GLM(Y, X2, family=sm.families.Poisson()).fit()\n\nWe can plot the coefficients associated with mnth and hr, in order to reproduce Figure 4.15. We first complete these coefficients as before.\n\nS_pois = summarize(M_pois)\ncoef_month = S_pois[S_pois.index.str.contains('mnth')]['coef']\ncoef_month = pd.concat([coef_month,\n                        pd.Series([-coef_month.sum()],\n                                   index=['mnth[Dec]'])])\ncoef_hr = S_pois[S_pois.index.str.contains('hr')]['coef']\ncoef_hr = pd.concat([coef_hr,\n                     pd.Series([-coef_hr.sum()],\n                     index=['hr[23]'])])\n\nThe plotting is as before.\n\nfig_pois, (ax_month, ax_hr) = subplots(1, 2, figsize=(16,8))\nax_month.plot(x_month, coef_month, marker='o', ms=10)\nax_month.set_xticks(x_month)\nax_month.set_xticklabels([l[5] for l in coef_month.index], fontsize=20)\nax_month.set_xlabel('Month', fontsize=20)\nax_month.set_ylabel('Coefficient', fontsize=20)\nax_hr.plot(x_hr, coef_hr, marker='o', ms=10)\nax_hr.set_xticklabels(range(24)[::2], fontsize=20)\nax_hr.set_xlabel('Hour', fontsize=20)\nax_hr.set_ylabel('Coefficient', fontsize=20);\n\nWe compare the fitted values of the two models. The fitted values are stored in the fittedvalues attribute returned by the fit() method for both the linear regression and the Poisson fits. The linear predictors are stored as the attribute lin_pred.\n\nfig, ax = subplots(figsize=(8, 8))\nax.scatter(M2_lm.fittedvalues,\n           M_pois.fittedvalues,\n           s=20)\nax.set_xlabel('Linear Regression Fit', fontsize=20)\nax.set_ylabel('Poisson Regression Fit', fontsize=20)\nax.axline([0,0], c='black', linewidth=3,\n          linestyle='--', slope=1);\n\nThe predictions from the Poisson regression model are correlated with those from the linear model; however, the former are non-negative. As a result the Poisson regression predictions tend to be larger than those from the linear model for either very low or very high levels of ridership.\nIn this section, we fit Poisson regression models using the sm.GLM() function with the argument family=sm.families.Poisson(). Earlier in this lab we used the sm.GLM() function with family=sm.families.Binomial() to perform logistic regression. Other choices for the family argument can be used to fit other types of GLMs. For instance, family=sm.families.Gamma() fits a Gamma regression model."
  },
  {
    "objectID": "python-notebooks/Ch5-resample-lab.html#the-validation-set-approach",
    "href": "python-notebooks/Ch5-resample-lab.html#the-validation-set-approach",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "The Validation Set Approach",
    "text": "The Validation Set Approach\nWe explore the use of the validation set approach in order to estimate the test error rates that result from fitting various linear models on the Auto data set.\nWe use the function train_test_split() to split the data into training and validation sets. As there are 392 observations, we split into two equal sets of size 196 using the argument test_size=196. It is generally a good idea to set a random seed when performing operations like this that contain an element of randomness, so that the results obtained can be reproduced precisely at a later time. We set the random seed of the splitter with the argument random_state=0.\n\nAuto = load_data('Auto')\nAuto_train, Auto_valid = train_test_split(Auto,\n                                         test_size=196,\n                                         random_state=0)\n\nNow we can fit a linear regression using only the observations corresponding to the training set Auto_train.\n\nhp_mm = MS(['horsepower'])\nX_train = hp_mm.fit_transform(Auto_train)\ny_train = Auto_train['mpg']\nmodel = sm.OLS(y_train, X_train)\nresults = model.fit()\n\nWe now use the predict() method of results evaluated on the model matrix for this model created using the validation data set. We also calculate the validation MSE of our model.\n\nX_valid = hp_mm.transform(Auto_valid)\ny_valid = Auto_valid['mpg']\nvalid_pred = results.predict(X_valid)\nnp.mean((y_valid - valid_pred)**2)\n\nHence our estimate for the validation MSE of the linear regression fit is \\(23.62\\).\nWe can also estimate the validation error for higher-degree polynomial regressions. We first provide a function evalMSE() that takes a model string as well as a training and test set and returns the MSE on the test set.\n\ndef evalMSE(terms,\n            response,\n            train,\n            test):\n\n   mm = MS(terms)\n   X_train = mm.fit_transform(train)\n   y_train = train[response]\n\n   X_test = mm.transform(test)\n   y_test = test[response]\n\n   results = sm.OLS(y_train, X_train).fit()\n   test_pred = results.predict(X_test)\n\n   return np.mean((y_test - test_pred)**2)\n\nLet’s use this function to estimate the validation MSE using linear, quadratic and cubic fits. We use the enumerate() function here, which gives both the values and indices of objects as one iterates over a for loop.\n\nMSE = np.zeros(3)\nfor idx, degree in enumerate(range(1, 4)):\n    MSE[idx] = evalMSE([poly('horsepower', degree)],\n                       'mpg',\n                       Auto_train,\n                       Auto_valid)\nMSE\n\nThese error rates are \\(23.62, 18.76\\), and \\(18.80\\), respectively. If we choose a different training/validation split instead, then we can expect somewhat different errors on the validation set.\n\nAuto_train, Auto_valid = train_test_split(Auto,\n                                          test_size=196,\n                                          random_state=3)\nMSE = np.zeros(3)\nfor idx, degree in enumerate(range(1, 4)):\n    MSE[idx] = evalMSE([poly('horsepower', degree)],\n                       'mpg',\n                       Auto_train,\n                       Auto_valid)\nMSE\n\nUsing this split of the observations into a training set and a validation set, we find that the validation set error rates for the models with linear, quadratic, and cubic terms are \\(20.76\\), \\(16.95\\), and \\(16.97\\), respectively.\nThese results are consistent with our previous findings: a model that predicts mpg using a quadratic function of horsepower performs better than a model that involves only a linear function of horsepower, and there is no evidence of an improvement in using a cubic function of horsepower."
  },
  {
    "objectID": "python-notebooks/Ch5-resample-lab.html#cross-validation",
    "href": "python-notebooks/Ch5-resample-lab.html#cross-validation",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Cross-Validation",
    "text": "Cross-Validation\nIn theory, the cross-validation estimate can be computed for any generalized linear model. {} In practice, however, the simplest way to cross-validate in Python is to use sklearn, which has a different interface or API than statsmodels, the code we have been using to fit GLMs.\nThis is a problem which often confronts data scientists: “I have a function to do task \\(A\\), and need to feed it into something that performs task \\(B\\), so that I can compute \\(B(A(D))\\), where \\(D\\) is my data.” When \\(A\\) and \\(B\\) don’t naturally speak to each other, this requires the use of a wrapper. In the ISLP package, we provide a wrapper, sklearn_sm(), that enables us to easily use the cross-validation tools of sklearn with models fit by statsmodels.\nThe class sklearn_sm() has as its first argument a model from statsmodels. It can take two additional optional arguments: model_str which can be used to specify a formula, and model_args which should be a dictionary of additional arguments used when fitting the model. For example, to fit a logistic regression model we have to specify a family argument. This is passed as model_args={'family':sm.families.Binomial()}.\nHere is our wrapper in action:\n\nhp_model = sklearn_sm(sm.OLS,\n                      MS(['horsepower']))\nX, Y = Auto.drop(columns=['mpg']), Auto['mpg']\ncv_results = cross_validate(hp_model,\n                            X,\n                            Y,\n                            cv=Auto.shape[0])\ncv_err = np.mean(cv_results['test_score'])\ncv_err\n\nThe arguments to cross_validate() are as follows: an object with the appropriate fit(), predict(), and score() methods, an array of features X and a response Y. We also included an additional argument cv to cross_validate(); specifying an integer \\(K\\) results in \\(K\\)-fold cross-validation. We have provided a value corresponding to the total number of observations, which results in leave-one-out cross-validation (LOOCV). The cross_validate() function produces a dictionary with several components; we simply want the cross-validated test score here (MSE), which is estimated to be 24.23.\nWe can repeat this procedure for increasingly complex polynomial fits. To automate the process, we again use a for loop which iteratively fits polynomial regressions of degree 1 to 5, computes the associated cross-validation error, and stores it in the \\(i\\)th element of the vector cv_error. The variable d in the for loop corresponds to the degree of the polynomial. We begin by initializing the vector. This command may take a couple of seconds to run.\n\ncv_error = np.zeros(5)\nH = np.array(Auto['horsepower'])\nM = sklearn_sm(sm.OLS)\nfor i, d in enumerate(range(1,6)):\n    X = np.power.outer(H, np.arange(d+1))\n    M_CV = cross_validate(M,\n                          X,\n                          Y,\n                          cv=Auto.shape[0])\n    cv_error[i] = np.mean(M_CV['test_score'])\ncv_error\n\nAs in Figure 5.4, we see a sharp drop in the estimated test MSE between the linear and quadratic fits, but then no clear improvement from using higher-degree polynomials.\nAbove we introduced the outer() method of the np.power() function. The outer() method is applied to an operation that has two arguments, such as add(), min(), or power(). It has two arrays as arguments, and then forms a larger array where the operation is applied to each pair of elements of the two arrays.\n\nA = np.array([3, 5, 9])\nB = np.array([2, 4])\nnp.add.outer(A, B)\n\nIn the CV example above, we used \\(K=n\\), but of course we can also use \\(K<n\\). The code is very similar to the above (and is significantly faster). Here we use KFold() to partition the data into \\(K=10\\) random groups. We use random_state to set a random seed and initialize a vector cv_error in which we will store the CV errors corresponding to the polynomial fits of degrees one to five.\n\ncv_error = np.zeros(5)\ncv = KFold(n_splits=10,\n           shuffle=True,\n           random_state=0) # use same splits for each degree\nfor i, d in enumerate(range(1,6)):\n    X = np.power.outer(H, np.arange(d+1))\n    M_CV = cross_validate(M,\n                          X,\n                          Y,\n                          cv=cv)\n    cv_error[i] = np.mean(M_CV['test_score'])\ncv_error\n\nNotice that the computation time is much shorter than that of LOOCV. (In principle, the computation time for LOOCV for a least squares linear model should be faster than for \\(K\\)-fold CV, due to the availability of the formula (5.2) for LOOCV; however, the generic cross_validate() function does not make use of this formula.) We still see little evidence that using cubic or higher-degree polynomial terms leads to a lower test error than simply using a quadratic fit.\nThe cross_validate() function is flexible and can take different splitting mechanisms as an argument. For instance, one can use the ShuffleSplit() funtion to implement the validation set approach just as easily as K-fold cross-validation.\n\nvalidation = ShuffleSplit(n_splits=1,\n                          test_size=196,\n                          random_state=0)\nresults = cross_validate(hp_model,\n                         Auto.drop(['mpg'], axis=1),\n                         Auto['mpg'],\n                         cv=validation);\nresults['test_score']\n\nOne can estimate the variability in the test error by running the following:\n\nvalidation = ShuffleSplit(n_splits=10,\n                          test_size=196,\n                          random_state=0)\nresults = cross_validate(hp_model,\n                         Auto.drop(['mpg'], axis=1),\n                         Auto['mpg'],\n                         cv=validation)\nresults['test_score'].mean(), results['test_score'].std()\n\nNote that this standard deviation is not a valid estimate of the sampling variability of the mean test score or the individual scores, since the randomly-selected training samples overlap and hence introduce correlations. But it does give an idea of the Monte Carlo variation incurred by picking different random folds."
  },
  {
    "objectID": "python-notebooks/Ch5-resample-lab.html#the-bootstrap",
    "href": "python-notebooks/Ch5-resample-lab.html#the-bootstrap",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "The Bootstrap",
    "text": "The Bootstrap\nWe illustrate the use of the bootstrap in the simple example {of Section 5.2,} as well as on an example involving estimating the accuracy of the linear regression model on the Auto data set. ### Estimating the Accuracy of a Statistic of Interest One of the great advantages of the bootstrap approach is that it can be applied in almost all situations. No complicated mathematical calculations are required. While there are several implementations of the bootstrap in Python, its use for estimating standard error is simple enough that we write our own function below for the case when our data is stored in a dataframe.\nTo illustrate the bootstrap, we start with a simple example. The Portfolio data set in the ISLP package is described in Section 5.2. The goal is to estimate the sampling variance of the parameter \\(\\alpha\\) given in formula (5.7). We will create a function alpha_func(), which takes as input a dataframe D assumed to have columns X and Y, as well as a vector idx indicating which observations should be used to estimate \\(\\alpha\\). The function then outputs the estimate for \\(\\alpha\\) based on the selected observations.\n\nPortfolio = load_data('Portfolio')\ndef alpha_func(D, idx):\n   cov_ = np.cov(D[['X','Y']].loc[idx], rowvar=False)\n   return ((cov_[1,1] - cov_[0,1]) /\n           (cov_[0,0]+cov_[1,1]-2*cov_[0,1]))\n\nThis function returns an estimate for \\(\\alpha\\) based on applying the minimum variance formula (5.7) to the observations indexed by the argument idx. For instance, the following command estimates \\(\\alpha\\) using all 100 observations.\n\nalpha_func(Portfolio, range(100))\n\nNext we randomly select 100 observations from range(100), with replacement. This is equivalent to constructing a new bootstrap data set and recomputing \\(\\hat{\\alpha}\\) based on the new data set.\n\nrng = np.random.default_rng(0)\nalpha_func(Portfolio,\n           rng.choice(100,\n                      100,\n                      replace=True))\n\nThis process can be generalized to create a simple function boot_SE() for computing the bootstrap standard error for arbitrary functions that take only a data frame as an argument.\n\ndef boot_SE(func,\n            D,\n            n=None,\n            B=1000,\n            seed=0):\n    rng = np.random.default_rng(seed)\n    first_, second_ = 0, 0\n    n = n or D.shape[0]\n    for _ in range(B):\n        idx = rng.choice(D.index,\n                         n,\n                         replace=True)\n        value = func(D, idx)\n        first_ += value\n        second_ += value**2\n    return np.sqrt(second_ / B - (first_ / B)**2)\n\nNotice the use of _ as a loop variable in for _ in range(B). This is often used if the value of the counter is unimportant and simply makes sure the loop is executed B times.\nLet’s use our function to evaluate the accuracy of our estimate of \\(\\alpha\\) using \\(B=1{,}000\\) bootstrap replications.\n\nalpha_SE = boot_SE(alpha_func,\n                   Portfolio,\n                   B=1000,\n                   seed=0)\nalpha_SE\n\nThe final output shows that the bootstrap estimate for \\({\\rm SE}(\\hat{\\alpha})\\) is \\(0.0912\\).\n\nEstimating the Accuracy of a Linear Regression Model\nThe bootstrap approach can be used to assess the variability of the coefficient estimates and predictions from a statistical learning method. Here we use the bootstrap approach in order to assess the variability of the estimates for \\(\\beta_0\\) and \\(\\beta_1\\), the intercept and slope terms for the linear regression model that uses horsepower to predict mpg in the Auto data set. We will compare the estimates obtained using the bootstrap to those obtained using the formulas for \\({\\rm SE}(\\hat{\\beta}_0)\\) and \\({\\rm SE}(\\hat{\\beta}_1)\\) described in Section 3.1.2.\nTo use our boot_SE() function, we must write a function (its first argument) that takes a data frame D and indices idx as its only arguments. But here we want to bootstrap a specific regression model, specified by a model formula and data. We show how to do this in a few simple steps.\nWe start by writing a generic function boot_OLS() for bootstrapping a regression model that takes a formula to define the corresponding regression. We use the clone() function to make a copy of the formula that can be refit to the new dataframe. This means that any derived features such as those defined by poly() (which we will see shortly), will be re-fit on the resampled data frame.\n\ndef boot_OLS(model_matrix, response, D, idx):\n    D_ = D.loc[idx]\n    Y_ = D_[response]\n    X_ = clone(model_matrix).fit_transform(D_)\n    return sm.OLS(Y_, X_).fit().params\n\nThis is not quite what is needed as the first argument to boot_SE(). The first two arguments which specify the model will not change in the bootstrap process, and we would like to freeze them. The function partial() from the functools module does precisely this: it takes a function as an argument, and freezes some of its arguments, starting from the left. We use it to freeze the first two model-formula arguments of boot_OLS().\n\nhp_func = partial(boot_OLS, MS(['horsepower']), 'mpg')\n\nTyping hp_func? will show that it has two arguments D and idx — it is a version of boot_OLS() with the first two arguments frozen — and hence is ideal as the first argument for boot_SE().\nThe hp_func() function can now be used in order to create bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. We first demonstrate its utility on 10 bootstrap samples.\n\nrng = np.random.default_rng(0)\nnp.array([hp_func(Auto,\n          rng.choice(392,\n                     392,\n                     replace=True)) for _ in range(10)])\n\nNext, we use the boot_SE() {} function to compute the standard errors of 1,000 bootstrap estimates for the intercept and slope terms.\n\nhp_se = boot_SE(hp_func,\n                Auto,\n                B=1000,\n                seed=10)\nhp_se\n\nThis indicates that the bootstrap estimate for \\({\\rm SE}(\\hat{\\beta}_0)\\) is 0.85, and that the bootstrap estimate for \\({\\rm SE}(\\hat{\\beta}_1)\\) is 0.0074. As discussed in Section 3.1.2, standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. These can be obtained using the summarize() function from ISLP.sm.\n\nhp_model.fit(Auto, Auto['mpg'])\nmodel_se = summarize(hp_model.results_)['std err']\nmodel_se\n\nThe standard error estimates for \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) obtained using the formulas from Section 3.1.2 are 0.717 for the intercept and 0.006 for the slope. Interestingly, these are somewhat different from the estimates obtained using the bootstrap. Does this indicate a problem with the bootstrap? In fact, it suggests the opposite. Recall that the standard formulas given in {Equation 3.8 on page 80} rely on certain assumptions. For example, they depend on the unknown parameter \\(\\sigma^2\\), the noise variance. We then estimate \\(\\sigma^2\\) using the RSS. Now although the formula for the standard errors do not rely on the linear model being correct, the estimate for \\(\\sigma^2\\) does. We see {in Figure 3.8 on page 106} that there is a non-linear relationship in the data, and so the residuals from a linear fit will be inflated, and so will \\(\\hat{\\sigma}^2\\). Secondly, the standard formulas assume (somewhat unrealistically) that the \\(x_i\\) are fixed, and all the variability comes from the variation in the errors \\(\\epsilon_i\\). The bootstrap approach does not rely on any of these assumptions, and so it is likely giving a more accurate estimate of the standard errors of \\(\\hat{\\beta}_0\\) and \\(\\hat{\\beta}_1\\) than the results from sm.OLS.\nBelow we compute the bootstrap standard error estimates and the standard linear regression estimates that result from fitting the quadratic model to the data. Since this model provides a good fit to the data (Figure 3.8), there is now a better correspondence between the bootstrap estimates and the standard estimates of \\({\\rm SE}(\\hat{\\beta}_0)\\), \\({\\rm SE}(\\hat{\\beta}_1)\\) and \\({\\rm SE}(\\hat{\\beta}_2)\\).\n\nquad_model = MS([poly('horsepower', 2, raw=True)])\nquad_func = partial(boot_OLS,\n                    quad_model,\n                    'mpg')\nboot_SE(quad_func, Auto, B=1000)\n\nWe compare the results to the standard errors computed using sm.OLS().\n\nM = sm.OLS(Auto['mpg'],\n           quad_model.fit_transform(Auto))\nsummarize(M.fit())['std err']"
  },
  {
    "objectID": "python-notebooks/Ch6-varselect-lab.html#ridge-regression-and-the-lasso",
    "href": "python-notebooks/Ch6-varselect-lab.html#ridge-regression-and-the-lasso",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Ridge Regression and the Lasso",
    "text": "Ridge Regression and the Lasso\nWe will use the sklearn.linear_model package (for which we use skl as shorthand below) to fit ridge and lasso regularized linear models on the Hitters data. We start with the model matrix X (without an intercept) that we computed in the previous section on best subset regression.\n\nRidge Regression\nWe will use the function skl.ElasticNet() to fit both ridge and the lasso. To fit a path of ridge regressions models, we use skl.ElasticNet.path(), which can fit both ridge and lasso, as well as a hybrid mixture; ridge regression corresponds to l1_ratio=0. It is good practice to standardize the columns of X in these applications, if the variables are measured in different units. Since skl.ElasticNet() does no normalization, we have to take care of that ourselves. Since we standardize first, in order to find coefficient estimates on the original scale, we must unstandardize the coefficient estimates. The parameter \\(\\lambda\\) in (6.5) and (6.7) is called alphas in sklearn. In order to be consistent with the rest of this chapter, we use lambdas rather than alphas in what follows. {At the time of publication, ridge fits like the one in code chunk [22] issue unwarranted convergence warning messages; we expect these to disappear as this package matures.}\n\nXs = X - X.mean(0)[None,:]\nX_scale = X.std(0)\nXs = Xs / X_scale[None,:]\nlambdas = 10**np.linspace(8, -2, 100) / Y.std()\nsoln_array = skl.ElasticNet.path(Xs,\n                                 Y,\n                                 l1_ratio=0.,\n                                 alphas=lambdas)[1]\nsoln_array.shape\n\nHere we extract the array of coefficients corresponding to the solutions along the regularization path. By default the skl.ElasticNet.path method fits a path along an automatically selected range of \\(\\lambda\\) values, except for the case when l1_ratio=0, which results in ridge regression (as is the case here). {The reason is rather technical; for all models except ridge, we can find the smallest value of \\(\\lambda\\) for which all coefficients are zero. For ridge this value is \\(\\infty\\).} So here we have chosen to implement the function over a grid of values ranging from \\(\\lambda=10^{8}\\) to \\(\\lambda=10^{-2}\\) scaled by the standard deviation of \\(y\\), essentially covering the full range of scenarios from the null model containing only the intercept, to the least squares fit.\nAssociated with each value of \\(\\lambda\\) is a vector of ridge regression coefficients, that can be accessed by a column of soln_array. In this case, soln_array is a \\(19 \\times 100\\) matrix, with 19 rows (one for each predictor) and 100 columns (one for each value of \\(\\lambda\\)).\nWe transpose this matrix and turn it into a data frame to facilitate viewing and plotting.\n\nsoln_path = pd.DataFrame(soln_array.T,\n                         columns=D.columns,\n                         index=-np.log(lambdas))\nsoln_path.index.name = 'negative log(lambda)'\nsoln_path\n\nWe plot the paths to get a sense of how the coefficients vary with \\(\\lambda\\). To control the location of the legend we first set legend to False in the plot method, adding it afterward with the legend() method of ax.\n\npath_fig, ax = subplots(figsize=(8,8))\nsoln_path.plot(ax=ax, legend=False)\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Standardized coefficients', fontsize=20)\nax.legend(loc='upper left');\n\n(We have used latex formatting in the horizontal label, in order to format the Greek \\(\\lambda\\) appropriately.) We expect the coefficient estimates to be much smaller, in terms of \\(\\ell_2\\) norm, when a large value of \\(\\lambda\\) is used, as compared to when a small value of \\(\\lambda\\) is used. (Recall that the \\(\\ell_2\\) norm is the square root of the sum of squared coefficient values.) We display the coefficients at the \\(40\\)th step, where \\(\\lambda\\) is 25.535.\n\nbeta_hat = soln_path.loc[soln_path.index[39]]\nlambdas[39], beta_hat\n\nLet’s compute the \\(\\ell_2\\) norm of the standardized coefficients.\n\nnp.linalg.norm(beta_hat)\n\nIn contrast, here is the \\(\\ell_2\\) norm when \\(\\lambda\\) is 2.44e-01. Note the much larger \\(\\ell_2\\) norm of the coefficients associated with this smaller value of \\(\\lambda\\).\n\nbeta_hat = soln_path.loc[soln_path.index[59]]\nlambdas[59], np.linalg.norm(beta_hat)\n\nAbove we normalized X upfront, and fit the ridge model using Xs. The Pipeline() object in sklearn provides a clear way to separate feature normalization from the fitting of the ridge model itself.\n\nridge = skl.ElasticNet(alpha=lambdas[59], l1_ratio=0)\nscaler = StandardScaler(with_mean=True,  with_std=True)\npipe = Pipeline(steps=[('scaler', scaler), ('ridge', ridge)])\npipe.fit(X, Y)\n\nWe show that it gives the same \\(\\ell_2\\) norm as in our previous fit on the standardized data.\n\nnp.linalg.norm(ridge.coef_)\n\nNotice that the operation pipe.fit(X, Y) above has changed the ridge object, and in particular has added attributes such as coef_ that were not there before. ### Estimating Test Error of Ridge Regression Choosing an a priori value of \\(\\lambda\\) for ridge regression is difficult if not impossible. We will want to use the validation method or cross-validation to select the tuning parameter. The reader may not be surprised that the Pipeline() approach can be used in skm.cross_validate() with either a validation method (i.e. validation) or \\(k\\)-fold cross-validation.\nWe fix the random state of the splitter so that the results obtained will be reproducible.\n\nvalidation = skm.ShuffleSplit(n_splits=1,\n                              test_size=0.5,\n                              random_state=0)\nridge.alpha = 0.01\nresults = skm.cross_validate(ridge,\n                             X,\n                             Y,\n                             scoring='neg_mean_squared_error',\n                             cv=validation)\n-results['test_score']\n\nThe test MSE is 1.342e+05. Note that if we had instead simply fit a model with just an intercept, we would have predicted each test observation using the mean of the training observations. We can get the same result by fitting a ridge regression model with a very large value of \\(\\lambda\\). Note that 1e10 means \\(10^{10}\\).\n\nridge.alpha = 1e10\nresults = skm.cross_validate(ridge,\n                             X,\n                             Y,\n                             scoring='neg_mean_squared_error',\n                             cv=validation)\n-results['test_score']\n\nObviously choosing \\(\\lambda=0.01\\) is arbitrary, so we will use cross-validation or the validation-set approach to choose the tuning parameter \\(\\lambda\\). The object GridSearchCV() allows exhaustive grid search to choose such a parameter.\nWe first use the validation set method to choose \\(\\lambda\\).\n\nparam_grid = {'ridge__alpha': lambdas}\ngrid = skm.GridSearchCV(pipe,\n                        param_grid,\n                        cv=validation,\n                        scoring='neg_mean_squared_error')\ngrid.fit(X, Y)\ngrid.best_params_['ridge__alpha']\ngrid.best_estimator_\n\nAlternatively, we can use 5-fold cross-validation.\n\ngrid = skm.GridSearchCV(pipe, \n                        param_grid,\n                        cv=kfold,\n                        scoring='neg_mean_squared_error')\ngrid.fit(X, Y)\ngrid.best_params_['ridge__alpha']\ngrid.best_estimator_\n\nRecall we set up the kfold object for 5-fold cross-validation on page 296. We now plot the cross-validated MSE as a function of \\(-\\log(\\lambda)\\), which has shrinkage decreasing from left to right.\n\nridge_fig, ax = subplots(figsize=(8,8))\nax.errorbar(-np.log(lambdas),\n            -grid.cv_results_['mean_test_score'],\n            yerr=grid.cv_results_['std_test_score'] / np.sqrt(K))\nax.set_ylim([50000,250000])\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Cross-validated MSE', fontsize=20);\n\nOne can cross-validate different metrics to choose a parameter. The default metric for skl.ElasticNet() is test \\(R^2\\). Let’s compare \\(R^2\\) to MSE for cross-validation here.\n\ngrid_r2 = skm.GridSearchCV(pipe, \n                           param_grid,\n                           cv=kfold)\ngrid_r2.fit(X, Y)\n\nFinally, let’s plot the results for cross-validated \\(R^2\\).\n\nr2_fig, ax = subplots(figsize=(8,8))\nax.errorbar(-np.log(lambdas),\n            grid_r2.cv_results_['mean_test_score'],\n            yerr=grid_r2.cv_results_['std_test_score'] / np.sqrt(K))\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Cross-validated $R^2$', fontsize=20);\n\n\n\nFast Cross-Validation for Solution Paths\nThe ridge, lasso, and elastic net can be efficiently fit along a sequence of \\(\\lambda\\) values, creating what is known as a solution path or regularization path. Hence there is specialized code to fit such paths, and to choose a suitable value of \\(\\lambda\\) using cross-validation. Even with identical splits the results will not agree exactly with our grid above because the standardization of each feature in grid is carried out on each fold, while in pipeCV below it is carried out only once. Nevertheless, the results are similar as the normalization is relatively stable across folds.\n\nridgeCV = skl.ElasticNetCV(alphas=lambdas, \n                           l1_ratio=0,\n                           cv=kfold)\npipeCV = Pipeline(steps=[('scaler', scaler),\n                         ('ridge', ridgeCV)])\npipeCV.fit(X, Y)\n\nLet’s produce a plot again of the cross-validation error to see that it is similar to using skm.GridSearchCV.\n\ntuned_ridge = pipeCV.named_steps['ridge']\nridgeCV_fig, ax = subplots(figsize=(8,8))\nax.errorbar(-np.log(lambdas),\n            tuned_ridge.mse_path_.mean(1),\n            yerr=tuned_ridge.mse_path_.std(1) / np.sqrt(K))\nax.axvline(-np.log(tuned_ridge.alpha_), c='k', ls='--')\nax.set_ylim([50000,250000])\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Cross-validated MSE', fontsize=20);\n\nWe see that the value of \\(\\lambda\\) that results in the smallest cross-validation error is 1.19e-02, available as the value tuned_ridge.alpha_. What is the test MSE associated with this value of \\(\\lambda\\)?\n\nnp.min(tuned_ridge.mse_path_.mean(1))\n\nThis represents a further improvement over the test MSE that we got using \\(\\lambda=4\\). Finally, tuned_ridge.coef_ has the coefficients fit on the entire data set at this value of \\(\\lambda\\).\n\ntuned_ridge.coef_\n\nAs expected, none of the coefficients are zero—ridge regression does not perform variable selection!\n\n\nEvaluating Test Error of Cross-Validated Ridge\nChoosing \\(\\lambda\\) using cross-validation provides a single regression estimator, similar to fitting a linear regression model as we saw in Chapter 3. It is therefore reasonable to estimate what its test error is. We run into a problem here in that cross-validation will have touched all of its data in choosing \\(\\lambda\\), hence we have no further data to estimate test error. A compromise is to do an initial split of the data into two disjoint sets: a training set and a test set. We then fit a cross-validation tuned ridge regression on the training set, and evaluate its performance on the test set. We might call this cross-validation nested within the validation set approach. A priori there is no reason to use half of the data for each of the two sets in validation. Below, we use 75% for training and 25% for test, with the estimator being ridge regression tuned using 5-fold cross-validation. This can be achieved in code as follows:\n\nouter_valid = skm.ShuffleSplit(n_splits=1, \n                               test_size=0.25,\n                               random_state=1)\ninner_cv = skm.KFold(n_splits=5,\n                     shuffle=True,\n                     random_state=2)\nridgeCV = skl.ElasticNetCV(alphas=lambdas,\n                           l1_ratio=0,\n                           cv=inner_cv)\npipeCV = Pipeline(steps=[('scaler', scaler),\n                         ('ridge', ridgeCV)]);\n\n\nresults = skm.cross_validate(pipeCV, \n                             X,\n                             Y,\n                             cv=outer_valid,\n                             scoring='neg_mean_squared_error')\n-results['test_score']\n\n\n\nThe Lasso\nWe saw that ridge regression with a wise choice of \\(\\lambda\\) can outperform least squares as well as the null model on the Hitters data set. We now ask whether the lasso can yield either a more accurate or a more interpretable model than ridge regression. In order to fit a lasso model, we once again use the ElasticNetCV() function; however, this time we use the argument l1_ratio=1. Other than that change, we proceed just as we did in fitting a ridge model.\n\nlassoCV = skl.ElasticNetCV(n_alphas=100, \n                           l1_ratio=1,\n                           cv=kfold)\npipeCV = Pipeline(steps=[('scaler', scaler),\n                         ('lasso', lassoCV)])\npipeCV.fit(X, Y)\ntuned_lasso = pipeCV.named_steps['lasso']\ntuned_lasso.alpha_\n\n\nlambdas, soln_array = skl.Lasso.path(Xs, \n                                    Y,\n                                    l1_ratio=1,\n                                    n_alphas=100)[:2]\nsoln_path = pd.DataFrame(soln_array.T,\n                         columns=D.columns,\n                         index=-np.log(lambdas))\n\nWe can see from the coefficient plot of the standardized coefficients that depending on the choice of tuning parameter, some of the coefficients will be exactly equal to zero.\n\npath_fig, ax = subplots(figsize=(8,8))\nsoln_path.plot(ax=ax, legend=False)\nax.legend(loc='upper left')\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Standardized coefficiients', fontsize=20);\n\nThe smallest cross-validated error is lower than the test set MSE of the null model and of least squares, and very similar to the test MSE of 115526.71 of ridge regression (page 303) with \\(\\lambda\\) chosen by cross-validation.\n\nnp.min(tuned_lasso.mse_path_.mean(1))\n\nLet’s again produce a plot of the cross-validation error.\n\nlassoCV_fig, ax = subplots(figsize=(8,8))\nax.errorbar(-np.log(tuned_lasso.alphas_),\n            tuned_lasso.mse_path_.mean(1),\n            yerr=tuned_lasso.mse_path_.std(1) / np.sqrt(K))\nax.axvline(-np.log(tuned_lasso.alpha_), c='k', ls='--')\nax.set_ylim([50000,250000])\nax.set_xlabel('$-\\log(\\lambda)$', fontsize=20)\nax.set_ylabel('Cross-validated MSE', fontsize=20);\n\nHowever, the lasso has a substantial advantage over ridge regression in that the resulting coefficient estimates are sparse. Here we see that 6 of the 19 coefficient estimates are exactly zero. So the lasso model with \\(\\lambda\\) chosen by cross-validation contains only 13 variables.\n\ntuned_lasso.coef_\n\nAs in ridge regression, we could evaluate the test error of cross-validated lasso by first splitting into test and training sets and internally running cross-validation on the training set. We leave this as an exercise."
  },
  {
    "objectID": "python-notebooks/Ch6-varselect-lab.html#pcr-and-pls-regression",
    "href": "python-notebooks/Ch6-varselect-lab.html#pcr-and-pls-regression",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "PCR and PLS Regression",
    "text": "PCR and PLS Regression\n\nPrincipal Components Regression\nPrincipal components regression (PCR) can be performed using PCA() from the sklearn.decomposition module. We now apply PCR to the Hitters data, in order to predict Salary. Again, ensure that the missing values have been removed from the data, as described in Section 6.5.1.\nWe use LinearRegression() to fit the regression model here. Note that it fits an intercept by default, unlike the OLS() function seen earlier in Section 6.5.1.\n\npca = PCA(n_components=2)\nlinreg = skl.LinearRegression()\npipe = Pipeline([('pca', pca),\n                 ('linreg', linreg)])\npipe.fit(X, Y)\npipe.named_steps['linreg'].coef_\n\nWhen performing PCA, the results vary depending on whether the data has been standardized or not. As in the earlier examples, this can be accomplished by including an additional step in the pipeline.\n\npipe = Pipeline([('scaler', scaler), \n                 ('pca', pca),\n                 ('linreg', linreg)])\npipe.fit(X, Y)\npipe.named_steps['linreg'].coef_\n\nWe can of course use CV to choose the number of components, by using skm.GridSearchCV, in this case fixing the parameters to vary the n_components.\n\nparam_grid = {'pca__n_components': range(1, 20)}\ngrid = skm.GridSearchCV(pipe,\n                        param_grid,\n                        cv=kfold,\n                        scoring='neg_mean_squared_error')\ngrid.fit(X, Y)\n\nLet’s plot the results as we have for other methods.\n\npcr_fig, ax = subplots(figsize=(8,8))\nn_comp = param_grid['pca__n_components']\nax.errorbar(n_comp,\n            -grid.cv_results_['mean_test_score'],\n            grid.cv_results_['std_test_score'] / np.sqrt(K))\nax.set_ylabel('Cross-validated MSE', fontsize=20)\nax.set_xlabel('# principal components', fontsize=20)\nax.set_xticks(n_comp[::2])\nax.set_ylim([50000,250000]);\n\nWe see that the smallest cross-validation error occurs when 17 components are used. However, from the plot we also see that the cross-validation error is roughly the same when only one component is included in the model. This suggests that a model that uses just a small number of components might suffice.\nThe CV score is provided for each possible number of components from 1 to 19 inclusive. The PCA() method complains if we try to fit an intercept only with n_components=0 so we also compute the MSE for just the null model with these splits.\n\nXn = np.zeros((X.shape[0], 1))\ncv_null = skm.cross_validate(linreg,\n                             Xn,\n                             Y,\n                             cv=kfold,\n                             scoring='neg_mean_squared_error')\n-cv_null['test_score'].mean()\n\nThe explained_variance_ratio_ attribute of our PCA object provides the percentage of variance explained in the predictors and in the response using different numbers of components. This concept is discussed in greater detail in Section 12.2.\n\npipe.named_steps['pca'].explained_variance_ratio_\n\nBriefly, we can think of this as the amount of information about the predictors that is captured using \\(M\\) principal components. For example, setting \\(M=1\\) only captures 38.31% of the variance, while \\(M=2\\) captures an additional 21.84%, for a total of 60.15% of the variance. By \\(M=6\\) it increases to 88.63%. Beyond this the increments continue to diminish, until we use all \\(M=p=19\\) components, which captures all 100% of the variance.\n\n\nPartial Least Squares\nPartial least squares (PLS) is implemented in the PLSRegression() function.\n\npls = PLSRegression(n_components=2, \n                    scale=True)\npls.fit(X, Y)\n\nAs was the case in PCR, we will want to use CV to choose the number of components.\n\nparam_grid = {'n_components':range(1, 20)}\ngrid = skm.GridSearchCV(pls,\n                        param_grid,\n                        cv=kfold,\n                        scoring='neg_mean_squared_error')\ngrid.fit(X, Y)\n\nAs for our other methods, we plot the MSE.\n\npls_fig, ax = subplots(figsize=(8,8))\nn_comp = param_grid['n_components']\nax.errorbar(n_comp,\n            -grid.cv_results_['mean_test_score'],\n            grid.cv_results_['std_test_score'] / np.sqrt(K))\nax.set_ylabel('Cross-validated MSE', fontsize=20)\nax.set_xlabel('# principal components', fontsize=20)\nax.set_xticks(n_comp[::2])\nax.set_ylim([50000,250000]);\n\nCV error is minimized at 12, though there is little noticable difference between this point and a much lower number like 2 or 3 components."
  },
  {
    "objectID": "python-notebooks/Ch7-nonlin-lab.html#polynomial-regression-and-step-functions",
    "href": "python-notebooks/Ch7-nonlin-lab.html#polynomial-regression-and-step-functions",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Polynomial Regression and Step Functions",
    "text": "Polynomial Regression and Step Functions\nWe start by demonstrating how Figure 7.1 can be reproduced. Let’s begin by loading the data.\n\nWage = load_data('Wage')\ny = Wage['wage']\nage = Wage['age']\n\nThroughout most of this lab, our response is Wage['wage'], which we have stored as y above. As in Section 3.6.6, we will use the poly() function to create a model matrix that will fit a \\(4\\)th degree polynomial in age.\n\npoly_age = MS([poly('age', degree=4)]).fit(Wage)\nM = sm.OLS(y, poly_age.transform(Wage)).fit()\nsummarize(M)\n\nThis polynomial is constructed using the function poly(), which creates a special transformer Poly() (using sklearn terminology for feature transformations such as PCA() seen in Section 6.5.3) which allows for easy evaluation of the polynomial at new data points. Here poly() is referred to as a helper function, and sets up the transformation; Poly() is the actual workhorse that computes the transformation. See also the discussion of transformations on page 127.\nIn the code above, the first line executes the fit() method using the dataframe Wage. This recomputes and stores as attributes any parameters needed by Poly() on the training data, and these will be used on all subsequent evaluations of the transform() method. For example, it is used on the second line, as well as in the plotting function developed below.\nWe now create a grid of values for age at which we want predictions.\n\nage_grid = np.linspace(age.min(),\n                       age.max(),\n                       100)\nage_df = pd.DataFrame({'age': age_grid})\n\nFinally, we wish to plot the data and add the fit from the fourth-degree polynomial. As we will make several similar plots below, we first write a function to create all the ingredients and produce the plot. Our function takes in a model specification (here a basis specified by a transform), as well as a grid of age values. The function produces a fitted curve as well as 95% confidence bands. By using an argument for basis we can produce and plot the results with several different transforms, such as the splines we will see shortly.\n\ndef plot_wage_fit(age_df, \n                  basis,\n                  title):\n\n    X = basis.transform(Wage)\n    Xnew = basis.transform(age_df)\n    M = sm.OLS(y, X).fit()\n    preds = M.get_prediction(Xnew)\n    bands = preds.conf_int(alpha=0.05)\n    fig, ax = subplots(figsize=(8,8))\n    ax.scatter(age,\n               y,\n               facecolor='gray',\n               alpha=0.5)\n    for val, ls in zip([preds.predicted_mean,\n                      bands[:,0],\n                      bands[:,1]],\n                     ['b','r--','r--']):\n        ax.plot(age_df.values, val, ls, linewidth=3)\n    ax.set_title(title, fontsize=20)\n    ax.set_xlabel('Age', fontsize=20)\n    ax.set_ylabel('Wage', fontsize=20);\n    return ax\n\nWe include an argument alpha to ax.scatter() to add some transparency to the points. This provides a visual indication of density. Notice the use of the zip() function in the for loop above (see Section 2.3.8). We have three lines to plot, each with different colors and line types. Here zip() conveniently bundles these together as iterators in the loop. {In Python speak, an “iterator” is an object with a finite number of values, that can be iterated on, as in a loop.}\nWe now plot the fit of the fourth-degree polynomial using this function.\n\nplot_wage_fit(age_df, \n              poly_age,\n              'Degree-4 Polynomial');\n\nWith polynomial regression we must decide on the degree of the polynomial to use. Sometimes we just wing it, and decide to use second or third degree polynomials, simply to obtain a nonlinear fit. But we can make such a decision in a more systematic way. One way to do this is through hypothesis tests, which we demonstrate here. We now fit a series of models ranging from linear (degree-one) to degree-five polynomials, and look to determine the simplest model that is sufficient to explain the relationship between wage and age. We use the anova_lm() function, which performs a series of ANOVA tests. An or ANOVA tests the null hypothesis that a model \\(\\mathcal{M}_1\\) is sufficient to explain the data against the alternative hypothesis that a more complex model \\(\\mathcal{M}_2\\) is required. The determination is based on an F-test. To perform the test, the models \\(\\mathcal{M}_1\\) and \\(\\mathcal{M}_2\\) must be nested: the space spanned by the predictors in \\(\\mathcal{M}_1\\) must be a subspace of the space spanned by the predictors in \\(\\mathcal{M}_2\\). In this case, we fit five different polynomial models and sequentially compare the simpler model to the more complex model.\n\nmodels = [MS([poly('age', degree=d)]) \n          for d in range(1, 6)]\nXs = [model.fit_transform(Wage) for model in models]\nanova_lm(*[sm.OLS(y, X_).fit()\n           for X_ in Xs])\n\nNotice the * in the anova_lm() line above. This function takes a variable number of non-keyword arguments, in this case fitted models. When these models are provided as a list (as is done here), it must be prefixed by *.\nThe p-value comparing the linear models[0] to the quadratic models[1] is essentially zero, indicating that a linear fit is not sufficient. {Indexing starting at zero is confusing for the polynomial degree example, since models[1] is quadratic rather than linear!} Similarly the p-value comparing the quadratic models[1] to the cubic models[2] is very low (0.0017), so the quadratic fit is also insufficient. The p-value comparing the cubic and degree-four polynomials, models[2] and models[3], is approximately 5%, while the degree-five polynomial models[4] seems unnecessary because its p-value is 0.37. Hence, either a cubic or a quartic polynomial appear to provide a reasonable fit to the data, but lower- or higher-order models are not justified.\nIn this case, instead of using the anova() function, we could have obtained these p-values more succinctly by exploiting the fact that poly() creates orthogonal polynomials.\n\nsummarize(M)\n\nNotice that the p-values are the same, and in fact the square of the t-statistics are equal to the F-statistics from the anova_lm() function; for example:\n\n(-11.983)**2\n\nHowever, the ANOVA method works whether or not we used orthogonal polynomials, provided the models are nested. For example, we can use anova_lm() to compare the following three models, which all have a linear term in education and a polynomial in age of different degrees:\n\nmodels = [MS(['education', poly('age', degree=d)])\n          for d in range(1, 4)]\nXEs = [model.fit_transform(Wage)\n       for model in models]\nanova_lm(*[sm.OLS(y, X_).fit() for X_ in XEs])\n\nAs an alternative to using hypothesis tests and ANOVA, we could choose the polynomial degree using cross-validation, as discussed in Chapter 5.\nNext we consider the task of predicting whether an individual earns more than $250,000 per year. We proceed much as before, except that first we create the appropriate response vector, and then apply the glm() function using the binomial family in order to fit a polynomial logistic regression model.\n\nX = poly_age.transform(Wage)\nhigh_earn = Wage['high_earn'] = y > 250 # shorthand\nglm = sm.GLM(y > 250,\n             X,\n             family=sm.families.Binomial())\nB = glm.fit()\nsummarize(B)\n\nOnce again, we make predictions using the get_prediction() method.\n\nnewX = poly_age.transform(age_df)\npreds = B.get_prediction(newX)\nbands = preds.conf_int(alpha=0.05)\n\nWe now plot the estimated relationship.\n\nfig, ax = subplots(figsize=(8,8))\nrng = np.random.default_rng(0)\nax.scatter(age +\n           0.2 * rng.uniform(size=y.shape[0]),\n           np.where(high_earn, 0.198, 0.002),\n           fc='gray',\n           marker='|')\nfor val, ls in zip([preds.predicted_mean,\n                  bands[:,0],\n                  bands[:,1]],\n                 ['b','r--','r--']):\n    ax.plot(age_df.values, val, ls, linewidth=3)\nax.set_title('Degree-4 Polynomial', fontsize=20)\nax.set_xlabel('Age', fontsize=20)\nax.set_ylim([0,0.2])\nax.set_ylabel('P(Wage > 250)', fontsize=20);\n\nWe have drawn the age values corresponding to the observations with wage values above 250 as gray marks on the top of the plot, and those with wage values below 250 are shown as gray marks on the bottom of the plot. We added a small amount of noise to jitter the age values a bit so that observations with the same age value do not cover each other up. This type of plot is often called a rug plot.\nIn order to fit a step function, as discussed in Section 7.2, we first use the pd.qcut() function to discretize age based on quantiles. Then we use pd.get_dummies() to create the columns of the model matrix for this categorical variable. Note that this function will include all columns for a given categorical, rather than the usual approach which drops one of the levels.\n\ncut_age = pd.qcut(age, 4)\nsummarize(sm.OLS(y, pd.get_dummies(cut_age)).fit())\n\nHere pd.qcut() automatically picked the cutpoints based on the quantiles 25%, 50% and 75%, which results in four regions. We could also have specified our own quantiles directly instead of the argument 4. For cuts not based on quantiles we would use the pd.cut() function. The function pd.qcut() (and pd.cut()) returns an ordered categorical variable. The regression model then creates a set of dummy variables for use in the regression. Since age is the only variable in the model, the value $94,158.40 is the average salary for those under 33.75 years of age, and the other coefficients are the average salary for those in the other age groups. We can produce predictions and plots just as we did in the case of the polynomial fit."
  },
  {
    "objectID": "python-notebooks/Ch7-nonlin-lab.html#splines",
    "href": "python-notebooks/Ch7-nonlin-lab.html#splines",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Splines",
    "text": "Splines\nIn order to fit regression splines, we use transforms from the ISLP package. The actual spline evaluation functions are in the scipy.interpolate package; we have simply wrapped them as transforms similar to Poly() and PCA().\nIn Section 7.4, we saw that regression splines can be fit by constructing an appropriate matrix of basis functions. The BSpline() function generates the entire matrix of basis functions for splines with the specified set of knots. By default, the B-splines produced are cubic. To change the degree, use the argument degree.\n\nbs_ = BSpline(internal_knots=[25,40,60], intercept=True).fit(age)\nbs_age = bs_.transform(age)\nbs_age.shape\n\nThis results in a seven-column matrix, which is what is expected for a cubic-spline basis with 3 interior knots. We can form this same matrix using the bs() object, which facilitates adding this to a model-matrix builder (as in poly() versus its workhorse Poly()) described in Section 7.8.1.\nWe now fit a cubic spline model to the Wage data.\n\nbs_age = MS([bs('age', internal_knots=[25,40,60])])\nXbs = bs_age.fit_transform(Wage)\nM = sm.OLS(y, Xbs).fit()\nsummarize(M)\n\nThe column names are a little cumbersome, and have caused us to truncate the printed summary. They can be set on construction using the name argument as follows.\n\nbs_age = MS([bs('age',\n                internal_knots=[25,40,60],\n                name='bs(age)')])\nXbs = bs_age.fit_transform(Wage)\nM = sm.OLS(y, Xbs).fit()\nsummarize(M)\n\nNotice that there are 6 spline coefficients rather than 7. This is because, by default, bs() assumes intercept=False, since we typically have an overall intercept in the model. So it generates the spline basis with the given knots, and then discards one of the basis functions to account for the intercept.\nWe could also use the df (degrees of freedom) option to specify the complexity of the spline. We see above that with 3 knots, the spline basis has 6 columns or degrees of freedom. When we specify df=6 rather than the actual knots, bs() will produce a spline with 3 knots chosen at uniform quantiles of the training data. We can see these chosen knots most easily using Bspline() directly:\n\nBSpline(df=6).fit(age).internal_knots_\n\nWhen asking for six degrees of freedom, the transform chooses knots at ages 33.75, 42.0, and 51.0, which correspond to the 25th, 50th, and 75th percentiles of age.\nWhen using B-splines we need not limit ourselves to cubic polynomials (i.e. degree=3). For instance, using degree=0 results in piecewise constant functions, as in our example with pd.qcut() above.\n\nbs_age0 = MS([bs('age',\n                 df=3, \n                 degree=0)]).fit(Wage)\nXbs0 = bs_age0.transform(Wage)\nsummarize(sm.OLS(y, Xbs0).fit())\n\nThis fit should be compared with cell [15] where we use qcut() to create four bins by cutting at the 25%, 50% and 75% quantiles of age. Since we specified df=3 for degree-zero splines here, there will also be knots at the same three quantiles. Although the coefficients appear different, we see that this is a result of the different coding. For example, the first coefficient is identical in both cases, and is the mean response in the first bin. For the second coefficient, we have \\(94.158 + 22.349 = 116.507 \\approx 116.611\\), the latter being the mean in the second bin in cell [15]. Here the intercept is coded by a column of ones, so the second, third and fourth coefficients are increments for those bins. Why is the sum not exactly the same? It turns out that the qcut() uses \\(\\leq\\), while bs() uses \\(<\\) when deciding bin membership.\nIn order to fit a natural spline, we use the NaturalSpline() transform with the corresponding helper ns(). Here we fit a natural spline with five degrees of freedom (excluding the intercept) and plot the results.\n\nns_age = MS([ns('age', df=5)]).fit(Wage)\nM_ns = sm.OLS(y, ns_age.transform(Wage)).fit()\nsummarize(M_ns)\n\nWe now plot the natural spline using our plotting function.\n\nplot_wage_fit(age_df,\n              ns_age,\n              'Natural spline, df=5');"
  },
  {
    "objectID": "python-notebooks/Ch7-nonlin-lab.html#smoothing-splines-and-gams",
    "href": "python-notebooks/Ch7-nonlin-lab.html#smoothing-splines-and-gams",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Smoothing Splines and GAMs",
    "text": "Smoothing Splines and GAMs\nA smoothing spline is a special case of a GAM with squared-error loss and a single feature. To fit GAMs in Python we will use the pygam package which can be installed via pip install pygam. The estimator LinearGAM() uses squared-error loss. The GAM is specified by associating each column of a model matrix with a particular smoothing operation: s for smoothing spline; l for linear, and f for factor or categorical variables. The argument 0 passed to s below indicates that this smoother will apply to the first column of a feature matrix. Below, we pass it a matrix with a single column: X_age. The argument lam is the penalty parameter \\(\\lambda\\) as discussed in Section 7.5.2.\n\nX_age = np.asarray(age).reshape((-1,1))\ngam = LinearGAM(s_gam(0, lam=0.6))\ngam.fit(X_age, y)\n\nThe pygam library generally expects a matrix of features so we reshape age to be a matrix (a two-dimensional array) instead of a vector (i.e. a one-dimensional array). The -1 in the call to the reshape() method tells numpy to impute the size of that dimension based on the remaining entries of the shape tuple.\nLet’s investigate how the fit changes with the smoothing parameter lam. The function np.logspace() is similar to np.linspace() but spaces points evenly on the log-scale. Below we vary lam from \\(10^{-2}\\) to \\(10^6\\).\n\nfig, ax = subplots(figsize=(8,8))\nax.scatter(age, y, facecolor='gray', alpha=0.5)\nfor lam in np.logspace(-2, 6, 5):\n    gam = LinearGAM(s_gam(0, lam=lam)).fit(X_age, y)\n    ax.plot(age_grid,\n            gam.predict(age_grid),\n            label='{:.1e}'.format(lam),\n            linewidth=3)\nax.set_xlabel('Age', fontsize=20)\nax.set_ylabel('Wage', fontsize=20);\nax.legend(title='$\\lambda$');\n\nThe pygam package can perform a search for an optimal smoothing parameter.\n\ngam_opt = gam.gridsearch(X_age, y)\nax.plot(age_grid,\n        gam_opt.predict(age_grid),\n        label='Grid search',\n        linewidth=4)\nax.legend()\nfig\n\nAlternatively, we can fix the degrees of freedom of the smoothing spline using a function included in the ISLP.pygam package. Below we find a value of \\(\\lambda\\) that gives us roughly four degrees of freedom. We note here that these degrees of freedom include the unpenalized intercept and linear term of the smoothing spline, hence there are at least two degrees of freedom.\n\nage_term = gam.terms[0]\nlam_4 = approx_lam(X_age, age_term, 4)\nage_term.lam = lam_4\ndegrees_of_freedom(X_age, age_term)\n\nLet’s vary the degrees of freedom in a similar plot to above. We choose the degrees of freedom as the desired degrees of freedom plus one to account for the fact that these smoothing splines always have an intercept term. Hence, a value of one for df is just a linear fit.\n\nfig, ax = subplots(figsize=(8,8))\nax.scatter(X_age,\n           y,\n           facecolor='gray',\n           alpha=0.3)\nfor df in [1,3,4,8,15]:\n    lam = approx_lam(X_age, age_term, df+1)\n    age_term.lam = lam\n    gam.fit(X_age, y)\n    ax.plot(age_grid,\n            gam.predict(age_grid),\n            label='{:d}'.format(df),\n            linewidth=4)\nax.set_xlabel('Age', fontsize=20)\nax.set_ylabel('Wage', fontsize=20);\nax.legend(title='Degrees of freedom');\n\n\nAdditive Models with Several Terms\nThe strength of generalized additive models lies in their ability to fit multivariate regression models with more flexibility than linear models. We demonstrate two approaches: the first in a more manual fashion using natural splines and piecewise constant functions, and the second using the pygam package and smoothing splines.\nWe now fit a GAM by hand to predict wage using natural spline functions of year and age, treating education as a qualitative predictor, as in (7.16). Since this is just a big linear regression model using an appropriate choice of basis functions, we can simply do this using the sm.OLS() function.\nWe will build the model matrix in a more manual fashion here, since we wish to access the pieces separately when constructing partial dependence plots.\n\nns_age = NaturalSpline(df=4).fit(age)\nns_year = NaturalSpline(df=5).fit(Wage['year'])\nXs = [ns_age.transform(age),\n      ns_year.transform(Wage['year']),\n      pd.get_dummies(Wage['education']).values]\nX_bh = np.hstack(Xs)\ngam_bh = sm.OLS(y, X_bh).fit()\n\nHere the function NaturalSpline() is the workhorse supporting the ns() helper function. We chose to use all columns of the indicator matrix for the categorical variable education, making an intercept redundant. Finally, we stacked the three component matrices horizontally to form the model matrix X_bh.\nWe now show how to construct partial dependence plots for each of the terms in our rudimentary GAM. We can do this by hand, given grids for age and year. We simply predict with new \\(X\\) matrices, fixing all but one of the features at a time.\n\nage_grid = np.linspace(age.min(),\n                       age.max(),\n                       100)\nX_age_bh = X_bh.copy()[:100]\nX_age_bh[:] = X_bh[:].mean(0)[None,:]\nX_age_bh[:,:4] = ns_age.transform(age_grid)\npreds = gam_bh.get_prediction(X_age_bh)\nbounds_age = preds.conf_int(alpha=0.05)\npartial_age = preds.predicted_mean\ncenter = partial_age.mean()\npartial_age -= center\nbounds_age -= center\nfig, ax = subplots(figsize=(8,8))\nax.plot(age_grid, partial_age, 'b', linewidth=3)\nax.plot(age_grid, bounds_age[:,0], 'r--', linewidth=3)\nax.plot(age_grid, bounds_age[:,1], 'r--', linewidth=3)\nax.set_xlabel('Age')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of age on wage', fontsize=20);\n\nLet’s explain in some detail what we did above. The idea is to create a new prediction matrix, where all but the columns belonging to age are constant (and set to their training-data means). The four columns for age are filled in with the natural spline basis evaluated at the 100 values in age_grid.\n\nWe made a grid of length 100 in age, and created a matrix X_age_bh with 100 rows and the same number of columns as X_bh.\nWe replaced every row of this matrix with the column means of the original.\nWe then replace just the first four columns representing age with the natural spline basis computed at the values in age_grid.\n\nThe remaining steps should by now be familiar.\nWe also look at the effect of year on wage; the process is the same.\n\nyear_grid = np.linspace(2003, 2009, 100)\nyear_grid = np.linspace(Wage['year'].min(),\n                        Wage['year'].max(),\n                        100)\nX_year_bh = X_bh.copy()[:100]\nX_year_bh[:] = X_bh[:].mean(0)[None,:]\nX_year_bh[:,4:9] = ns_year.transform(year_grid)\npreds = gam_bh.get_prediction(X_year_bh)\nbounds_year = preds.conf_int(alpha=0.05)\npartial_year = preds.predicted_mean\ncenter = partial_year.mean()\npartial_year -= center\nbounds_year -= center\nfig, ax = subplots(figsize=(8,8))\nax.plot(year_grid, partial_year, 'b', linewidth=3)\nax.plot(year_grid, bounds_year[:,0], 'r--', linewidth=3)\nax.plot(year_grid, bounds_year[:,1], 'r--', linewidth=3)\nax.set_xlabel('Year')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of year on wage', fontsize=20);\n\nWe now fit the model (7.16) using smoothing splines rather than natural splines. All of the terms in (7.16) are fit simultaneously, taking each other into account to explain the response. The pygam package only works with matrices, so we must convert the categorical series education to its array representation, which can be found with the cat.codes attribute of education. As year only has 7 unique values, we use only seven basis functions for it.\n\ngam_full = LinearGAM(s_gam(0) +\n                     s_gam(1, n_splines=7) +\n                     f_gam(2, lam=0))\nXgam = np.column_stack([age,\n                        Wage['year'],\n                        Wage['education'].cat.codes])\ngam_full = gam_full.fit(Xgam, y)\n\nThe two s_gam() terms result in smoothing spline fits, and use a default value for \\(\\lambda\\) (lam=0.6), which is somewhat arbitrary. For the categorical term education, specified using a f_gam() term, we specify lam=0 to avoid any shrinkage. We produce the partial dependence plot in age to see the effect of these choices.\nThe values for the plot are generated by the pygam package. We provide a plot_gam() function for partial-dependence plots in ISLP.pygam, which makes this job easier than in our last example with natural splines.\n\nfig, ax = subplots(figsize=(8,8))\nplot_gam(gam_full, 0, ax=ax)\nax.set_xlabel('Age')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of age on wage - default lam=0.6', fontsize=20);\n\nWe see that the function is somewhat wiggly. It is more natural to specify the df than a value for lam. We refit a GAM using four degrees of freedom each for age and year. Recall that the addition of one below takes into account the intercept of the smoothing spline.\n\nage_term = gam_full.terms[0]\nage_term.lam = approx_lam(Xgam, age_term, df=4+1)\nyear_term = gam_full.terms[1]\nyear_term.lam = approx_lam(Xgam, year_term, df=4+1)\ngam_full = gam_full.fit(Xgam, y)\n\nNote that updating age_term.lam above updates it in gam_full.terms[0] as well! Likewise for year_term.lam.\nRepeating the plot for age, we see that it is much smoother. We also produce the plot for year.\n\nfig, ax = subplots(figsize=(8,8))\nplot_gam(gam_full,\n         1,\n         ax=ax)\nax.set_xlabel('Year')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of year on wage', fontsize=20)\n\nFinally we plot education, which is categorical. The partial dependence plot is different, and more suitable for the set of fitted constants for each level of this variable.\n\nfig, ax = subplots(figsize=(8, 8))\nax = plot_gam(gam_full, 2)\nax.set_xlabel('Education')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of wage on education',\n             fontsize=20);\nax.set_xticklabels(Wage['education'].cat.categories, fontsize=8);\n\n\n\nANOVA Tests for Additive Models\nIn all of our models, the function of year looks rather linear. We can perform a series of ANOVA tests in order to determine which of these three models is best: a GAM that excludes year (\\(\\mathcal{M}_1\\)), a GAM that uses a linear function of year (\\(\\mathcal{M}_2\\)), or a GAM that uses a spline function of year (\\(\\mathcal{M}_3\\)).\n\ngam_0 = LinearGAM(age_term + f_gam(2, lam=0))\ngam_0.fit(Xgam, y)\ngam_linear = LinearGAM(age_term +\n                       l_gam(1, lam=0) +\n                       f_gam(2, lam=0))\ngam_linear.fit(Xgam, y)\n\nNotice our use of age_term in the expressions above. We do this because earlier we set the value for lam in this term to achieve four degrees of freedom.\nTo directly assess the effect of year we run an ANOVA on the three models fit above.\n\nanova_gam(gam_0, gam_linear, gam_full)\n\nWe find that there is compelling evidence that a GAM with a linear function in year is better than a GAM that does not include year at all (\\(p\\)-value= 0.002). However, there is no evidence that a non-linear function of year is needed (\\(p\\)-value=0.435). In other words, based on the results of this ANOVA, \\(\\mathcal{M}_2\\) is preferred.\nWe can repeat the same process for age as well. We see there is very clear evidence that a non-linear term is required for age. \n\ngam_0 = LinearGAM(year_term +\n                  f_gam(2, lam=0))\ngam_linear = LinearGAM(l_gam(0, lam=0) +\n                       year_term +\n                       f_gam(2, lam=0))\ngam_0.fit(Xgam, y)\ngam_linear.fit(Xgam, y)\nanova_gam(gam_0, gam_linear, gam_full)\n\nThere is a (verbose) summary() method for the GAM fit.\n\ngam_full.summary()\n\nWe can make predictions from gam objects, just like from lm objects, using the predict() method for the class gam. Here we make predictions on the training set.\n\nYhat = gam_full.predict(Xgam)\n\nIn order to fit a logistic regression GAM, we use LogisticGAM() from pygam.\n\ngam_logit = LogisticGAM(age_term + \n                        l_gam(1, lam=0) +\n                        f_gam(2, lam=0))\ngam_logit.fit(Xgam, high_earn)\n\n\nfig, ax = subplots(figsize=(8, 8))\nax = plot_gam(gam_logit, 2)\nax.set_xlabel('Education')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of wage on education',\n             fontsize=20);\nax.set_xticklabels(Wage['education'].cat.categories, fontsize=8);\n\nThe model seems to be very flat, with especially high error bars for the first category. Let’s look at the data a bit more closely.\n\npd.crosstab(Wage['high_earn'], Wage['education'])\n\nWe see that there are no high earners in the first category of education, meaning that the model will have a hard time fitting. We will fit a logistic regression GAM excluding all observations falling into this category. This provides more sensible results.\nTo do so, we could subset the model matrix, though this will not remove the column from Xgam. While we can deduce which column corresponds to this feature, for reproducibility’s sake we reform the model matrix on this smaller subset.\n\nonly_hs = Wage['education'] == '1. < HS Grad'\nWage_ = Wage.loc[~only_hs]\nXgam_ = np.column_stack([Wage_['age'],\n                         Wage_['year'],\n                         Wage_['education'].cat.codes-1])\nhigh_earn_ = Wage_['high_earn']\n\nIn the second-to-last line above, we subtract one from the codes of the category, due to a bug in pygam. It just relabels the education values and hence has no effect on the fit.\nWe now fit the model.\n\ngam_logit_ = LogisticGAM(age_term +\n                         year_term +\n                         f_gam(2, lam=0))\ngam_logit_.fit(Xgam_, high_earn_)\n\nLet’s look at the effect of education, year and age on high earner status now that we’ve removed those observations.\n\nfig, ax = subplots(figsize=(8, 8))\nax = plot_gam(gam_logit_, 2)\nax.set_xlabel('Education')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of high earner status on education', fontsize=20);\nax.set_xticklabels(Wage['education'].cat.categories[1:],\n                   fontsize=8);\n\n\nfig, ax = subplots(figsize=(8, 8))\nax = plot_gam(gam_logit_, 1)\nax.set_xlabel('Year')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of high earner status on year',\n             fontsize=20);\n\n\nfig, ax = subplots(figsize=(8, 8))\nax = plot_gam(gam_logit_, 0)\nax.set_xlabel('Age')\nax.set_ylabel('Effect on wage')\nax.set_title('Partial dependence of high earner status on age', fontsize=20);"
  },
  {
    "objectID": "python-notebooks/Ch7-nonlin-lab.html#local-regression",
    "href": "python-notebooks/Ch7-nonlin-lab.html#local-regression",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Local Regression",
    "text": "Local Regression\nWe illustrate the use of local regression using the lowess() function from sm.nonparametric. Some implementations of GAMs allow terms to be local regression operators; this is not the case in pygam.\nHere we fit local linear regression models using spans of 0.2 and 0.5; that is, each neighborhood consists of 20% or 50% of the observations. As expected, using a span of 0.5 is smoother than 0.2.\n\nlowess = sm.nonparametric.lowess\nfig, ax = subplots(figsize=(8,8))\nax.scatter(age, y, facecolor='gray', alpha=0.5)\nfor span in [0.2, 0.5]:\n    fitted = lowess(y,\n                    age,\n                    frac=span,\n                    xvals=age_grid)\n    ax.plot(age_grid,\n            fitted,\n            label='{:.1f}'.format(span),\n            linewidth=4)\nax.set_xlabel('Age', fontsize=20)\nax.set_ylabel('Wage', fontsize=20);\nax.legend(title='span', fontsize=15);"
  },
  {
    "objectID": "python-notebooks/Ch8-baggboost-lab.html#fitting-classification-trees",
    "href": "python-notebooks/Ch8-baggboost-lab.html#fitting-classification-trees",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Fitting Classification Trees",
    "text": "Fitting Classification Trees\nWe first use classification trees to analyze the Carseats data set. In these data, Sales is a continuous variable, and so we begin by recoding it as a binary variable. We use the where() function to create a variable, called High, which takes on a value of Yes if the Sales variable exceeds 8, and takes on a value of No otherwise.\n\nCarseats = load_data('Carseats')\nHigh = np.where(Carseats.Sales > 8,\n                \"Yes\",\n                \"No\")\n\nWe now use DecisionTreeClassifier() to fit a classification tree in order to predict High using all variables but Sales. To do so, we must form a model matrix as we did when fitting regression models.\n\nmodel = MS(Carseats.columns.drop('Sales'), intercept=False)\nD = model.fit_transform(Carseats)\nfeature_names = list(D.columns)\nX = np.asarray(D)\n\nWe have converted D from a data frame to an array X, which is needed in some of the analysis below. We also need the feature_names for annotating our plots later.\nThere are several options needed to specify the classifier, such as max_depth (how deep to grow the tree), min_samples_split (minimum number of observations in a node to be eligible for splitting) and criterion (whether to use Gini or cross-entropy as the split criterion). We also set random_state for reproducibility; ties in the split criterion are broken at random.\n\nclf = DTC(criterion='entropy',\n          max_depth=3,\n          random_state=0)        \nclf.fit(X, High)\n\nIn our discussion of qualitative features in Section 3.3, we noted that for a linear regression model such a feature could be represented by including a matrix of dummy variables (one-hot-encoding) in the model matrix, using the formula notation of statsmodels. As mentioned in Section 8.1, there is a more natural way to handle qualitative features when building a decision tree, that does not require such dummy variables; each split amounts to partitioning the levels into two groups. However, the sklearn implementation of decision trees does not take advantage of this approach; instead it simply treats the one-hot-encoded levels as separate variables.\n\naccuracy_score(High, clf.predict(X))\n\nWith only the default arguments, the training error rate is 21%. For classification trees, we can access the value of the deviance using log_loss(), \\[\\begin{equation*}\n\\begin{split}\n-2 \\sum_m \\sum_k n_{mk} \\log \\hat{p}_{mk},\n\\end{split}\n\\end{equation*}\\] where \\(n_{mk}\\) is the number of observations in the \\(m\\)th terminal node that belong to the \\(k\\)th class.\n\nresid_dev = np.sum(log_loss(High, clf.predict_proba(X)))\nresid_dev\n\nThis is closely related to the entropy, defined in (8.7). A small deviance indicates a tree that provides a good fit to the (training) data.\nOne of the most attractive properties of trees is that they can be graphically displayed. Here we use the plot() function to display the tree structure.\n\nax = subplots(figsize=(12,12))[1]\nplot_tree(clf,\n          feature_names=feature_names,\n          ax=ax);\n\nThe most important indicator of Sales appears to be ShelveLoc.\nWe can see a text representation of the tree using export_text(), which displays the split criterion (e.g. Price <= 92.5) for each branch. For leaf nodes it shows the overall prediction\n(Yes or No). We can also see the number of observations in that leaf that take on values of Yes and No by specifying show_weights=True.\n\nprint(export_text(clf,\n                  feature_names=feature_names,\n                  show_weights=True))\n\nIn order to properly evaluate the performance of a classification tree on these data, we must estimate the test error rather than simply computing the training error. We split the observations into a training set and a test set, build the tree using the training set, and evaluate its performance on the test data. This pattern is similar to that in Chapter 6, with the linear models replaced here by decision trees — the code for validation is almost identical. This approach leads to correct predictions for 68.5% of the locations in the test data set.\n\nvalidation = skm.ShuffleSplit(n_splits=1,\n                              test_size=200,\n                              random_state=0)\nresults = skm.cross_validate(clf,\n                             D,\n                             High,\n                             cv=validation)\nresults['test_score']\n\nNext, we consider whether pruning the tree might lead to improved classification performance. We first split the data into a training and test set. We will use cross-validation to prune the tree on the training set, and then evaluate the performance of the pruned tree on the test set.\n\n(X_train,\n X_test,\n High_train,\n High_test) = skm.train_test_split(X,\n                                   High,\n                                   test_size=0.5,\n                                   random_state=0)\n                                   \n\nWe first refit the full tree on the training set; here we do not set a max_depth parameter, since we will learn that through cross-validation.\n\nclf = DTC(criterion='entropy', random_state=0)\nclf.fit(X_train, High_train)\naccuracy_score(High_test, clf.predict(X_test))\n\nNext we use the cost_complexity_pruning_path() method of clf to extract cost-complexity values.\n\nccp_path = clf.cost_complexity_pruning_path(X_train, High_train)\nkfold = skm.KFold(10,\n                  random_state=1,\n                  shuffle=True)\n\nThis yields a set of impurities and \\(\\alpha\\) values from which we can extract an optimal one by cross-validation.\n\ngrid = skm.GridSearchCV(clf,\n                        {'ccp_alpha': ccp_path.ccp_alphas},\n                        refit=True,\n                        cv=kfold,\n                        scoring='accuracy')\ngrid.fit(X_train, High_train)\ngrid.best_score_\n\nLet’s take a look at the pruned true.\n\nax = subplots(figsize=(12, 12))[1]\nbest_ = grid.best_estimator_\nplot_tree(best_,\n          feature_names=feature_names,\n          ax=ax);\n\nThis is quite a bushy tree. We could count the leaves, or query best_ instead.\n\nbest_.tree_.n_leaves\n\nThe tree with 30 terminal nodes results in the lowest cross-validation error rate, with an accuracy of 68.5%. How well does this pruned tree perform on the test data set? Once again, we apply the predict() function.\n\nprint(accuracy_score(High_test,\n                     best_.predict(X_test)))\nconfusion = confusion_table(best_.predict(X_test),\n                            High_test)\nconfusion\n\nNow 72.0% of the test observations are correctly classified, which is slightly worse than the error for the full tree (with 35 leaves). So cross-validation has not helped us much here; it only pruned off 5 leaves, at a cost of a slightly worse error. These results would change if we were to change the random number seeds above; even though cross-validation gives an unbiased approach to model selection, it does have variance."
  },
  {
    "objectID": "python-notebooks/Ch8-baggboost-lab.html#fitting-regression-trees",
    "href": "python-notebooks/Ch8-baggboost-lab.html#fitting-regression-trees",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Fitting Regression Trees",
    "text": "Fitting Regression Trees\nHere we fit a regression tree to the Boston data set. The steps are similar to those for classification trees.\n\nBoston = load_data(\"Boston\")\nmodel = MS(Boston.columns.drop('medv'), intercept=False)\nD = model.fit_transform(Boston)\nfeature_names = list(D.columns)\nX = np.asarray(D)\n\nFirst, we split the data into training and test sets, and fit the tree to the training data. Here we use 30% of the data for the test set.\n\n(X_train,\n X_test,\n y_train,\n y_test) = skm.train_test_split(X,\n                                Boston['medv'],\n                                test_size=0.3,\n                                random_state=0)\n\nHaving formed our training and test data sets, we fit the regression tree.\n\nreg = DTR(max_depth=3)\nreg.fit(X_train, y_train)\nax = subplots(figsize=(12,12))[1]\nplot_tree(reg,\n          feature_names=feature_names,\n          ax=ax);\n\nThe variable lstat measures the percentage of individuals with lower socioeconomic status. The tree indicates that lower values of lstat correspond to more expensive houses. The tree predicts a median house price of $12,042 for small-sized homes (rm < 6.8), in suburbs in which residents have low socioeconomic status (lstat  > 14.4) and the crime-rate is moderate (crim > 5.8).\nNow we use the cross-validation function to see whether pruning the tree will improve performance.\n\nccp_path = reg.cost_complexity_pruning_path(X_train, y_train)\nkfold = skm.KFold(5,\n                  shuffle=True,\n                  random_state=10)\ngrid = skm.GridSearchCV(reg,\n                        {'ccp_alpha': ccp_path.ccp_alphas},\n                        refit=True,\n                        cv=kfold,\n                        scoring='neg_mean_squared_error')\nG = grid.fit(X_train, y_train)\n\nIn keeping with the cross-validation results, we use the pruned tree to make predictions on the test set.\n\nbest_ = grid.best_estimator_\nnp.mean((y_test - best_.predict(X_test))**2)\n\nIn other words, the test set MSE associated with the regression tree is 28.07. The square root of the MSE is therefore around 5.30, indicating that this model leads to test predictions that are within around $5300 of the true median home value for the suburb.\nLet’s plot the best tree to see how interpretable it is.\n\nax = subplots(figsize=(12,12))[1]\nplot_tree(G.best_estimator_,\n          feature_names=feature_names,\n          ax=ax);"
  },
  {
    "objectID": "python-notebooks/Ch8-baggboost-lab.html#bagging-and-random-forests",
    "href": "python-notebooks/Ch8-baggboost-lab.html#bagging-and-random-forests",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Bagging and Random Forests",
    "text": "Bagging and Random Forests\nHere we apply bagging and random forests to the Boston data, using the RandomForestRegressor() from the sklearn.ensemble package. Recall that bagging is simply a special case of a random forest with \\(m=p\\). Therefore, the RandomForestRegressor() function can be used to perform both bagging and random forests. We start with bagging.\n\nbag_boston = RF(max_features=X_train.shape[1], random_state=0)\nbag_boston.fit(X_train, y_train)\n\nThe argument max_features indicates that all 12 predictors should be considered for each split of the tree — in other words, that bagging should be done. How well does this bagged model perform on the test set?\n\nax = subplots(figsize=(8,8))[1]\ny_hat_bag = bag_boston.predict(X_test)\nax.scatter(y_hat_bag, y_test)\nnp.mean((y_test - y_hat_bag)**2)\n\nThe test set MSE associated with the bagged regression tree is 14.63, about half that obtained using an optimally-pruned single tree. We could change the number of trees grown from the default of 100 by using the n_estimators argument:\n\nbag_boston = RF(max_features=X_train.shape[1],\n                n_estimators=500,\n                random_state=0).fit(X_train, y_train)\ny_hat_bag = bag_boston.predict(X_test)\nnp.mean((y_test - y_hat_bag)**2)\n\nThere is not much change. Bagging and random forests cannot overfit by increasing the number of trees, but can underfit if the number is too small.\nGrowing a random forest proceeds in exactly the same way, except that we use a smaller value of the max_features argument. By default, RandomForestRegressor() uses \\(p\\) variables when building a random forest of regression trees (i.e. it defaults to bagging), and RandomForestClassifier() uses \\(\\sqrt{p}\\) variables when building a random forest of classification trees. Here we use max_features=6.\n\nRF_boston = RF(max_features=6,\n               random_state=0).fit(X_train, y_train)\ny_hat_RF = RF_boston.predict(X_test)\nnp.mean((y_test - y_hat_RF)**2)\n\nThe test set MSE is 20.04; this indicates that random forests did somewhat worse than bagging in this case. Extracting the feature_importances_ values from the fitted model, we can view the importance of each variable.\n\nfeature_imp = pd.DataFrame(\n    {'importance':RF_boston.feature_importances_},\n    index=feature_names)\nfeature_imp.sort_values(by='importance', ascending=False)\n\nThis is a relative measure of the total decrease in node impurity that results from splits over that variable, averaged over all trees (this was plotted in Figure 8.9 for a model fit to the Heart data).\nThe results indicate that across all of the trees considered in the random forest, the wealth level of the community (lstat) and the house size (rm) are by far the two most important variables."
  },
  {
    "objectID": "python-notebooks/Ch8-baggboost-lab.html#boosting",
    "href": "python-notebooks/Ch8-baggboost-lab.html#boosting",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Boosting",
    "text": "Boosting\nHere we use GradientBoostingRegressor() from sklearn.ensemble to fit boosted regression trees to the Boston data set. For classification we would use GradientBoostingClassifier(). The argument n_estimators=5000 indicates that we want 5000 trees, and the option max_depth=3 limits the depth of each tree. The argument learning_rate is the \\(\\lambda\\) mentioned earlier in the description of boosting.\n\nboost_boston = GBR(n_estimators=5000,\n                   learning_rate=0.001,\n                   max_depth=3,\n                   random_state=0)\nboost_boston.fit(X_train, y_train)\n\nWe can see how the training error decreases with the train_score_ attribute. To get an idea of how the test error decreases we can use the staged_predict() method to get the predicted values along the path.\n\ntest_error = np.zeros_like(boost_boston.train_score_)\nfor idx, y_ in enumerate(boost_boston.staged_predict(X_test)):\n   test_error[idx] = np.mean((y_test - y_)**2)\n\nplot_idx = np.arange(boost_boston.train_score_.shape[0])\nax = subplots(figsize=(8,8))[1]\nax.plot(plot_idx,\n        boost_boston.train_score_,\n        'b',\n        label='Training')\nax.plot(plot_idx,\n        test_error,\n        'r',\n        label='Test')\nax.legend();\n\nWe now use the boosted model to predict medv on the test set:\n\ny_hat_boost = boost_boston.predict(X_test);\nnp.mean((y_test - y_hat_boost)**2)\n\nThe test MSE obtained is 14.48, similar to the test MSE for bagging. If we want to, we can perform boosting with a different value of the shrinkage parameter \\(\\lambda\\) in (8.10). The default value is 0.001, but this is easily modified. Here we take \\(\\lambda=0.2\\).\n\nboost_boston = GBR(n_estimators=5000,\n                   learning_rate=0.2,\n                   max_depth=3,\n                   random_state=0)\nboost_boston.fit(X_train,\n                 y_train)\ny_hat_boost = boost_boston.predict(X_test);\nnp.mean((y_test - y_hat_boost)**2)\n\nIn this case, using \\(\\lambda=0.2\\) leads to a almost the same test MSE as \\(\\lambda=0.001\\)."
  },
  {
    "objectID": "python-notebooks/Ch8-baggboost-lab.html#bayesian-additive-regression-trees",
    "href": "python-notebooks/Ch8-baggboost-lab.html#bayesian-additive-regression-trees",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Bayesian Additive Regression Trees",
    "text": "Bayesian Additive Regression Trees\nIn this section we demonstrate a Python implementation of BART found in the ISLP.bart package. We fit a model to the Boston housing data set. This BART() estimator is designed for quantitative outcome variables, though other implementations are available for fitting logistic and probit models to categorical outcomes.\n\nbart_boston = BART(random_state=0, burnin=5, ndraw=15)\nbart_boston.fit(X_train, y_train)\n\nOn this data set, with this split into test and training, we see that the test error of BART is similar to that of random forest.\n\nyhat_test = bart_boston.predict(X_test.astype(np.float32))\nnp.mean((y_test - yhat_test)**2)\n\nWe can check how many times each variable appeared in the collection of trees. This gives a summary similar to the variable importance plot for boosting and random forests.\n\nvar_inclusion = pd.Series(bart_boston.variable_inclusion_.mean(0),\n                               index=D.columns)\nvar_inclusion"
  },
  {
    "objectID": "python-notebooks/Ch9-svm-lab.html#support-vector-classifier",
    "href": "python-notebooks/Ch9-svm-lab.html#support-vector-classifier",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Support Vector Classifier",
    "text": "Support Vector Classifier\nWe now use the SupportVectorClassifier() function (abbreviated SVC()) from sklearn to fit the support vector classifier for a given value of the parameter C. The C argument allows us to specify the cost of a violation to the margin. When the cost argument is small, then the margins will be wide and many support vectors will be on the margin or will violate the margin. When the C argument is large, then the margins will be narrow and there will be few support vectors on the margin or violating the margin.\nHere we demonstrate the use of SVC() on a two-dimensional example, so that we can plot the resulting decision boundary. We begin by generating the observations, which belong to two classes, and checking whether the classes are linearly separable.\n\nrng = np.random.default_rng(1)\nX = rng.standard_normal((50, 2))\ny = np.array([-1]*25+[1]*25)\nX[y==1] += 1\nfig, ax = subplots(figsize=(8,8))\nax.scatter(X[:,0],\n           X[:,1],\n           c=y,\n           cmap=cm.coolwarm);\n\nThey are not. We now fit the classifier.\n\nsvm_linear = SVC(C=10, kernel='linear')\nsvm_linear.fit(X, y)\n\nThe support vector classifier with two features can be visualized by plotting values of its decision function. We have included a function for this in the ISLP package (inspired by a similar example in the sklearn docs).\n\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X,\n         y,\n         svm_linear,\n         ax=ax)\n\nThe decision boundary between the two classes is linear (because we used the argument kernel='linear'). The support vectors are marked with + and the remaining observations are plotted as circles.\nWhat if we instead used a smaller value of the cost parameter?\n\nsvm_linear_small = SVC(C=0.1, kernel='linear')\nsvm_linear_small.fit(X, y)\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X,\n         y,\n         svm_linear_small,\n         ax=ax)\n\nWith a smaller value of the cost parameter, we obtain a larger number of support vectors, because the margin is now wider. For linear kernels, we can extract the coefficients of the linear decision boundary as follows:\n\nsvm_linear.coef_\n\nSince the support vector machine is an estimator in sklearn, we can use the usual machinery to tune it.\n\nkfold = skm.KFold(5, \n                  random_state=0,\n                  shuffle=True)\ngrid = skm.GridSearchCV(svm_linear,\n                        {'C':[0.001,0.01,0.1,1,5,10,100]},\n                        refit=True,\n                        cv=kfold,\n                        scoring='accuracy')\ngrid.fit(X, y)\ngrid.best_params_\n\nWe can easily access the cross-validation errors for each of these models in grid.cv_results_. This prints out a lot of detail, so we extract the accuracy results only.\n\ngrid.cv_results_[('mean_test_score')]\n\nWe see that C=1 results in the highest cross-validation accuracy of 0.74, though the accuracy is the same for several values of C. The classifier grid.best_estimator_ can be used to predict the class label on a set of test observations. Let’s generate a test data set.\n\nX_test = rng.standard_normal((20, 2))\ny_test = np.array([-1]*10+[1]*10)\nX_test[y_test==1] += 1\n\nNow we predict the class labels of these test observations. Here we use the best model selected by cross-validation in order to make the predictions.\n\nbest_ = grid.best_estimator_\ny_test_hat = best_.predict(X_test)\nconfusion_table(y_test_hat, y_test)\n\nThus, with this value of C, 70% of the test observations are correctly classified. What if we had instead used C=0.001?\n\nsvm_ = SVC(C=0.001,\n           kernel='linear').fit(X, y)\ny_test_hat = svm_.predict(X_test)\nconfusion_table(y_test_hat, y_test)\n\nIn this case 60% of test observations are correctly classified.\nWe now consider a situation in which the two classes are linearly separable. Then we can find an optimal separating hyperplane using the SVC() estimator. We first further separate the two classes in our simulated data so that they are linearly separable:\n\nX[y==1] += 1.9;\nfig, ax = subplots(figsize=(8,8))\nax.scatter(X[:,0], X[:,1], c=y, cmap=cm.coolwarm);\n\nNow the observations are just barely linearly separable.\n\nsvm_ = SVC(C=1e5, kernel='linear').fit(X, y)\ny_hat = svm_.predict(X)\nconfusion_table(y_hat, y)\n\nWe fit the support vector classifier and plot the resulting hyperplane, using a very large value of C so that no observations are misclassified.\n\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X,\n         y,\n         svm_,\n         ax=ax)\n\nIndeed no training errors were made and only three support vectors were used. In fact, the large value of C also means that these three support points are on the margin, and define it. One may wonder how good the classifier could be on test data that depends on only three data points! We now try a smaller value of C.\n\nsvm_ = SVC(C=0.1, kernel='linear').fit(X, y)\ny_hat = svm_.predict(X)\nconfusion_table(y_hat, y)\n\nUsing C=0.1, we again do not misclassify any training observations, but we also obtain a much wider margin and make use of twelve support vectors. These jointly define the orientation of the decision boundary, and since there are more of them, it is more stable. It seems possible that this model will perform better on test data than the model with C=1e5 (and indeed, a simple experiment with a large test set would bear this out).\n\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X,\n         y,\n         svm_,\n         ax=ax)"
  },
  {
    "objectID": "python-notebooks/Ch9-svm-lab.html#support-vector-machine",
    "href": "python-notebooks/Ch9-svm-lab.html#support-vector-machine",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Support Vector Machine",
    "text": "Support Vector Machine\nIn order to fit an SVM using a non-linear kernel, we once again use the SVC() estimator. However, now we use a different value of the parameter kernel. To fit an SVM with a polynomial kernel we use kernel=\"poly\", and to fit an SVM with a radial kernel we use kernel=\"rbf\". In the former case we also use the degree argument to specify a degree for the polynomial kernel (this is \\(d\\) in (9.22)), and in the latter case we use gamma to specify a value of \\(\\gamma\\) for the radial basis kernel (9.24).\nWe first generate some data with a non-linear class boundary, as follows:\n\nX = rng.standard_normal((200, 2))\nX[:100] += 2\nX[100:150] -= 2\ny = np.array([1]*150+[2]*50)\n\nPlotting the data makes it clear that the class boundary is indeed non-linear.\n\nfig, ax = subplots(figsize=(8,8))\nax.scatter(X[:,0],\n           X[:,1],\n           c=y,\n           cmap=cm.coolwarm)\n\nThe data is randomly split into training and testing groups. We then fit the training data using the SVC() estimator with a radial kernel and \\(\\gamma=1\\):\n\n(X_train, \n X_test,\n y_train,\n y_test) = skm.train_test_split(X,\n                                y,\n                                test_size=0.5,\n                                random_state=0)\nsvm_rbf = SVC(kernel=\"rbf\", gamma=1, C=1)\nsvm_rbf.fit(X_train, y_train)\n\nThe plot shows that the resulting SVM has a decidedly non-linear boundary.\n\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X_train,\n         y_train,\n         svm_rbf,\n         ax=ax)\n\nWe can see from the figure that there are a fair number of training errors in this SVM fit. If we increase the value of C, we can reduce the number of training errors. However, this comes at the price of a more irregular decision boundary that seems to be at risk of overfitting the data.\n\nsvm_rbf = SVC(kernel=\"rbf\", gamma=1, C=1e5)\nsvm_rbf.fit(X_train, y_train)\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X_train,\n         y_train,\n         svm_rbf,\n         ax=ax)\n\nWe can perform cross-validation using skm.GridSearchCV() to select the best choice of \\(\\gamma\\) and C for an SVM with a radial kernel:\n\nkfold = skm.KFold(5, \n                  random_state=0,\n                  shuffle=True)\ngrid = skm.GridSearchCV(svm_rbf,\n                        {'C':[0.1,1,10,100,1000],\n                         'gamma':[0.5,1,2,3,4]},\n                        refit=True,\n                        cv=kfold,\n                        scoring='accuracy');\ngrid.fit(X_train, y_train)\ngrid.best_params_\n\nThe best choice of parameters under five-fold CV is achieved at C=1 and gamma=0.5, though several other values also achieve the same value.\n\nbest_svm = grid.best_estimator_\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X_train,\n         y_train,\n         best_svm,\n         ax=ax)\n\ny_hat_test = best_svm.predict(X_test)\nconfusion_table(y_hat_test, y_test)\n\nWith these parameters, 12% of test observations are misclassified by this SVM."
  },
  {
    "objectID": "python-notebooks/Ch9-svm-lab.html#roc-curves",
    "href": "python-notebooks/Ch9-svm-lab.html#roc-curves",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "ROC Curves",
    "text": "ROC Curves\nSVMs and support vector classifiers output class labels for each observation. However, it is also possible to obtain fitted values for each observation, which are the numerical scores used to obtain the class labels. For instance, in the case of a support vector classifier, the fitted value for an observation \\(X= (X_1, X_2, \\ldots, X_p)^T\\) takes the form \\(\\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 + \\hat{\\beta}_2 X_2 + \\ldots + \\hat{\\beta}_p X_p\\). For an SVM with a non-linear kernel, the equation that yields the fitted value is given in (9.23). The sign of the fitted value determines on which side of the decision boundary the observation lies. Therefore, the relationship between the fitted value and the class prediction for a given observation is simple: if the fitted value exceeds zero then the observation is assigned to one class, and if it is less than zero then it is assigned to the other. By changing this threshold from zero to some positive value, we skew the classifications in favor of one class versus the other. By considering a range of these thresholds, positive and negative, we produce the ingredients for a ROC plot. We can access these values by calling the decision_function() method of a fitted SVM estimator.\nThe function ROCCurveDisplay.from_estimator() (which we have abbreviated to roc_curve()) will produce a plot of a ROC curve. It takes a fitted estimator as its first argument, followed by a model matrix \\(X\\) and labels \\(y\\). The argument name is used in the legend, while color is used for the color of the line. Results are plotted on our axis object ax.\n\nfig, ax = subplots(figsize=(8,8))\nroc_curve(best_svm,\n          X_train,\n          y_train,\n          name='Training',\n          color='r',\n          ax=ax);\n\nIn this example, the SVM appears to provide accurate predictions. By increasing \\(\\gamma\\) we can produce a more flexible fit and generate further improvements in accuracy.\n\nsvm_flex = SVC(kernel=\"rbf\", \n              gamma=50,\n              C=1)\nsvm_flex.fit(X_train, y_train)\nfig, ax = subplots(figsize=(8,8))\nroc_curve(svm_flex,\n          X_train,\n          y_train,\n          name='Training $\\gamma=50$',\n          color='r',\n          ax=ax);\n\nHowever, these ROC curves are all on the training data. We are really more interested in the level of prediction accuracy on the test data. When we compute the ROC curves on the test data, the model with \\(\\gamma=0.5\\) appears to provide the most accurate results.\n\nroc_curve(svm_flex,\n          X_test,\n          y_test,\n          name='Test $\\gamma=50$',\n          color='b',\n          ax=ax)\nfig;\n\nLet’s look at our tuned SVM.\n\nfig, ax = subplots(figsize=(8,8))\nfor (X_, y_, c, name) in zip(\n     (X_train, X_test),\n     (y_train, y_test),\n     ('r', 'b'),\n     ('CV tuned on training',\n      'CV tuned on test')):\n    roc_curve(best_svm,\n              X_,\n              y_,\n              name=name,\n              ax=ax,\n              color=c)"
  },
  {
    "objectID": "python-notebooks/Ch9-svm-lab.html#svm-with-multiple-classes",
    "href": "python-notebooks/Ch9-svm-lab.html#svm-with-multiple-classes",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "SVM with Multiple Classes",
    "text": "SVM with Multiple Classes\nIf the response is a factor containing more than two levels, then the SVC() function will perform multi-class classification using either the one-versus-one approach (when decision_function_shape=='ovo') or one-versus-rest {One-versus-rest is also known as one-versus-all.} (when decision_function_shape=='ovr'). We explore that setting briefly here by generating a third class of observations.\n\nrng = np.random.default_rng(123)\nX = np.vstack([X, rng.standard_normal((50, 2))])\ny = np.hstack([y, [0]*50])\nX[y==0,1] += 2\nfig, ax = subplots(figsize=(8,8))\nax.scatter(X[:,0], X[:,1], c=y, cmap=cm.coolwarm);\n\nWe now fit an SVM to the data:\n\nsvm_rbf_3 = SVC(kernel=\"rbf\",\n                C=10,\n                gamma=1,\n                decision_function_shape='ovo');\nsvm_rbf_3.fit(X, y)\nfig, ax = subplots(figsize=(8,8))\nplot_svm(X,\n         y,\n         svm_rbf_3,\n         scatter_cmap=cm.tab10,\n         ax=ax)\n\nThe sklearn.svm library can also be used to perform support vector regression with a numerical response using the estimator SupportVectorRegression()."
  },
  {
    "objectID": "python-notebooks/Ch9-svm-lab.html#application-to-gene-expression-data",
    "href": "python-notebooks/Ch9-svm-lab.html#application-to-gene-expression-data",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Application to Gene Expression Data",
    "text": "Application to Gene Expression Data\nWe now examine the Khan data set, which consists of a number of tissue samples corresponding to four distinct types of small round blue cell tumors. For each tissue sample, gene expression measurements are available. The data set consists of training data, xtrain and ytrain, and testing data, xtest and ytest.\nWe examine the dimension of the data:\n\nKhan = load_data('Khan')\nKhan['xtrain'].shape, Khan['xtest'].shape\n\nThis data set consists of expression measurements for 2,308 genes. The training and test sets consist of 63 and 20 observations, respectively.\nWe will use a support vector approach to predict cancer subtype using gene expression measurements. In this data set, there is a very large number of features relative to the number of observations. This suggests that we should use a linear kernel, because the additional flexibility that will result from using a polynomial or radial kernel is unnecessary.\n\nkhan_linear = SVC(kernel='linear', C=10)\nkhan_linear.fit(Khan['xtrain'], Khan['ytrain'])\nconfusion_table(khan_linear.predict(Khan['xtrain']),\n                Khan['ytrain'])\n\nWe see that there are no training errors. In fact, this is not surprising, because the large number of variables relative to the number of observations implies that it is easy to find hyperplanes that fully separate the classes. We are more interested in the support vector classifier’s performance on the test observations.\n\nconfusion_table(khan_linear.predict(Khan['xtest']),\n                Khan['ytest'])\n\nWe see that using C=10 yields two test set errors on these data."
  }
]