[
  {
    "objectID": "lab04-classification.html",
    "href": "lab04-classification.html",
    "title": "Lab 04 Classification",
    "section": "",
    "text": "We will begin by examining some numerical and graphical summaries of the Smarket data, which is part of the {ISLR} library. This data set consists of percentage returns for the S&P 500 stock index over 1,250 days, from the beginning of 2001 until the end of 2005. For each date, the percentage returns is recorded for each of the five previous trading days, Lag1 through Lag5. Also recorded is Volume (the number of shares traded\non the previous day, in billions), Today (the percentage return on the date in question) and Direction (whether the market was Up or Down on this date).\n\nlibrary(ISLR)\nhead(Smarket)\n\n  Year   Lag1   Lag2   Lag3   Lag4   Lag5 Volume  Today Direction\n1 2001  0.381 -0.192 -2.624 -1.055  5.010 1.1913  0.959        Up\n2 2001  0.959  0.381 -0.192 -2.624 -1.055 1.2965  1.032        Up\n3 2001  1.032  0.959  0.381 -0.192 -2.624 1.4112 -0.623      Down\n4 2001 -0.623  1.032  0.959  0.381 -0.192 1.2760  0.614        Up\n5 2001  0.614 -0.623  1.032  0.959  0.381 1.2057  0.213        Up\n6 2001  0.213  0.614 -0.623  1.032  0.959 1.3491  1.392        Up\n\n\nThe cor() function produces a matrix that contains all of the pairwise correlations among the predictors in a data set. The ﬁrst command below gives an error message because the Direction variable is qualitative.\n\n# try this\n# cor(Smarket)\n\n\nError in cor(Smarket) : ‘x’ must be numeric\n\n\ncor(Smarket[,-9]) # 9th variable is \"Direction\"\n\n             Year         Lag1         Lag2         Lag3         Lag4\nYear   1.00000000  0.029699649  0.030596422  0.033194581  0.035688718\nLag1   0.02969965  1.000000000 -0.026294328 -0.010803402 -0.002985911\nLag2   0.03059642 -0.026294328  1.000000000 -0.025896670 -0.010853533\nLag3   0.03319458 -0.010803402 -0.025896670  1.000000000 -0.024051036\nLag4   0.03568872 -0.002985911 -0.010853533 -0.024051036  1.000000000\nLag5   0.02978799 -0.005674606 -0.003557949 -0.018808338 -0.027083641\nVolume 0.53900647  0.040909908 -0.043383215 -0.041823686 -0.048414246\nToday  0.03009523 -0.026155045 -0.010250033 -0.002447647 -0.006899527\n               Lag5      Volume        Today\nYear    0.029787995  0.53900647  0.030095229\nLag1   -0.005674606  0.04090991 -0.026155045\nLag2   -0.003557949 -0.04338321 -0.010250033\nLag3   -0.018808338 -0.04182369 -0.002447647\nLag4   -0.027083641 -0.04841425 -0.006899527\nLag5    1.000000000 -0.02200231 -0.034860083\nVolume -0.022002315  1.00000000  0.014591823\nToday  -0.034860083  0.01459182  1.000000000\n\n\nAs one might expect, the correlations between the lag variables and today’s returns are close to zero. In other words, there appears to be little correlation between today’s returns and previous days’ returns. The only substantial correlation is between Year and Volume. By plotting the data we see that Volume is increasing over time. In other words, the average number of shares traded daily increased from 2001 to 2005.\n\nattach(Smarket)\nplot(Volume,\n     pch = 16, col = \"goldenrod\", cex = 0.5) # pure vanity\n\n\n\n\n\n\n\nLogistic Regression is merely regression where the dependent variable is binary (up, down; yes, no; 0, 1; etc.).\nWe will ﬁt a logistic regression model in order to predict Direction using Lag1 through Lag5 and Volume. The glm() function ﬁts generalized linear models, a class of models that includes logistic regression, and allows us to model data that do not adhere to the Gaussian assumption. The syntax of the glm() function is similar to that of lm(), except that we must pass in the argument family=binomial in order to tell R to run a logistic regression rather than some other type of generalized linear model.\n\nglm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,\n               data = Smarket, \n               family = binomial )\nsummary(glm.fit)\n\n\nCall:\nglm(formula = Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + \n    Volume, family = binomial, data = Smarket)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-1.446  -1.203   1.065   1.145   1.326  \n\nCoefficients:\n             Estimate Std. Error z value Pr(>|z|)\n(Intercept) -0.126000   0.240736  -0.523    0.601\nLag1        -0.073074   0.050167  -1.457    0.145\nLag2        -0.042301   0.050086  -0.845    0.398\nLag3         0.011085   0.049939   0.222    0.824\nLag4         0.009359   0.049974   0.187    0.851\nLag5         0.010313   0.049511   0.208    0.835\nVolume       0.135441   0.158360   0.855    0.392\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1731.2  on 1249  degrees of freedom\nResidual deviance: 1727.6  on 1243  degrees of freedom\nAIC: 1741.6\n\nNumber of Fisher Scoring iterations: 3\n\n\nThe smallest p-value here is associated with Lag1. The negative coefficient for this predictor suggests that if the market had a positive return yesterday, then it is less likely to go up today. However, at a value of 0.15, the p-value is still relatively large, and so there is no clear evidence of a real association between Lag1 and Direction.\nWe use the coef() function in order to access just the coefficients for this fitted model. We can also use the summary() function to access particular aspects of the fitted model, such as the p-values for the coefficients.\n\ncoef(glm.fit) # just the coefficients\n\n (Intercept)         Lag1         Lag2         Lag3         Lag4         Lag5 \n-0.126000257 -0.073073746 -0.042301344  0.011085108  0.009358938  0.010313068 \n      Volume \n 0.135440659 \n\nsummary(glm.fit)$coef # part of the summary\n\n                Estimate Std. Error    z value  Pr(>|z|)\n(Intercept) -0.126000257 0.24073574 -0.5233966 0.6006983\nLag1        -0.073073746 0.05016739 -1.4565986 0.1452272\nLag2        -0.042301344 0.05008605 -0.8445733 0.3983491\nLag3         0.011085108 0.04993854  0.2219750 0.8243333\nLag4         0.009358938 0.04997413  0.1872757 0.8514445\nLag5         0.010313068 0.04951146  0.2082966 0.8349974\nVolume       0.135440659 0.15835970  0.8552723 0.3924004\n\nsummary(glm.fit)$coef[4] # just the 4th coefficient, Lag3\n\n[1] 0.01108511\n\n\n\n\n\nThe predict() function can be used to predict the probability that the market will go up, given values of the predictors. The type=\"response\" option tells R to output probabilities of the form \\(P(Y = 1|X)\\) (the probability that Y = the value of ‘1’, given some value of X), as opposed to other information such as the logit. If no data set is supplied to the predict() function, then the probabilities are computed for the training data that was used to ﬁt the logistic regression model. Here we can print the ﬁrst ten probabilities. We know that these values correspond to the probability of the market going up, rather than down, because the contrasts() function indicates that R has created a dummy variable with a 1 for Up.\n\nglm.probs <- predict(glm.fit, type = \"response\")\nglm.probs[1:10]\n\n        1         2         3         4         5         6         7         8 \n0.5070841 0.4814679 0.4811388 0.5152224 0.5107812 0.5069565 0.4926509 0.5092292 \n        9        10 \n0.5176135 0.4888378 \n\ncontrasts(Direction)\n\n     Up\nDown  0\nUp    1\n\n\nIn order to make a prediction as to whether the market will go up or down on a particular day, we can convert these predicted probabilities into class labels, Up or Down. The following two commands create a vector of class predictions based on whether the predicted probability of a market increase is greater than or less than 0.5.\n\nglm.pred <- rep(\"Down\", 1250) # make vector\nglm.pred[glm.probs > .5] <- \"Up\" # add Up values\n\n\n\n\nThe ﬁrst command creates a vector of 1,250 Down elements. The second line transforms to Up all of the elements for which the predicted probability of a market increase exceeds 0.5. Given these predictions, the table() function can be used to produce a confusion matrix in order to determine how many observations were correctly or incorrectly classiﬁed.\n\ntable(glm.pred, Direction) # confusion matrix\n\n        Direction\nglm.pred Down  Up\n    Down  145 141\n    Up    457 507\n\n(507+145)/1250 # proportion correct predictions out of 50/50 (like flipping a coin)\n\n[1] 0.5216\n\nmean(glm.pred == Direction) # fancier programmatic calculation\n\n[1] 0.5216\n\n\nThe diagonal elements of the confusion matrix indicate correct predictions, while the off-diagonals represent incorrect predictions. Hence our model correctly predicted that the market would go up on 507 days and that it would go down on 145 days, for a total of 507 + 145 = 652 correct predictions. The mean() function can be used to compute the fraction of days for which the prediction was correct. In this case, logistic regression correctly predicted the movement of the market 52.2% of the time.\nAt ﬁrst glance, it appears that the logistic regression model is working a little better than random guessing. However, this result is misleading because we trained and tested the model on the same set of 1,250 observations. In other words, \\(100-52.2 = 47.8\\)% is the training error rate. As we have seen previously, the training error rate is often overly optimistic because it tends to underestimate the test error rate. In order to better assess the accuracy of the logistic regression model in this setting, we can ﬁt the model using part of the data, and then examine how well it predicts the held out data. This will yield a more realistic error rate, in the sense that in practice we will be interested in our model’s performance not on the data that we used to ﬁt the model, but rather on days in the future for which the market’s movements are unknown.\nTo implement this strategy, we will ﬁrst create a vector corresponding to the observations from 2001 through 2004. We will then use this vector to create a “held out” data set of observations from 2005.\n\ntrain <- (Year < 2005)\nSmarket.2005 <- Smarket[!train, ]\ndim(Smarket.2005)\n\n[1] 252   9\n\nDirection.2005 <- Direction[!train]\n\n\n\n\nThe object train is a vector of 1,250 elements, corresponding to the observations in our data set. The elements of the vector that correspond to observations that occurred before 2005 are set to TRUE, whereas those that correspond to observations in 2005 are set to FALSE. The object train is a Boolean vector, since its elements are TRUE and FALSE. Boolean vectors can be used to obtain a subset of the rows or columns of a matrix. For instance, the command Smarket[train, ] would pick out a submatrix of the stock market data set, corresponding only to the dates before 2005, since those are the ones for which the elements of train are TRUE. The ! symbol can be used to reverse all of the elements of a Boolean vector.\nThat is, !train is a vector similar to train, except that the elements that are TRUE in train get swapped to FALSE in !train, and the elements that are FALSE in train get swapped to TRUE in !train. Therefore, Smarket[!train,] yields a submatrix of the stock market data containing only the observations for which train is FALSE. That is, the observations with dates in 2005. The output above indicates that there are 252 such observations.\n\n\n\nWe now ﬁt a logistic regression model using only the subset of the observations that correspond to dates before 2005, using the subset argument. We then obtain predicted probabilities of the stock market going up for each of the days in our test set. That is, for the days in 2005.\n\nglm.fit <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume,\n               data = Smarket, family = binomial, subset = train )\nglm.probs <- predict(glm.fit, Smarket.2005, type = \"response\")\n\nNotice that we have trained and tested our model on two completely separate data sets: training was performed using only the dates before 2005, and testing was performed using only the dates in 2005. This is the whole point.\nFinally, we compute the predictions for 2005 and compare them to the actual movements of the market over that time period.\n\nglm.pred <- rep(\"Down\", 252)\nglm.pred[glm.probs > .5] <- \"Up\"\ntable(glm.pred, Direction.2005)\n\n        Direction.2005\nglm.pred Down Up\n    Down   77 97\n    Up     34 44\n\nmean(glm.pred == Direction.2005)\n\n[1] 0.4801587\n\nmean(glm.pred != Direction.2005)\n\n[1] 0.5198413\n\n\nThe != notation means not equal to, and so the last command computes the test set error rate. The results are rather disappointing: the test error rate is 52%, which is worse than random guessing! Of course this result is not all that surprising, given that one would not generally expect to be able to use previous days’ returns to predict future market performance. (After all, if it were easy to do so economics would not be a field of study)"
  },
  {
    "objectID": "lab04-classification.html#fine-tuning-models",
    "href": "lab04-classification.html#fine-tuning-models",
    "title": "Lab 04 Classification",
    "section": "2 Fine tuning models",
    "text": "2 Fine tuning models\nWe recall that the logistic regression model had very underwhelming p-values associated with all of the predictors, and that the smallest p-value, though not very small, corresponded to Lag1. Perhaps by removing the variables that appear not to be helpful in predicting Direction, we can obtain a more eﬀective model. After all, using predictors that have no relationship with the response tends to cause a deterioration in the test error rate (since such predictors cause an increase in variance without a corresponding decrease in bias), and so removing such predictors may in turn yield an improvement. Below we will refit the logistic regression using just Lag1 and Lag2, which seemed to have the highest predictive power in the original logistic regression model.\n\nglm.fit <- glm (Direction ~ Lag1 + Lag2, data = Smarket, \n                  family = binomial, subset = train)\nglm.probs <- predict(glm.fit, Smarket.2005, type = \"response\")\nglm.pred <- rep (\"Down\" ,252)\nglm.pred[glm.probs > .5] = \"Up\"\ntable(glm.pred, Direction.2005)\n\n        Direction.2005\nglm.pred Down  Up\n    Down   35  35\n    Up     76 106\n\nmean(glm.pred == Direction.2005)\n\n[1] 0.5595238\n\n106/(106+76) \n\n[1] 0.5824176\n\n\nNow the results appear to be a little better: 56% of the daily movements have been correctly predicted. It is worth noting that in this case, a much simpler strategy of predicting that the market will increase every day will also be correct 56% of the time! Hence, in terms of overall error rate, the logistic regression method is no better than the naïve approach. However, the confusion matrix shows that on days when logistic regression predicts an increase in the market, it has a 58% accuracy rate. This suggests a possible trading strategy of buying on days when the model predicts an increasing market, and avoiding trades on days when a decrease is predicted. Of course one would need to investigate more carefully whether this small improvement was real or just due to random chance.\n\nMore predict()\nSuppose that we want to predict the returns associated with particular values of Lag1 and Lag2. In particular, we want to predict Direction on a day when Lag1 and Lag2 equal 1.2 and 1.1, respectively, and on a day when they equal 1.5 and −0.8. We do this using the predict() function.\n\npredict(glm.fit, \n        newdata = data.frame(Lag1 = c(1.2, 1.5),\n                                      Lag2 =c(1.1, -0.8)), \n        type = \"response\")\n\n        1         2 \n0.4791462 0.4960939"
  },
  {
    "objectID": "lab04-classification.html#lda",
    "href": "lab04-classification.html#lda",
    "title": "Lab 04 Classification",
    "section": "3 LDA",
    "text": "3 LDA\n\nlda()\nWe use Linear Discriminant Analysis (LDA) to explore differences between data with two or more classes.\nNow we will perform LDA on the Smarket data. In R, we ﬁt a LDA model using the lda() function, which is part of the MASS library. Notice that the syntax for the lda() function is identical to that of lm(), and to that of glm() except for the absence of the family option. We ﬁt the model using only the observations before 2005.\n\nlibrary(MASS)\nlda.fit <- lda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\nlda.fit\n\nCall:\nlda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\n\nPrior probabilities of groups:\n    Down       Up \n0.491984 0.508016 \n\nGroup means:\n            Lag1        Lag2\nDown  0.04279022  0.03389409\nUp   -0.03954635 -0.03132544\n\nCoefficients of linear discriminants:\n            LD1\nLag1 -0.6420190\nLag2 -0.5135293\n\nplot(lda.fit)\n\n\n\n\nThe LDA output indicates that \\(\\hat\\pi_1 = 0.492\\) and \\(\\hat\\pi_2 = 0.508\\); in other words, 49.2% of the training observations correspond to days during which the market went down. It also provides the group means; these are the average of each predictor within each class, and are used by LDA as estimates of \\(μ_k\\). These suggest that there is a tendency for the previous 2 days’ returns to be negative on days when the market increases, and a tendency for the previous days’ returns to be positive on days when the market declines. The coefficients of linear discriminants output provides the linear combination of Lag1 and Lag2 that are used to form the LDA decision rule.\nIn other words, these are the multipliers of the elements of X = x in (4.19). If −0.642 × Lag1− 0.514 × Lag2 is large, then the LDA classiﬁer will predict a market increase, and if it is small, then the LDA classifier will predict a market decline. The plot() function produces plots of the linear discriminants, obtained by computing 0.642 X Lag1 - 0.514 Lag2 for each of the training observations.\nThe predict() function returns a list with three elements. The ﬁrst element, class, contains LDA’s predictions about the movement of the market. The second element, posterior, is a matrix whose kth column contains the posterior probability that the corresponding observation belongs to the kth class. Finally, x contains the linear discriminants, described earlier.\n\nlda.pred = predict(lda.fit, Smarket.2005)\nnames(lda.pred)\n\n[1] \"class\"     \"posterior\" \"x\"        \n\n\nthe LDA and logistic regression predictions are almost identical for this example.\n\nlda.class = lda.pred$class\ntable(lda.class, Direction.2005)\n\n         Direction.2005\nlda.class Down  Up\n     Down   35  35\n     Up     76 106\n\nmean(lda.class == Direction.2005)\n\n[1] 0.5595238\n\n\nApplying a 50% threshold to the posterior probabilities allows us to recreate the predictions contained in lda.pred$class.\n\nsum( lda.pred$posterior[, 1] >= .5)\n\n[1] 70\n\nsum( lda.pred$posterior[, 1] < .5)\n\n[1] 182\n\n\nNotice that the posterior probability output by the model corresponds to the probability that the market will decrease:\n\nlda.pred$posterior[1:20, 1]\n\n      999      1000      1001      1002      1003      1004      1005      1006 \n0.4901792 0.4792185 0.4668185 0.4740011 0.4927877 0.4938562 0.4951016 0.4872861 \n     1007      1008      1009      1010      1011      1012      1013      1014 \n0.4907013 0.4844026 0.4906963 0.5119988 0.4895152 0.4706761 0.4744593 0.4799583 \n     1015      1016      1017      1018 \n0.4935775 0.5030894 0.4978806 0.4886331 \n\nlda.class[1:20] \n\n [1] Up   Up   Up   Up   Up   Up   Up   Up   Up   Up   Up   Down Up   Up   Up  \n[16] Up   Up   Down Up   Up  \nLevels: Down Up\n\n\nIf we wanted to use a posterior probability threshold other than 50% in order to make predictions, then we could easily do so. For instance, suppose that we wish to predict a market decrease only if we are very certain that the market will indeed decrease on that day. Say, if the posterior probability is at least 90%.\n\nsum(lda.pred$posterior[ , 1] > .9)\n\n[1] 0\n\n\nNo days in 2005 meet that threshold! In fact, the greatest posterior probability of decrease in all of 2005 was 52.02%."
  },
  {
    "objectID": "lab04-classification.html#qda",
    "href": "lab04-classification.html#qda",
    "title": "Lab 04 Classification",
    "section": "4 QDA",
    "text": "4 QDA\n\nqda() Quadratic Discriminant Analysis\nWe will now ﬁt a QDA model to the Smarket data. QDA is implemented in R using the qda() function, which is also part of the {MASS} library. The syntax is identical to that of lda().\n\nqda.fit <- qda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\nqda.fit\n\nCall:\nqda(Direction ~ Lag1 + Lag2, data = Smarket, subset = train)\n\nPrior probabilities of groups:\n    Down       Up \n0.491984 0.508016 \n\nGroup means:\n            Lag1        Lag2\nDown  0.04279022  0.03389409\nUp   -0.03954635 -0.03132544\n\n\nThe output contains the group means. But it does not contain the coefﬁcients of the linear discriminants, because the QDA classiﬁer involves a quadratic, rather than a linear, function of the predictors. The predict() function works in exactly the same fashion as for LDA.\n\nqda.class <- predict(qda.fit, Smarket.2005)$class\ntable(qda.class, Direction.2005)\n\n         Direction.2005\nqda.class Down  Up\n     Down   30  20\n     Up     81 121\n\nmean(qda.class == Direction.2005)\n\n[1] 0.5992063\n\n\nInterestingly, the QDA predictions are accurate almost 60% of the time, even though the 2005 data was not used to ﬁt the model. This level of accuracy is quite impressive for stock market data, which is known to be quite hard to model accurately. This suggests that the quadratic form assumed by QDA may capture the true relationship more accurately than the linear forms assumed by LDA and logistic regression. However, it is recommended to evaluate any method’s performance on a larger test set before betting that this approach will consistently beat the market!"
  },
  {
    "objectID": "lab04-classification.html#k-nearest-neighbors",
    "href": "lab04-classification.html#k-nearest-neighbors",
    "title": "Lab 04 Classification",
    "section": "5 K-Nearest Neighbors",
    "text": "5 K-Nearest Neighbors\n\nknn()\nWe will now perform KNN using the knn() function, which is part of the {class} library. This function works rather differently from the other model-fitting functions that we have encountered thus far. Rather than a two-step approach in which we ﬁrst ﬁt the model and then we use the model to make predictions, knn() forms predictions using a single command. The function requires four inputs.\n\nA matrix containing the predictors associated with the training data, labeled train.X below.\nA matrix containing the predictors associated with the data for which we wish to make predictions, labeled test.X below.\nA vector containing the class labels for the training observations, labeled train.Direction below.\nA value for K, the number of nearest neighbors to be used by the classifier.\n\nWe will use the cbind() function, short for column bind, to bind the Lag1 and Lag2 variables together into two matrices, one for the training set and the other for the test set.\n\nlibrary( class)\ntrain.X <- cbind(Lag1, Lag2)[train, ]\ntest.X <- cbind(Lag1, Lag2)[!train, ]\ntrain.Direction <- Direction[train]\n\nNow the knn() function can be used to predict the market’s movement for the dates in 2005. We set a random seed before we apply knn() because if several observations are tied as nearest neighbors, then R will randomly break the tie. Therefore, a seed must be set in order to ensure reproducibility of results.\n\nset.seed(1)\nlibrary(class)\nknn.pred <- knn(train.X, test.X, train.Direction, k = 1)\ntable(knn.pred, Direction.2005)\n\n        Direction.2005\nknn.pred Down Up\n    Down   43 58\n    Up     68 83\n\n(83+43) /252\n\n[1] 0.5\n\n\nThe results using K = 1 are not very good, since only 50% of the observa- tions are correctly predicted. Of course, it may be that K = 1 results in an overly ﬂexible ﬁt to the data. Let’s repeat the analysis using a different K, K = 3.\n\nknn.pred <- knn(train.X, test.X, train.Direction, k = 3)\ntable(knn.pred, Direction.2005)\n\n        Direction.2005\nknn.pred Down Up\n    Down   48 54\n    Up     63 87\n\nmean (knn.pred == Direction.2005)\n\n[1] 0.5357143\n\n\nThe results have improved slightly. But increasing K further turns out to provide no further improvements. It appears that for this data, QDA provides the best results of the methods that we have examined so far.\n\n\nCaravan insurance data\nFinally, we will apply the KNN approach to the Caravan data set, which is part of the {ISLR} library. This data set includes 85 predictors that measure demographic characteristics for 5,822 individuals. The response variable is Purchase, which indicates whether or not a given individual purchases a caravan insurance policy. In this data set, only 6% of people purchased caravan insurance.\n\ndim(Caravan)\n\n[1] 5822   86\n\nattach(Caravan)\nsummary(Purchase) \n\n  No  Yes \n5474  348 \n\n348/5822 # % purchasing insurance\n\n[1] 0.05977327\n\n\nBecause the KNN classiﬁer predicts the class of a given test observation by identifying the observations that are nearest to it, the scale of the variables matters. Any variables that are on a large scale will have a much larger eﬀect on the distance between the observations, and hence on the KNN classiﬁer, than variables that are on a small scale. For instance, imagine a data set that contains two variables, salary and age (measured in dollars and years, respectively). As far as KNN is concerned, a difference of $1,000 in salary is enormous compared to a difference of 50 years in age. Consequently, salary will drive the KNN classification results, and age will have almost no effect. This is contrary to our intuition that a salary difference of $1,000 is quite small compared to an age difference of 50 years. Furthermore, the importance of scale to the KNN classiﬁer leads to another issue: if we measured salary in British Pounds, or if we measured age in minutes, then we’d get quite diﬀerent classification results from what we get if these two variables are measured in dollars and years.\n\n\nStandardizing data\nA good way to handle this problem is to standardize the data so that all variables are given a mean of zero and a standard deviation of one. Then all variables will be on a comparable scale. The scale() function does just this. In standardizing the data, we exclude column 86, because that is the qualitative Purchase variable.\n\nstandardized.X <- scale(Caravan [,-86])\nvar(Caravan[,1])\n\n[1] 165.0378\n\nvar(Caravan[,2])\n\n[1] 0.1647078\n\nvar(standardized.X[,1])\n\n[1] 1\n\nvar(standardized.X[,2])\n\n[1] 1\n\n\nNow every column of standardized.X has a standard deviation of one and a mean of zero.\nWe now split the observations into a test set, containing the ﬁrst 1,000 observations, and a training set, containing the remaining observations. We ﬁt a KNN model on the training data using K = 1, and evaluate its performance on the test data.\n\ntest <- 1:1000\ntrain.X <- standardized.X[-test, ]\ntest.X <- standardized.X[test, ]\ntrain.Y <- Purchase[-test]\ntest.Y <- Purchase[test]\n\nset.seed(1)\nknn.pred <- knn(train.X, test.X, train.Y, k = 1)\nmean(test.Y != knn.pred )\n\n[1] 0.118\n\nmean(test.Y != \"No\")\n\n[1] 0.059\n\n\nThe vector test is numeric, with values from 1 through 1,000. Typing standardized.X[test, ] yields the submatrix of the data containing the observations whose indices range from 1 to 1,000, whereas typing standardized.X[-test, ] yields the submatrix containing the observations whose indices do not range from 1 to 1,000. The KNN error rate on the 1,000 test observations is just under 12%. At ﬁrst glance, this may appear to be fairly good. However, since only 6% of customers purchased insurance, we could get the error rate down to 6% by always predicting No regardless of the values of the predictors!\nSuppose that there is some non-trivial cost to trying to sell insurance to a given individual. For instance, perhaps a salesperson must visit each potential customer. If the company tries to sell insurance to a random selection of customers, then the success rate will be only 6%, which may be far too low given the costs involved. Instead, the company would like to try to sell insurance only to customers who are likely to buy it. So the overall error rate is not of interest. Instead, the fraction of individuals that are correctly predicted to buy insurance is of interest.\nIt turns out that KNN with K = 1 does far better than random guessing among the customers that are predicted to buy insurance. Among 77 such customers, 9, or 11.7%, actually do purchase insurance. This is double the rate that one would obtain from random guessing.\n\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  873  50\n     Yes  68   9\n\n9/(68+9)\n\n[1] 0.1168831\n\n\n\n\nExploring KNN model tuning\nUsing K = 3 (implying there are 3 groupings of customers), the success rate increases to 19%, and with K = 5 (5 groups) the rate is 26.7%. This is over four times the rate that results from random guessing. It appears that KNN is ﬁnding some real patterns in a difficult data set!\n\nknn.pred <- knn(train.X, test.X, train.Y, k = 3)\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  920  54\n     Yes  21   5\n\n5/26\n\n[1] 0.1923077\n\nknn.pred <- knn(train.X, test.X, train.Y, k = 5)\ntable(knn.pred, test.Y)\n\n        test.Y\nknn.pred  No Yes\n     No  930  55\n     Yes  11   4\n\n4/15\n\n[1] 0.2666667\n\n\n\n\nCompare to logistic regression\nAs a comparison, we can also ﬁt a logistic regression model to the data. If we use 0.5 as the predicted probability cut-off for the classifier, then we have a problem: only seven of the test observations are predicted to purchase insurance. Even worse, we are wrong about all of these! However, we are not required to use a cut-off of 0.5. If we instead predict a purchase any time the predicted probability of purchase exceeds 0.25, we get much better results: we predict that 33 people will purchase insurance, and we are correct for about 33% of these people. This is over ﬁve times better than random guessing!\n\nglm.fit <- glm(Purchase ~ ., data = Caravan, family = binomial,\n               subset = -test)\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\nglm.probs <- predict(glm.fit, Caravan[test, ], type = \"response\")\nglm.pred <- rep(\"No\" , 1000)\nglm.pred [glm.probs > .5]= \"Yes\"\ntable(glm.pred, test.Y)\n\n        test.Y\nglm.pred  No Yes\n     No  934  59\n     Yes   7   0\n\nglm.pred <- rep(\"No\", 1000)\nglm.pred[glm.probs > .25] <- \"Yes\"\ntable(glm.pred, test.Y)\n\n        test.Y\nglm.pred  No Yes\n     No  919  48\n     Yes  22  11\n\n11/(22+11 )\n\n[1] 0.3333333"
  },
  {
    "objectID": "lab04-classification.html#xx-naive-bayes-consider-adding",
    "href": "lab04-classification.html#xx-naive-bayes-consider-adding",
    "title": "Lab 04 Classification",
    "section": "xx Naive Bayes (consider adding)",
    "text": "xx Naive Bayes (consider adding)"
  },
  {
    "objectID": "lab04-classification.html#exercises",
    "href": "lab04-classification.html#exercises",
    "title": "Lab 04 Classification",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nThe next few questions should be answered using the Weekly data set, which is part of the {ISLR2} package. (read about it in help())\n\n1.1\nProduce some numerical and graphical summaries of the Weekly data. Do there appear to be any patterns?\n\n\n1.2\nUse the full data set to perform a logistic regression with Direction as the response and the five lag variables plus Volume as predictors. Use the summary function to print the results. Do any of the predictors appear to be statistically significant? If so, which ones?\n\n\n1.3\nCompute the confusion matrix and overall fraction of correct predictions. Explain what the confusion matrix is telling you about the types of mistakes made by logistic regression.\n\n\n1.4\nNow fit the logistic regression model using a training data period from 1990 to 2008, with Lag2 as the only predictor. Compute the confusion matrix and the overall fraction of correct predictions for the held out data (that is, the data from 2009 and 2010).\n\n\n1.5\nRepeat 1.4 using LDA.\n\n\n1.6\nRepeat 1.4 using QDA.\n\n\n1.7\nRepeat 1.4 using KNN with K = 1.\n\n\n1.8\nRepeat 1.4 using naive Bayes.\n\n\n1.9\nWhich of these methods appears to provide the best results on this data?\n\n\n1.10\nExperiment with diﬀerent combinations of predictors, including possible transformations and interactions, for each of the methods. Report the variables, method, and associated confusion matrix that appears to provide the best results on the held out data. Note that you should also experiment with values for K in the KNN classifier."
  },
  {
    "objectID": "lab04-classification.html#resources",
    "href": "lab04-classification.html#resources",
    "title": "Lab 04 Classification",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab04-classification.html#harper-adams-data-science",
    "href": "lab04-classification.html#harper-adams-data-science",
    "title": "Lab 04 Classification",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab07-non-linear.html",
    "href": "lab07-non-linear.html",
    "title": "Lab 07 Non-linear models",
    "section": "",
    "text": "In this lab, we will analyze the Wage data set in the {ISLR2} package, in order to illustrate non-linear fitting procedures in R.\n\nlibrary(ISLR2)\nattach(Wage) \n\n\n\nWe now examine how a non-linear model can be produced. We first fit the model using the following command\n\nfit <- lm(wage ~ poly(age, 4), data = Wage )\ncoef(summary(fit))\n\n                Estimate Std. Error    t value     Pr(>|t|)\n(Intercept)    111.70361  0.7287409 153.283015 0.000000e+00\npoly(age, 4)1  447.06785 39.9147851  11.200558 1.484604e-28\npoly(age, 4)2 -478.31581 39.9147851 -11.983424 2.355831e-32\npoly(age, 4)3  125.52169 39.9147851   3.144742 1.678622e-03\npoly(age, 4)4  -77.91118 39.9147851  -1.951938 5.103865e-02\n\n\nThis syntax fits a linear model, using the lm() function, in order to predict wage using a fourth-degree polynomial in age: poly(age, 4). The poly() command allows us to avoid having to write out a long formula with powers of age. The function returns a matrix whose columns are a basis of orthogonal polynomials, which essentially means that each column is a linear combination of the variables age, age^2, age^3 and age^4.\nHowever, we can also use poly() to obtain age, age^2, age^3 and age^4 directly, if we prefer. We can do this by using the raw = TRUE argument to the poly() function. Later we see that while this does not affect the model in a meaningful way, it affects the coefficient estimates, but it does not affect the fitted values obtained.\n\nfit2 <- lm(wage ~ poly (age, 4, raw = T), data = Wage)\ncoef(summary(fit2))\n\n                            Estimate   Std. Error   t value     Pr(>|t|)\n(Intercept)            -1.841542e+02 6.004038e+01 -3.067172 0.0021802539\npoly(age, 4, raw = T)1  2.124552e+01 5.886748e+00  3.609042 0.0003123618\npoly(age, 4, raw = T)2 -5.638593e-01 2.061083e-01 -2.735743 0.0062606446\npoly(age, 4, raw = T)3  6.810688e-03 3.065931e-03  2.221409 0.0263977518\npoly(age, 4, raw = T)4 -3.203830e-05 1.641359e-05 -1.951938 0.0510386498\n\n\nThere are several other equivalent ways of fitting this model, which showcase the flexibility of the formula language in R. For example\n\n\n\n\nfit2a <- lm(wage ~ age + I(age^2) + I(age^3) + I(age^4), data = Wage )\ncoef(fit2a)\n\n  (Intercept)           age      I(age^2)      I(age^3)      I(age^4) \n-1.841542e+02  2.124552e+01 -5.638593e-01  6.810688e-03 -3.203830e-05 \n\n\nThis simply creates the polynomial basis functions on the fly, taking care to protect terms like age^2 via the wrapper function I() (remember the ^ symbol has a special meaning in formulas).\n\n\n\n\nfit2b <- lm(wage ~ cbind(age, age^2 , age^3 , age^4), data = Wage )\n\nThis does the same more compactly, using the cbind() function for building a matrix from a collection of vectors; any function call such as cbind() inside a formula also serves as a wrapper.\nWe now create a grid of values for age at which we want predictions, and then call the generic predict() function, specifying that we want standard errors as well.\n\nattach(Wage)\n\nThe following objects are masked from Wage (pos = 3):\n\n    age, education, health, health_ins, jobclass, logwage, maritl,\n    race, region, wage, year\n\nagelims <- range(age) \nage.grid <- seq(from = agelims[1] , to = agelims[2])\npreds <- predict(fit, newdata = list(age = age.grid ), se = TRUE)\n\n# make confidence intervals\nse.bands <- cbind (preds$fit + 2 * preds$se.fit , preds$fit - 2 * preds$se.fit)\n\nFinally, we plot the data and add the fit from the degree-4 polynomial.\n\npar(mfrow = c(1, 1) , mar = c(4.5, 4.5, 1, 1),\n    oma = c(0, 0, 4, 0))\n\n# we'll make the right hand plot below...\nplot(age, wage, xlim = agelims, cex = .5, col = \"darkgrey\")\n\ntitle(\"Degree-4 Polynomial\", outer = T)\nlines(age.grid, preds$fit, lwd = 2, col = \"blue\")\nmatlines(age.grid, se.bands, lwd = 1, col = \"blue\", lty = 3)\n\n\n\n\nHere the mar and oma arguments to par() allow us to control the margins of the plot, and the title() function creates a figure title that spans both subplots. We mentioned earlier that whether or not an orthogonal set of basis functions is produced in the poly() function will not aﬀect the model obtained in a meaningful way. What do we mean by this? The fitted values obtained in either case are identical:\n\npreds2 <- predict(fit2, newdata = list(age = age.grid ), se = TRUE )\nmax( abs(preds$fit - preds2$fit))\n\n[1] 7.81597e-11\n\n\n\n\n\nIn performing a polynomial regression we must decide on the degree of the polynomial to use. One way to do this is by using hypothesis tests. We now fit models ranging from linear to a degree-5 polynomial and seek to determine the simplest model which is sufficient to explain the relationship between wage and age. We use the anova() function, which performs an analysis of variance (ANOVA, using an F-test) in order to test the null hypothesis that a model M1 is suﬃcient to explain the data against the alternative hypothesis that a more complex model M2 is required. In order to use the anova() function, M1 and M2 must be nested models: the predictors in M1 must be a subset of the predictors in M2. In this case, we fit five different models and sequentially compare the simpler model to the more complex model.\n\nfit.1   <-  lm(wage ~   age, data   = Wage )    \nfit.2   <-  lm(wage ~   poly(age,   2), data    =   Wage )\nfit.3   <-  lm(wage ~   poly(age, 3),   data    =   Wage )\nfit.4   <-  lm(wage ~   poly(age, 4),   data    =   Wage )\nfit.5   <-  lm(wage ~   poly(age,   5), data    =   Wage )\n\n# Pr - p-val are mopdels different?\n# RSS lower unexplained error is better\nanova(fit.1, fit.2, fit.3, fit.4, fit.5)\n\nAnalysis of Variance Table\n\nModel 1: wage ~ age\nModel 2: wage ~ poly(age, 2)\nModel 3: wage ~ poly(age, 3)\nModel 4: wage ~ poly(age, 4)\nModel 5: wage ~ poly(age, 5)\n  Res.Df     RSS Df Sum of Sq        F    Pr(>F)    \n1   2998 5022216                                    \n2   2997 4793430  1    228786 143.5931 < 2.2e-16 ***\n3   2996 4777674  1     15756   9.8888  0.001679 ** \n4   2995 4771604  1      6070   3.8098  0.051046 .  \n5   2994 4770322  1      1283   0.8050  0.369682    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe p-value comparing the linear Model 1 to the quadratic Model 2 is essentially zero (<10−15), indicating that a linear fit is not suﬃcient. Similarly the p-value comparing the quadratic Model 2 to the cubic Model 3 is very low (0.0017), so the quadratic fit is also insufficient. The p-value comparing the cubic and degree-4 polynomials, Model 3 and Model 4, is approximately 5% while the degree-5 polynomial Model 5 seems unnecessary because its p-value is 0.37. Hence, either a cubic or a quartic polynomial appear to provide a reasonable fit to the data, but lower- or higher-order models are not justified.\n\n\n\nIn this case, instead of using the anova() function, we could have obtained these p-values more succinctly by exploiting the fact that poly() creates orthogonal polynomials.\n\ncoef(summary(fit.5))\n\n                Estimate Std. Error     t value     Pr(>|t|)\n(Intercept)    111.70361  0.7287647 153.2780243 0.000000e+00\npoly(age, 5)1  447.06785 39.9160847  11.2001930 1.491111e-28\npoly(age, 5)2 -478.31581 39.9160847 -11.9830341 2.367734e-32\npoly(age, 5)3  125.52169 39.9160847   3.1446392 1.679213e-03\npoly(age, 5)4  -77.91118 39.9160847  -1.9518743 5.104623e-02\npoly(age, 5)5  -35.81289 39.9160847  -0.8972045 3.696820e-01\n\n\nNotice that the p-values are the same, and in fact the square of the t-statistics are equal to the F-statistics from the anova() function; for example:\n\n(-11.983)^2\n\n[1] 143.5923\n\n\nHowever, the ANOVA method works whether or not we used orthogonal polynomials; it also works when we have other terms in the model as well. For example, we can use anova() to compare these three models:\n\nfit.1 <- lm(wage ~ education + age , data = Wage )\nfit.2 <- lm(wage ~ education + poly(age, 2), data = Wage )\nfit.3 <- lm(wage ~ education + poly(age, 3), data = Wage )\nanova(fit.1 , fit.2 , fit.3)\n\nAnalysis of Variance Table\n\nModel 1: wage ~ education + age\nModel 2: wage ~ education + poly(age, 2)\nModel 3: wage ~ education + poly(age, 3)\n  Res.Df     RSS Df Sum of Sq        F Pr(>F)    \n1   2994 3867992                                 \n2   2993 3725395  1    142597 114.6969 <2e-16 ***\n3   2992 3719809  1      5587   4.4936 0.0341 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nAs an alternative to using hypothesis tests and ANOVA, we could choose the polynomial degree using cross-validation.\n\n\n\nNext we consider the task of predicting whether an individual earns more than $250,000 per year. We proceed much as before, except that first we create the appropriate response vector, and then apply the glm() function using family = \"binomial\" in order to fit a polynomial logistic regression model.\n\nfit <- glm(I(wage > 250) ~ poly(age, 4) , data = Wage , family = binomial )\n\nNote that we again use the wrapper I() to create this binary response variable on the fly. The expression wage > 250 evaluates to a logical variable containing TRUEs and FALSEs, which glm() coerces to binary by setting the TRUEs to 1 and the FALSEs to 0.\n\n\n\nOnce again, we make predictions using the predict() function.\n\npreds <- predict(fit, newdata = list(age = age.grid ), se = T)\n\nHowever, calculating the confidence intervals is slightly more involved than in the linear regression case. The default prediction type for a glm() model is type = \"link\", which is what we use here. This means we get predictions for the logit, or log-odds: that is, we have fit a model of the form:\n\\(log\\frac{Pr(Y = 1|X) }{1 − Pr(Y = 1|X)} = X\\beta\\)\nand the predictions given are of the form \\(X\\hat\\beta\\). The standard errors given are also for \\(X\\hat\\beta\\). In order to obtain confidence intervals for \\(Pr(Y = 1 X)\\), we use the transformation\n\\(Pr(Y = 1|X)=\\frac{exp(X\\beta)}{1 + exp(X\\beta)}\\)\n\npfit <- exp (preds $ fit ) / (1 + exp (preds $ fit ))\nse.bands.logit <- cbind(preds$fit + 2 * preds$se.fit, preds$fit - 2 * preds$se.fit)\nse.bands <- exp(se.bands.logit) / (1 + exp(se.bands.logit))\n\nNote that we could have directly computed the probabilities by selecting the type = \"response\" option in the predict() function.\n\npreds <- predict(fit, newdata = list(age = age.grid ), type = \"response\", se = T)\n\nHowever, the corresponding confidence intervals would not have been sensible because we would end up with negative probabilities!\n\n\n\n\nplot(age , I(wage > 250), xlim = agelims, type = \"n\", ylim = c(0, .2) )\npoints(jitter (age), I((wage > 250) / 5), cex = .5, pch = \"|\", col = \"darkgrey \")\nlines (age.grid, pfit, lwd = 2, col = \"blue \")\nmatlines(age.grid, se.bands, lwd = 1 , col = \"blue \", lty = 3)\n\n\n\npar(mfrow=c(1,1))\n\n\n\n\nWe have drawn the age values corresponding to the observations with wage values above 250 as gray marks on the top of the plot, and those with wage values below 250 are shown as gray marks on the bottom of the plot. We used the jitter() function to jitter the age values a bit so that observations with the same age value do not cover each other up. This is often called a rug plot.\n\n\n\nIn order to fit a step function, we use the cut() function.\n\ntable(cut (age, 4))\n\n\n(17.9,33.5]   (33.5,49]   (49,64.5] (64.5,80.1] \n        750        1399         779          72 \n\nfit <- lm(wage ~ cut (age, 4), data = Wage )\ncoef(summary(fit))\n\n                        Estimate Std. Error   t value     Pr(>|t|)\n(Intercept)            94.158392   1.476069 63.789970 0.000000e+00\ncut(age, 4)(33.5,49]   24.053491   1.829431 13.148074 1.982315e-38\ncut(age, 4)(49,64.5]   23.664559   2.067958 11.443444 1.040750e-29\ncut(age, 4)(64.5,80.1]  7.640592   4.987424  1.531972 1.256350e-01\n\n\nHere cut() automatically picked the cutpoints at 33.5, 49, and 64.5 years of age. We could also have specified our own cutpoints directly using the breaks option. The function cut() returns an ordered categorical variable; the lm() function then creates a set of dummy variables for use in the re- gression. The age < 33.5 category is left out, so the intercept coefficient of $94,160 can be interpreted as the average salary for those under 33.5 years of age, and the other coeﬃcients can be interpreted as the average additional salary for those in the other age groups. We can produce predictions and plots just as we did in the case of the polynomial fit.\n\n\n\nIn order to fit regression splines in R, we use the {splines} library. Regression splines can be fit by constructing an appropriate matrix of basis functions. The bs() function generates the entire matrix of basis functions for splines with the specified set of knots. By default, cubic splines are produced. (see ch 7 James et al 2021)\n\n\n\nFitting wage to age using a regression spline is simple:\n\nlibrary(splines) \nfit <- lm(wage ~ bs(age, knots = c(25, 40, 60)), data = Wage )\npred <- predict(fit , newdata = list(age = age.grid), se = T)\nplot(age, wage, col = \"gray\")\nlines(age.grid, pred$fit , lwd = 2)\nlines(age.grid, pred$fit + 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred$fit - 2 * pred$se, lty = \"dashed\", col = 'blue')\n\n\n\n\n\n\n\nHere we have prespecified knots at ages 25, 40, and 60. This produces a spline with six basis functions. (Recall that a cubic spline with three knots has seven degrees of freedom; these degrees of freedom are used up by an intercept, plus six basis functions.) We could also use the df option to produce a spline with knots at uniform quantiles of the data.\n\ndim(bs(age, knots = c(25 , 40 , 60) ))\n\n[1] 3000    6\n\ndim(bs(age, df = 6))\n\n[1] 3000    6\n\nattr(bs(age, df = 6), \"knots\") \n\n  25%   50%   75% \n33.75 42.00 51.00 \n\n\nIn this case R chooses knots at ages 33.8, 42.0, and 51.0, which correspond to the 25th, 50th, and 75th percentiles of age. The function bs() also has a degree argument, so we can fit splines of any degree, rather than the default degree of 3 (which yields a cubic spline).\n\n\n\nIn order to instead fit a natural spline, we use the ns() function. Here we fit a natural spline with four degrees of freedom.\n\nfit2 <- lm(wage ~ ns(age, df = 4), data = Wage)\npred2 <- predict(fit2, newdata = list(age = age.grid ), se = T)\n\nplot(age, wage, col = \"gray\")\nlines(age.grid, pred$fit , lwd = 2)\nlines(age.grid, pred$fit + 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred$fit - 2 * pred$se, lty = \"dashed\", col = 'blue')\nlines(age.grid, pred2$fit, col = \"red\", lwd = 2)\n\n\n\n\nAs with the bs() function, we could instead specify the knots directly using the knots option.\n\n\n\nIn order to fit a smoothing spline, we use the smooth.spline() function.\n\nplot(age, wage, xlim = agelims, cex = .5, col = \"darkgrey\")\ntitle(\"Smoothing Spline\")\nfit <- smooth.spline(age, wage, df = 16)\nfit2 <- smooth.spline(age, wage, cv = TRUE )\n\nWarning in smooth.spline(age, wage, cv = TRUE): cross-validation with non-unique\n'x' values seems doubtful\n\nfit2$df\n\n[1] 6.794596\n\nlines(fit, col = \"red\", lwd = 2)\nlines(fit2, col = \"blue\", lwd = 2)\nlegend (\"topright\", \n        legend = c(\"16 DF\", \"6.8 DF\"), \n        col = c(\"red\", \"blue\"), \n        lty = 1 , lwd = 2 , cex = .8)\n\n\n\n\nNotice that in the first call to smooth.spline(), we specified df = 16. The function then determines which value of \\(\\lambda\\) leads to 16 degrees of freedom. In the second call to smooth.spline(), we select the smoothness level by cross-validation; this results in a value of \\(\\lambda\\) that yields 6.8 degrees of freedom.\n\n\n\nIn order to perform local regression, we use the loess() function.\n\nplot(age, wage , xlim = agelims, cex = .5 , col = \"darkgrey\")\ntitle(\"Local Regression\")\nfit <- loess(wage ~ age , span = .2, data = Wage )\nfit2 <- loess (wage ~ age , span = .5, data = Wage )\nfit3 <- loess (wage ~ age , span = .8, data = Wage )\n\nlines(age.grid , predict(fit, data.frame (age = age.grid )),\n      col = \"red\", lwd = 2)\nlines (age.grid , predict(fit2, data.frame (age = age.grid )), \n       col = \"blue\", lwd = 2)\nlines (age.grid , predict(fit3, data.frame (age = age.grid )), \n       col = \"goldenrod\", lwd = 2)\n\nlegend(\"topright\", legend = c(\"Span = 0.2\", \"Span = 0.5\", \"Span = 0.8\"), \n       col = c(\"red\", \"blue\", \"goldenrod\"), lty = 1, lwd = 2, cex = .8)\n\n\n\n\nHere we have performed local linear regression using different spans: that is, each neighborhood consists of 20%, 50% or 80% of the observations. The larger the span, the smoother the fit. The {locfit} library can also be used for fitting local regression models in R."
  },
  {
    "objectID": "lab07-non-linear.html#gams",
    "href": "lab07-non-linear.html#gams",
    "title": "Lab 07 Non-linear models",
    "section": "2 GAMs",
    "text": "2 GAMs\nGAMs are non-linear Generalised Additive Models.\nWe now fit a GAM to predict wage using natural spline functions of year and age, treating education as a qualitative predictor. Since this is just a big linear regression model using an appropriate choice of basis functions, we can simply do this using the lm() function.\n\n# lm() with natural splines for fit\ngam1 <- lm(wage ~ ns(year , 4) + ns(age , 5) + education ,\n           data = Wage)\n\nWe now fit a model using smoothing splines rather than natural splines. In order to fit more general sorts of GAMs, using smoothing splines or other components that cannot be expressed in terms of basis functions and then fit using least squares regression, we will need to use the {gam} library in R.\n\ns() smooooth spline\nThe s() function, which is part of the {gam} library, is used to indicate that we would like to use a smoothing spline. We specify that the function of year should have 4 degrees of freedom, and that the function of age will have 5 degrees of freedom. Since education is qualitative, we leave it as is, and it is converted into four dummy variables. We use the gam() function in order to fit a GAM using these components. All model terms are fit simultaneously, taking each other into account to explain the response.\n\nlibrary (gam) \n\nLoading required package: foreach\n\n\nLoaded gam 1.20.2\n\ngam.m3 <- gam (wage ~ s(year, 4) + s(age , 5) + education , data = Wage )\n\npar(mfrow = c(1, 3)) \nplot(gam.m3, se = TRUE, col = \"blue\")\n\n\n\n\nThe generic plot() function recognizes that gam.m3 is an object of class Gam, and invokes the appropriateplot.Gam() method. Conveniently, even though gam1 is not of class Gam but rather of class lm, we can still use plot.Gam() on it.\n\n\nplot.GAM()\n\npar(mfrow=c(1,3))\nplot.Gam(gam1, se = TRUE, col = \"red\")\n\n\n\n\nNotice here the use of plot.Gam() rather than the generic plot() function.\nIn these plots, the function of year looks rather linear. We can perform a series of ANOVA tests in order to determine which model is best: a GAM that excludes year (M1), a GAM that uses a linear function of year (M2), or a GAM that uses a spline function of year (M3).\n\ngam.m1 <- gam (wage ~ s(age , 5) + education, data = Wage )\ngam.m2 <- gam (wage ~ year + s(age, 5) + education, data = Wage )\n\nanova (gam.m1, gam.m2, gam.m3, test = \"F\") \n\nAnalysis of Deviance Table\n\nModel 1: wage ~ s(age, 5) + education\nModel 2: wage ~ year + s(age, 5) + education\nModel 3: wage ~ s(year, 4) + s(age, 5) + education\n  Resid. Df Resid. Dev Df Deviance       F    Pr(>F)    \n1      2990    3711731                                  \n2      2989    3693842  1  17889.2 14.4771 0.0001447 ***\n3      2986    3689770  3   4071.1  1.0982 0.3485661    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nWe find that there is compelling evidence that a GAM with a linear function of year is better than a GAM that does not include year at all (p-value = 0.00014). However, there is no evidence that a non-linear function of year is needed (p-value = 0.349). In other words, based on the results of this ANOVA, M2 is preferred.\nThe summary() function produces a summary of the gam fit.\n\nsummary(gam.m3)\n\n\nCall: gam(formula = wage ~ s(year, 4) + s(age, 5) + education, data = Wage)\nDeviance Residuals:\n    Min      1Q  Median      3Q     Max \n-119.43  -19.70   -3.33   14.17  213.48 \n\n(Dispersion Parameter for gaussian family taken to be 1235.69)\n\n    Null Deviance: 5222086 on 2999 degrees of freedom\nResidual Deviance: 3689770 on 2986 degrees of freedom\nAIC: 29887.75 \n\nNumber of Local Scoring Iterations: NA \n\nAnova for Parametric Effects\n             Df  Sum Sq Mean Sq F value    Pr(>F)    \ns(year, 4)    1   27162   27162  21.981 2.877e-06 ***\ns(age, 5)     1  195338  195338 158.081 < 2.2e-16 ***\neducation     4 1069726  267432 216.423 < 2.2e-16 ***\nResiduals  2986 3689770    1236                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nAnova for Nonparametric Effects\n            Npar Df Npar F  Pr(F)    \n(Intercept)                          \ns(year, 4)        3  1.086 0.3537    \ns(age, 5)         4 32.380 <2e-16 ***\neducation                            \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThe “Anova for Parametric Effects” p-values clearly demonstrate that year, age, and education are all highly statistically significant, even when only assuming a linear relationship. Alternatively, the “Anova for Nonparamet- ric Eﬀects” p-values for year and age correspond to a null hypothesis of a linear relationship versus the alternative of a non-linear relationship. The large p-value for year reinforces our conclusion from the ANOVA test that a linear function is adequate for this term. However, there is very clear evidence that a non-linear term is required for age.\n\n\npredict() GAM\nWe can make predictions using the predict() method for the class Gam. Here we make predictions on the training set.\n\npreds <- predict(gam.m2, newdata = Wage)\n\n\n\nlo()\nWe can also use local regression fits as building blocks in a GAM, using the lo() function.\n\ngam.lo <- gam(\n  wage ~ s(year, df = 4) + lo(age, span = 0.7) + education, data = Wage\n  )\npar(mfrow=c(1,3))\nplot.Gam(gam.lo, se = TRUE, col = \"green\")\n\n\n\n\nHere we have used local regression for the age term, with a span of 0.7. We can also use the lo() function to create interactions before calling the gam() function. For example,\n\ngam.lo.i <- gam(wage ~ lo(year, age, span = 0.5) + education,\n                data = Wage )\n\nfits a two-term model, in which the first term is an interaction between year and age, fit by a local regression surface. We can plot the resulting two-dimensional surface if we first install the {akima} and {interp} packages.\n\nlibrary(akima)\n\nWarning: package 'akima' was built under R version 4.1.3\n\nlibrary(interp)\n\nWarning: package 'interp' was built under R version 4.1.3\n\n\n\nAttaching package: 'interp'\n\n\nThe following objects are masked from 'package:akima':\n\n    aspline, bicubic, bicubic.grid, bilinear, bilinear.grid,\n    franke.data, franke.fn, interp, interp2xyz, interpp\n\npar(mfrow=c(1,2))\nplot(gam.lo.i)\n\n\n\n\nIn order to fit a logistic regression GAM, we once again use the I() function in constructing the binary response variable, and set family=binomial.\n\ngam.lr <- gam(I(wage > 250) ~ year + s(age, df = 5) + education,\n              family = binomial, \n              data = Wage)\n\npar(mfrow = c(1 , 3))\n# ok but tricky to interpret\nplot(gam.lr, se = T, col = \"green\")\n\n\n\n\nIt is easy to see that there are no high earners in the < HS Grad (less than high school, roughly equivalent to school leavers in the UK) category:\n\ntable(education, I(wage>250))\n\n                    \neducation            FALSE TRUE\n  1. < HS Grad         268    0\n  2. HS Grad           966    5\n  3. Some College      643    7\n  4. College Grad      663   22\n  5. Advanced Degree   381   45\n\n\nHence, we fit a logistic regression GAM using all but this category. This provides more sensible results.\n\ngam.lr.s <- gam(I(wage > 250) ~ year + s(age, df = 5) + education, \n                family = binomial, data = Wage,\n                subset = (education != \"1. < HS Grad\"))\npar(mfrow=c(1,3))\nplot(gam.lr.s, se = T, col = \"green\")"
  },
  {
    "objectID": "lab07-non-linear.html#exercises",
    "href": "lab07-non-linear.html#exercises",
    "title": "Lab 07 Non-linear models",
    "section": "3 Exercises",
    "text": "3 Exercises\n\nExercise 1\n\n1.1\nIn this exercise, you will further analyze the Wage data set considered throughout this lab.\nPerform polynomial regression to predict wage using age. Use cross-validation to select the optimal degree d for the polynomial. What degree was chosen, and how does this compare to the results of hypothesis testing using ANOVA? Make a plot of the resulting polynomial fit to the data.\n\n\n1.2\nFit a step function to predict wage using age, and perform crossvalidation to choose the optimal number of cuts. Make a plot of the fit obtained.\n\n\n\nExercise 2\nThe Wage data set contains a number of other features not explored in this chapter, such as marital status (maritl), job class (jobclass), and others. Explore the relationships between some of these other predictors and wage, and use non-linear fitting techniques in order to fit flexible models to the data. Create plots of the results obtained, and write a summary of your findings.\n\n\nExercise 3\nFit some of the non-linear models investigated in this lab to the Auto data set. Is there evidence for non-linear relationships in this data set? Create some informative plots to justify your answer."
  },
  {
    "objectID": "lab07-non-linear.html#resources",
    "href": "lab07-non-linear.html#resources",
    "title": "Lab 07 Non-linear models",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab07-non-linear.html#harper-adams-data-science",
    "href": "lab07-non-linear.html#harper-adams-data-science",
    "title": "Lab 07 Non-linear models",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab08-trees.html",
    "href": "lab08-trees.html",
    "title": "Lab 08 Decision trees",
    "section": "",
    "text": "The {tree} library is used to construct classification and regression trees.\n\n\nWe first use classification trees to analyze the Carseats data set. In these data, Sales is a continuous variable, and so we begin by recoding it as a binary variable. We use the ifelse() function to create a variable, called High, which takes on a value of Yes if the Sales variable exceeds 8, and takes on a value of No otherwise.\n\nlibrary(tree)\nlibrary(ISLR2)\nattach(Carseats)\nHigh <- factor(ifelse(Sales <= 8 , \"No\", \"Yes\")) \n\nFinally, we use the data.frame() function to merge High with the rest of the Carseats data.\n\nCarseats <- data.frame(Carseats, High )\n\nWe now use the tree() function to fit a classification tree in order to predict High using all variables but Sales. The syntax of the tree() function is quite similar to that of the lm() function.\nThe summary() function lists the variables that are used as internal nodes in the tree, the number of terminal nodes, and the (training) error rate.\n\ntree.carseats <- tree(High ~ . -Sales, Carseats)\nsummary(tree.carseats)\n\n\nClassification tree:\ntree(formula = High ~ . - Sales, data = Carseats)\nVariables actually used in tree construction:\n[1] \"ShelveLoc\"   \"Price\"       \"Income\"      \"CompPrice\"   \"Population\" \n[6] \"Advertising\" \"Age\"         \"US\"         \nNumber of terminal nodes:  27 \nResidual mean deviance:  0.4575 = 170.7 / 373 \nMisclassification error rate: 0.09 = 36 / 400 \n\n\nWe see that the training error rate is 9%. For classification trees, the deviance reported in the output of summary() is given by\n\\(-\\underset m \\sum \\underset k \\sum n_{mk} log \\hat p_{mk}\\)\nwhere \\(n_{mk}\\) is the number of observations in the \\(m\\)th terminal node that belong to the \\(k\\)th class. This is closely related to entropy (see James et al. 2021). A small deviance indicates a tree that provides a good fit to the (training) data. The residual mean deviance reported is simply the deviance divided by \\(n − |T_0|\\), which in this case is 400 − 27 = 373.\n\n\n\nOne of the most attractive properties of trees is that they can be graphically displayed. We use the plot() function to display the tree struc- ture, and the text() function to display the node labels. The argument pretty = 0 instructs R to include the category names for any qualitative predictors, rather than simply displaying a letter for each category.\n\npar(mfrow=c(1,1))\nplot(tree.carseats)\ntext(tree.carseats, pretty = 0, cex = .6)\n\n\n\n\nThe most important indicator of Sales appears to be shelving location, since the first branch differentiates Good locations from Bad and Medium locations.\nIf we just type the name of the tree object, R prints output corresponding to each branch of the tree. R displays the split criterion (e.g. Price < 92.5), the number of observations in that branch, the deviance, the overall prediction for the branch (Yes or No), and the fraction of observations in that branch that take on values of Yes and No. Branches that lead to terminal nodes are indicated using asterisks.\n\ntree.carseats\n\nnode), split, n, deviance, yval, (yprob)\n      * denotes terminal node\n\n  1) root 400 541.500 No ( 0.59000 0.41000 )  \n    2) ShelveLoc: Bad,Medium 315 390.600 No ( 0.68889 0.31111 )  \n      4) Price < 92.5 46  56.530 Yes ( 0.30435 0.69565 )  \n        8) Income < 57 10  12.220 No ( 0.70000 0.30000 )  \n         16) CompPrice < 110.5 5   0.000 No ( 1.00000 0.00000 ) *\n         17) CompPrice > 110.5 5   6.730 Yes ( 0.40000 0.60000 ) *\n        9) Income > 57 36  35.470 Yes ( 0.19444 0.80556 )  \n         18) Population < 207.5 16  21.170 Yes ( 0.37500 0.62500 ) *\n         19) Population > 207.5 20   7.941 Yes ( 0.05000 0.95000 ) *\n      5) Price > 92.5 269 299.800 No ( 0.75465 0.24535 )  \n       10) Advertising < 13.5 224 213.200 No ( 0.81696 0.18304 )  \n         20) CompPrice < 124.5 96  44.890 No ( 0.93750 0.06250 )  \n           40) Price < 106.5 38  33.150 No ( 0.84211 0.15789 )  \n             80) Population < 177 12  16.300 No ( 0.58333 0.41667 )  \n              160) Income < 60.5 6   0.000 No ( 1.00000 0.00000 ) *\n              161) Income > 60.5 6   5.407 Yes ( 0.16667 0.83333 ) *\n             81) Population > 177 26   8.477 No ( 0.96154 0.03846 ) *\n           41) Price > 106.5 58   0.000 No ( 1.00000 0.00000 ) *\n         21) CompPrice > 124.5 128 150.200 No ( 0.72656 0.27344 )  \n           42) Price < 122.5 51  70.680 Yes ( 0.49020 0.50980 )  \n             84) ShelveLoc: Bad 11   6.702 No ( 0.90909 0.09091 ) *\n             85) ShelveLoc: Medium 40  52.930 Yes ( 0.37500 0.62500 )  \n              170) Price < 109.5 16   7.481 Yes ( 0.06250 0.93750 ) *\n              171) Price > 109.5 24  32.600 No ( 0.58333 0.41667 )  \n                342) Age < 49.5 13  16.050 Yes ( 0.30769 0.69231 ) *\n                343) Age > 49.5 11   6.702 No ( 0.90909 0.09091 ) *\n           43) Price > 122.5 77  55.540 No ( 0.88312 0.11688 )  \n             86) CompPrice < 147.5 58  17.400 No ( 0.96552 0.03448 ) *\n             87) CompPrice > 147.5 19  25.010 No ( 0.63158 0.36842 )  \n              174) Price < 147 12  16.300 Yes ( 0.41667 0.58333 )  \n                348) CompPrice < 152.5 7   5.742 Yes ( 0.14286 0.85714 ) *\n                349) CompPrice > 152.5 5   5.004 No ( 0.80000 0.20000 ) *\n              175) Price > 147 7   0.000 No ( 1.00000 0.00000 ) *\n       11) Advertising > 13.5 45  61.830 Yes ( 0.44444 0.55556 )  \n         22) Age < 54.5 25  25.020 Yes ( 0.20000 0.80000 )  \n           44) CompPrice < 130.5 14  18.250 Yes ( 0.35714 0.64286 )  \n             88) Income < 100 9  12.370 No ( 0.55556 0.44444 ) *\n             89) Income > 100 5   0.000 Yes ( 0.00000 1.00000 ) *\n           45) CompPrice > 130.5 11   0.000 Yes ( 0.00000 1.00000 ) *\n         23) Age > 54.5 20  22.490 No ( 0.75000 0.25000 )  \n           46) CompPrice < 122.5 10   0.000 No ( 1.00000 0.00000 ) *\n           47) CompPrice > 122.5 10  13.860 No ( 0.50000 0.50000 )  \n             94) Price < 125 5   0.000 Yes ( 0.00000 1.00000 ) *\n             95) Price > 125 5   0.000 No ( 1.00000 0.00000 ) *\n    3) ShelveLoc: Good 85  90.330 Yes ( 0.22353 0.77647 )  \n      6) Price < 135 68  49.260 Yes ( 0.11765 0.88235 )  \n       12) US: No 17  22.070 Yes ( 0.35294 0.64706 )  \n         24) Price < 109 8   0.000 Yes ( 0.00000 1.00000 ) *\n         25) Price > 109 9  11.460 No ( 0.66667 0.33333 ) *\n       13) US: Yes 51  16.880 Yes ( 0.03922 0.96078 ) *\n      7) Price > 135 17  22.070 No ( 0.64706 0.35294 )  \n       14) Income < 46 6   0.000 No ( 1.00000 0.00000 ) *\n       15) Income > 46 11  15.160 Yes ( 0.45455 0.54545 ) *\n\n\nIn order to properly evaluate the performance of a classification tree on these data, we must estimate the test error rather than simply computing the training error. We split the observations into a training set and a test set, build the tree using the training set, and evaluate its performance on the test data. The predict() function can be used for this purpose. In the case of a classification tree, the argument type = \"class\" instructs R to return the actual class prediction. This approach leads to correct predictions for around 77% of the locations in the test data set.\n\nset.seed(2)\ntrain <- sample(1:nrow(Carseats), 200)\nCarseats.test <- Carseats[-train, ]\nHigh.test <- High[-train]\ntree.carseats <- tree(High ~ . -Sales, Carseats, subset = train)\ntree.pred <- predict(tree.carseats, Carseats.test, type = \"class\")\n\n# confusion matrix\ntable(tree.pred, High.test)\n\n         High.test\ntree.pred  No Yes\n      No  104  33\n      Yes  13  50\n\n# % correct\n(104 + 50) / 200\n\n[1] 0.77\n\n\n\n\n\n(If you re-run the predict() function then you might get slightly diﬀerent results, due to “ties”: for instance, this can happen when the training observations corresponding to a terminal node are evenly split between Yes and No response values.)\nNext, we consider whether pruning the tree might lead to improved results. The function cv.tree() performs cross-validation in order to determine the optimal level of tree complexity; cost complexity pruning is used in order to select a sequence of trees for consideration. We use the argument FUN = prune.misclass in order to indicate that we want the classification error rate to guide the cross-validation and pruning process, rather than the default for the cv.tree() function, which is deviance. The cv.tree() function reports the number of terminal nodes of each tree con- sidered (size) as well as the corresponding error rate and the value of the cost-complexity parameter used (k, which corresponds to \\(\\alpha\\) in (8.4)).\n\nset.seed(7)\ncv.carseats <- cv.tree(tree.carseats, FUN = prune.misclass )\nnames(cv.carseats )\n\n[1] \"size\"   \"dev\"    \"k\"      \"method\"\n\ncv.carseats\n\n$size\n[1] 21 19 14  9  8  5  3  2  1\n\n$dev\n[1] 75 75 75 74 82 83 83 85 82\n\n$k\n[1] -Inf  0.0  1.0  1.4  2.0  3.0  4.0  9.0 18.0\n\n$method\n[1] \"misclass\"\n\nattr(,\"class\")\n[1] \"prune\"         \"tree.sequence\"\n\n\nDespite its name, dev corresponds to the number of cross-validation errors. The tree with 9 terminal nodes results in only 74 cross-validation errors. We plot the error rate as a function of both size and k.\n\npar(mfrow = c(1, 2))\nplot(cv.carseats$size, cv.carseats$dev, type = \"b\",\n     pch=16, col = 'goldenrod')\nplot(cv.carseats$k, cv.carseats$dev, type = \"b\",\n     pch=16, col = 'goldenrod')\n\n\n\n\nWe now apply the prune.misclass() function in order to prune the tree to obtain the nine-node tree.\n\nprune.carseats <- prune.misclass(tree.carseats, best = 9)\npar(mfrow=c(1,1))\nplot(prune.carseats)\ntext(prune.carseats, pretty = 0)\n\n\n\n\nHow well does this pruned tree perform on the test data set? Once again, we apply the predict() function.\n\ntree.pred <- predict(prune.carseats, Carseats.test, type = \"class\")\ntable(tree.pred, High.test) \n\n         High.test\ntree.pred No Yes\n      No  97  25\n      Yes 20  58\n\n(97 + 58) / 200\n\n[1] 0.775\n\n\nNow 77.5% of the test observations are correctly classified, so not only has the pruning process produced a more interpretable tree, but it has also slightly improved the classification accuracy.\nIf we increase the value of best, we obtain a larger pruned tree with lower classification accuracy:\n\nprune.carseats <- prune.misclass(tree.carseats, best = 14)\nplot(prune.carseats)\ntext(prune.carseats, pretty = 0)\n\n\n\ntree.pred <- predict(prune.carseats, Carseats.test, type = \"class\")\n\ntable(tree.pred, High.test) \n\n         High.test\ntree.pred  No Yes\n      No  102  31\n      Yes  15  52\n\n(102 + 52) / 200\n\n[1] 0.77"
  },
  {
    "objectID": "lab08-trees.html#regression-trees",
    "href": "lab08-trees.html#regression-trees",
    "title": "Lab 08 Decision trees",
    "section": "2 Regression trees",
    "text": "2 Regression trees\nHere we fit a regression tree to the Boston data set. First, we create a training set, and fit the tree to the training data.\n\nset.seed(1)\ntrain <- sample(1:nrow(Boston), nrow(Boston) / 2)\ntree.boston <- tree(medv ~ ., Boston, subset = train )\nsummary(tree.boston ) \n\n\nRegression tree:\ntree(formula = medv ~ ., data = Boston, subset = train)\nVariables actually used in tree construction:\n[1] \"rm\"    \"lstat\" \"crim\"  \"age\"  \nNumber of terminal nodes:  7 \nResidual mean deviance:  10.38 = 2555 / 246 \nDistribution of residuals:\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-10.1800  -1.7770  -0.1775   0.0000   1.9230  16.5800 \n\n\nNotice that the output of summary() indicates that only four of the variables have been used in constructing the tree. In the context of a regression tree, the deviance is simply the sum of squared errors for the tree. We now plot the tree.\n\nplot(tree.boston)\ntext(tree.boston, pretty = 0)\n\n\n\n\nThe variable lstat measures the percentage of individuals with lower socioeconomic status, while the variable rm corresponds to the average number of rooms. The tree indicates that larger values of rm, or lower values of lstat, correspond to more expensive houses. For example, the tree predicts a median house price of $45,400 for homes in census tracts in which rm >= 7.553.\nIt is worth noting that we could have fit a much bigger tree, by pass- ing control = tree.control(nobs = length(train), mindev = 0) into the tree() function.\nNow we use the cv.tree() function to see whether pruning the tree will improve performance.\n\ncv.boston <- cv.tree(tree.boston)\nplot(cv.boston$size, cv.boston$dev, type = \"b\")\n\n\n\n\nIn this case, the most complex tree under consideration is selected by cross-validation. However, if we wish to prune the tree, we could do so as follows, using the prune.tree() function:\n\nprune.boston <- prune.tree(tree.boston, best = 5)\nplot(prune.boston)\ntext(prune.boston, pretty = 0)\n\n\n\n\nIn keeping with the cross-validation results, we use the unpruned tree to make predictions on the test set.\n\nyhat <- predict(tree.boston, newdata = Boston[-train, ])\nboston.test <- Boston[-train, \"medv\"]\nplot(yhat, boston.test )\nabline(0, 1)\n\n\n\nmean((yhat - boston.test )^2)\n\n[1] 35.28688\n\n\nIn other words, the test set MSE associated with the regression tree is 35.29. The square root of the MSE is therefore around 5.941, indicating that this model leads to test predictions that are (on average) within approximately $5,941 of the true median home value for the census tract."
  },
  {
    "objectID": "lab08-trees.html#bagging",
    "href": "lab08-trees.html#bagging",
    "title": "Lab 08 Decision trees",
    "section": "3 Bagging",
    "text": "3 Bagging\nHere we apply bagging and random forests to the Boston data, using the randomForest package in R. The exact results obtained in this section may depend on the version of R and the version of the {randomForest} package installed on your computer. Recall that bagging is simply a special case of a random forest with m = p. Therefore, the randomForest() function can be used to perform both random forests and bagging. We perform bagging as follows:\n\nlibrary(randomForest) \n\nrandomForest 4.6-14\n\n\nType rfNews() to see new features/changes/bug fixes.\n\nset.seed(1)\nbag.boston <- randomForest(medv ~ ., data = Boston,\n                           subset = train, mtry = 12, \n                           importance = TRUE)\nbag.boston \n\n\nCall:\n randomForest(formula = medv ~ ., data = Boston, mtry = 12, importance = TRUE,      subset = train) \n               Type of random forest: regression\n                     Number of trees: 500\nNo. of variables tried at each split: 12\n\n          Mean of squared residuals: 11.40162\n                    % Var explained: 85.17\n\n\nThe argument mtry = 12 indicates that all 12 predictors should be consid- ered for each split of the tree. In other words, that bagging should be done. How well does this bagged model perform on the test set?\n\nyhat.bag <- predict(bag.boston, newdata = Boston[-train, ])\nplot(yhat.bag, boston.test) \nabline(0, 1)\n\n\n\nmean((yhat.bag - boston.test )^2)\n\n[1] 23.41916\n\n\nThe test set MSE associated with the bagged regression tree is 23.42, about two-thirds of that obtained using an optimally-pruned single tree. We could change the number of trees grown by randomForest() using the ntree argument:\n\nbag.boston <- randomForest(medv ~ ., data = Boston,\n                           subset = train, mtry = 12, ntree = 25)\n\nyhat.bag <- predict(bag.boston, newdata = Boston[-train, ])\nmean((yhat.bag - boston.test )^2)\n\n[1] 25.75055\n\n\nGrowing a random forest proceeds in exactly the same way, except that we use a smaller value of the mtry argument. By default, randomForest() uses \\(p/3\\) variables when building a random forest of regression trees, and \\(\\sqrt p\\) variables when building a random forest of classification trees. Here we use mtry = 6.\n\nimportance()\n\nset.seed(1)\nrf.boston <- randomForest(medv ~ ., data = Boston, subset = train, \n                          mtry = 6, importance = TRUE )\n\nyhat.rf <- predict(rf.boston, newdata = Boston[-train, ])\nmean((yhat.rf - boston.test )^2)\n\n[1] 20.06644\n\n\nThe test set MSE is 20.07; this indicates that random forests yielded an improvement over bagging in this case.\nUsing the importance() function, we can view the importance of each variable.\n\nimportance(rf.boston)\n\n          %IncMSE IncNodePurity\ncrim    19.435587    1070.42307\nzn       3.091630      82.19257\nindus    6.140529     590.09536\nchas     1.370310      36.70356\nnox     13.263466     859.97091\nrm      35.094741    8270.33906\nage     15.144821     634.31220\ndis      9.163776     684.87953\nrad      4.793720      83.18719\ntax      4.410714     292.20949\nptratio  8.612780     902.20190\nlstat   28.725343    5813.04833\n\n\nTwo measures of variable importance are reported. The first is based upon the mean decrease of accuracy in predictions on the out of bag samples when a given variable is permuted. The second is a measure of the total decrease in node impurity that results from splits over that variable, averaged over all trees. In the case of regression trees, the node impurity is measured by the training RSS, and for classification trees by the deviance. Plots of these importance measures can be produced using the varImpPlot() function.\n\n\nvarImpPlot()\nThe results indicate that across all of the trees considered in the random forest, the wealth of the community (lstat) and the house size (rm) are by far the two most important variables.\n\nvarImpPlot(rf.boston)\n\n\n\n\nThe results indicate that across all of the trees considered in the random forest, the wealth of the community (lstat) and the house size (rm) are by far the two most important variables."
  },
  {
    "objectID": "lab08-trees.html#boosting",
    "href": "lab08-trees.html#boosting",
    "title": "Lab 08 Decision trees",
    "section": "4 Boosting",
    "text": "4 Boosting\n\ngbm()\nHere we use the gbm package, and within it the gbm() function, to fit boosted regression trees to the Boston data set. We run gbm() with the option distribution = \"gaussian\" since this is a regression problem; if it were a binary classification problem, we would use distribution = \"bernoulli\". The argument n.trees = 5000 indicates that we want 5000 trees, and the option interaction.depth = 4 limits the depth of each tree.\n\nlibrary(gbm) \n\nLoaded gbm 2.1.8\n\nset.seed(1)\nboost.boston <- gbm(medv ~ ., data = Boston[ train, ], \n                    distribution = \"gaussian\", n.trees = 5000,\n                    interaction.depth = 4)\n\nThe summary() function produces a relative influence plot and also outputs the relative influence statistics.\n\nsummary(boost.boston)\n\n\n\n\n            var     rel.inf\nrm           rm 44.48249588\nlstat     lstat 32.70281223\ncrim       crim  4.85109954\ndis         dis  4.48693083\nnox         nox  3.75222394\nage         age  3.19769210\nptratio ptratio  2.81354826\ntax         tax  1.54417603\nindus     indus  1.03384666\nrad         rad  0.87625748\nzn           zn  0.16220479\nchas       chas  0.09671228\n\n\n\n\nPartial dependence\nWe see that lstat and rm are by far the most important variables. We can also produce partial dependence plots for these two variables. These plots illustrate the marginal eﬀect of the selected variables on the response after integrating out the other variables. In this case, as we might expect, median house prices are increasing with rm and decreasing with lstat.\n\nplot(boost.boston, i = \"rm\")\n\n\n\nplot(boost.boston, i = \"lstat\")\n\n\n\n\nWe now use the boosted model to predict medv on the test set:\n\nyhat.boost <- predict(boost.boston,\n                      newdata = Boston[-train, ], \n                      n.trees = 5000)\n\nmean((yhat.boost - boston.test)^2)\n\n[1] 18.39057\n\n\nThe test MSE obtained is 18.39: this is superior to the test MSE of random forests and bagging. If we want to, we can perform boosting with a different value of the shrinkage parameter \\(\\lambda\\). The default value is 0.001, but this is easily modified. Here we take \\(\\lambda = 0.2\\).\n\nboost.boston <- gbm(medv ~ ., data = Boston[train, ],\n                    distribution = \"gaussian\", n.trees = 5000,\n                    interaction.depth = 4, shrinkage = 0.2, \n                    verbose = F)\n\nyhat.boost <- predict(boost.boston,\n                      newdata = Boston[-train, ], \n                      n.trees = 5000)\n\nmean((yhat.boost - boston.test)^2)\n\n[1] 16.54778\n\n\nIn this case, using \\(\\lambda = 0.2\\) leads to a lower test MSE than \\(\\lambda = 0.001\\)."
  },
  {
    "objectID": "lab08-trees.html#bayesian-additive-reg-trees",
    "href": "lab08-trees.html#bayesian-additive-reg-trees",
    "title": "Lab 08 Decision trees",
    "section": "5 Bayesian additive reg trees",
    "text": "5 Bayesian additive reg trees\n\n{BART} and gbart()\nIn this section we use the {BART} package, and within it the gbart() function, to fit a Bayesian additive regression tree model to the Boston housing data set. The gbart() function is designed for quantitative outcome variables. For binary outcomes, lbart() and pbart() are available.\nTo run the gbart() function, we must first create matrices of predictors for the training and test data. We run {BART} with default settings.\n\nlibrary(BART) \n\nWarning: package 'BART' was built under R version 4.1.3\n\n\nLoading required package: nlme\n\n\nLoading required package: nnet\n\n\nLoading required package: survival\n\nx <- Boston[ , 1:12]\ny <- Boston [, \"medv\"]\n\n# train and test partitions\nxtrain <- x[train, ]\nytrain <- y[train]\nxtest <- x[-train, ]\nytest <- y[-train]\n\nset.seed(1)\nbartfit <- gbart(xtrain, ytrain, x.test = xtest )\n\n*****Calling gbart: type=1\n*****Data:\ndata:n,p,np: 253, 12, 253\ny1,yn: 0.213439, -5.486561\nx1,x[n*p]: 0.109590, 20.080000\nxp1,xp[np*p]: 0.027310, 7.880000\n*****Number of Trees: 200\n*****Number of Cut Points: 100 ... 100\n*****burn,nd,thin: 100,1000,1\n*****Prior:beta,alpha,tau,nu,lambda,offset: 2,0.95,0.795495,3,3.71636,21.7866\n*****sigma: 4.367914\n*****w (weights): 1.000000 ... 1.000000\n*****Dirichlet:sparse,theta,omega,a,b,rho,augment: 0,0,1,0.5,1,12,0\n*****printevery: 100\n\nMCMC\ndone 0 (out of 1100)\ndone 100 (out of 1100)\ndone 200 (out of 1100)\ndone 300 (out of 1100)\ndone 400 (out of 1100)\ndone 500 (out of 1100)\ndone 600 (out of 1100)\ndone 700 (out of 1100)\ndone 800 (out of 1100)\ndone 900 (out of 1100)\ndone 1000 (out of 1100)\ntime: 2s\ntrcnt,tecnt: 1000,1000\n\n\n\n# compute the test error\nyhat.bart <- bartfit$yhat.test.mean\nmean((ytest - yhat.bart )^2)\n\n[1] 15.94718\n\n\nOn this data set, the test error of {BART} is lower than the test error of random forests and boosting.\nNow we can check how many times each variable appeared in the collection of trees.\n\nord <- order(bartfit$varcount.mean, decreasing = T)\nbartfit$varcount.mean[ord]\n\n    nox   lstat     tax     rad      rm   indus    chas ptratio     age      zn \n 22.952  21.329  21.250  20.781  19.890  19.825  19.051  18.976  18.274  15.952 \n    dis    crim \n 14.457  11.007"
  },
  {
    "objectID": "lab08-trees.html#exercises",
    "href": "lab08-trees.html#exercises",
    "title": "Lab 08 Decision trees",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nIn this lab, we applied random forests to the Boston data using mtry = 6 and using ntree = 25 and ntree = 500. Create a plot displaying the test error resulting from random forests on this data set for a more comprehensive range of values for mtry and ntree. Describe the results obtained.\n\n\nExercise 2\nIn the lab, a classification tree was applied to the Carseats data set after converting Sales into a qualitative response variable. Now we will seek to predict Sales using regression trees and related approaches, treating the response as a quantitative variable.\n\n2.1\nSplit the data set into a training set and a test set.\n\n\n2.2\nFit a regression tree to the training set. Plot the tree, and interpret the results. What test MSE do you obtain?\n\n\n2.3\nUse cross-validation in order to determine the optimal level of tree complexity. Does pruning the tree improve the test MSE?\n\n\n2.4\nUse the bagging approach in order to analyze this data. What test MSE do you obtain? Use the importance() function to determine which variables are most important.\n\n\n2.5\nUse random forests to analyze this data. What test MSE do you obtain? Use the importance() function to determine which variables are most important. Describe the effect of m, the number of variables considered at each split, on the error rate obtained.\n\n\n2.6\nNow analyze the data using BART, and report your results."
  },
  {
    "objectID": "lab08-trees.html#resources",
    "href": "lab08-trees.html#resources",
    "title": "Lab 08 Decision trees",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab08-trees.html#harper-adams-data-science",
    "href": "lab08-trees.html#harper-adams-data-science",
    "title": "Lab 08 Decision trees",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab09-svm.html",
    "href": "lab09-svm.html",
    "title": "Lab 09 SVM",
    "section": "",
    "text": "We use the {e1071} library in R to demonstrate the support vector classifier and the SVM. Another option is the {LiblineaR} library, which is useful for very large linear problems.\n\n\nThe {e1071} library contains implementations for a number of statistical learning methods. In particular, the svm() function can be used to fit a support vector classifier when the argument kernel = \"linear\" is used. A cost argument allows us to specify the cost of a violation to the margin. When the cost argument is small, then the margins will be wide and many support vectors will be on the margin or will violate the margin. When the cost argument is large, then the margins will be narrow and there will be few support vectors on the margin or violating the margin.\n\n\n\nWe now use the svm() function to fit the support vector classifier for a given value of the cost parameter. Here we demonstrate the use of this function on a two-dimensional example so that we can plot the resulting decision boundary. We begin by generating the observations, which belong to two classes, and checking whether the classes are linearly separable.\n\nset.seed(1)\nx <- matrix(rnorm(20 * 2), ncol = 2)\ny <- c( rep (-1, 10) , rep (1 , 10) )\nx[y == 1, ] <- x[ y == 1, ] + 1\nplot(x, col = (3 - y), pch=16)\n\n\n\n\nThey are not (i.e. you cannot separate the classes by drawing a straight line between them). Next, we fit the support vector classifier. Note that in order for the svm() function to perform classification (as opposed to SVM-based regression), we must encode the response as a factor variable. We now create a data frame with the response coded as a factor.\n\ndat <- data.frame(x = x, y = as.factor(y)) \nlibrary(e1071)\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", \n              cost = 10 , scale = FALSE )\n\nThe argument scale = FALSE tells the svm() function not to scale each feature to have mean zero or standard deviation one; depending on the application, one might prefer to use scale = TRUE.\nWe can now plot the support vector classifier obtained:\n\nplot(svmfit, dat) # first peek, not great\n\n\n\n\nNote that the two arguments to the SVM plot() function are the output of the call to svm(), as well as the data used in the call to svm(). The region of feature space that will be assigned to the 1 class is shown in light yellow, and the region that will be assigned to the +1 class is shown in red. The decision boundary between the two classes is linear (because we used the argument kernel = \"linear\"), though due to the way in which the plotting function is implemented in this library the decision boundary looks somewhat jagged in the plot. (Note that here the second feature is plotted on the x-axis and the first feature is plotted on the y-axis, in contrast to the behavior of the usual plot() function in R.) The support vectors are plotted as crosses and the remaining observations are plotted as circles; we see here that there are seven support vectors. We can determine their identities as follows:\n\nsvmfit$index\n\n[1]  1  2  5  7 14 16 17\n\n\nWe can obtain some basic information about the support vector classifier fit using the summary() command:\n\nsummary(svmfit)\n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 10, scale = FALSE)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  10 \n\nNumber of Support Vectors:  7\n\n ( 4 3 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\n\nThis tells us, for instance, that a linear kernel was used with cost = 10, and that there were seven support vectors, four in one class and three in the other.\nWhat if we instead used a smaller value of the cost parameter?\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\",\n              cost = 0.1 , scale = FALSE )\nplot(svmfit, dat) \n\n\n\nsvmfit$index\n\n [1]  1  2  3  4  5  7  9 10 12 13 14 15 16 17 18 20\n\n\nNow that a smaller value of the cost parameter is being used, we obtain a larger number of support vectors, because the margin is now wider. Unfortunately, the svm() function does not explicitly output the coefficients of the linear decision boundary obtained when the support vector classifier is fit, nor does it output the width of the margin.\n\n\n\nThe {e1071} library includes a built-in function, tune(), to perform cross- validation. By default, tune() performs ten-fold cross-validation on a set of models of interest. In order to use this function, we pass in relevant information about the set of models that are under consideration. The following command indicates that we want to compare SVMs with a linear kernel, using a range of values of the cost parameter.\n\nset.seed(1)\ntune.out <- tune(svm, y ~ ., data = dat , kernel = \"linear\",\n                 ranges = list(cost = c(0.001, 0.01, 0.1,\n                                        1, 5, 10, 100)))\n\nWe can easily access the cross-validation errors for each of these models using the summary() command:\n\nsummary(tune.out)\n\n\nParameter tuning of 'svm':\n\n- sampling method: 10-fold cross validation \n\n- best parameters:\n cost\n  0.1\n\n- best performance: 0.05 \n\n- Detailed performance results:\n   cost error dispersion\n1 1e-03  0.55  0.4377975\n2 1e-02  0.55  0.4377975\n3 1e-01  0.05  0.1581139\n4 1e+00  0.15  0.2415229\n5 5e+00  0.15  0.2415229\n6 1e+01  0.15  0.2415229\n7 1e+02  0.15  0.2415229\n\n\n\n\n\nWe see that cost = 0.1 (1e-01) results in the lowest cross-validation error rate. The tune() function stores the best model obtained, which can be accessed as follows:\n\nbestmod <- tune.out$best.model\nsummary(bestmod) \n\n\nCall:\nbest.tune(method = svm, train.x = y ~ ., data = dat, ranges = list(cost = c(0.001, \n    0.01, 0.1, 1, 5, 10, 100)), kernel = \"linear\")\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  0.1 \n\nNumber of Support Vectors:  16\n\n ( 8 8 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\n\n\n\n\nThe predict() function can be used to predict the class label on a set of test observations, at any given value of the cost parameter. We begin by generating a test data set.\n\nxtest <- matrix(rnorm(20 * 2), ncol = 2)\nytest <- sample(c(-1, 1), 20, rep = TRUE)\nxtest[ ytest == 1, ] <- xtest[ytest == 1, ] + 1\ntestdat <- data.frame(x = xtest, y = as.factor(ytest))\n\nNow we predict the class labels of these test observations. Here we use the best model obtained through cross-validation in order to make predictions.\n\nypred <- predict(bestmod, testdat)\n\n#our own confusion matrix\ntable(predict = ypred, truth = testdat$y)  #not bad\n\n       truth\npredict -1 1\n     -1  9 1\n     1   2 8\n\n\nThus, with this value of cost, 17 of the test observations are correctly classified. What if we had instead used cost = 0.01?\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\",\n              cost = .01, scale = FALSE)\nypred <- predict(svmfit, testdat)\n\ntable(predict = ypred, truth = testdat$y) # not as good\n\n       truth\npredict -1  1\n     -1 11  6\n     1   0  3\n\n\nIn this case three additional observations are misclassified.\n\n\n\nNow consider a situation in which the two classes are linearly separable. Then we can find a separating hyperplane using the svm() function. We first further separate the two classes in our simulated data so that they are linearly separable:\n\nx[y == 1, ] <- x[y == 1, ] + 0.5\nplot (x, col = (y + 5) / 2, pch = 16)\n\n\n\n\nNow the observations are just barely linearly separable. We fit the support vector classifier and plot the resulting hyperplane, using a very large value of cost so that no observations are misclassified.\n\ndat <- data.frame(x = x, y = as.factor(y)) \nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 1e5 )\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 1e+05)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  1e+05 \n\nNumber of Support Vectors:  3\n\n ( 1 2 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\nplot(svmfit, dat) \n\n\n\n\nNo training errors were made and only three support vectors were used. However, we can see from the figure that the margin is very narrow (because the observations that are not support vectors, indicated as circles, are very close to the decision boundary). It seems likely that this model will perform poorly on test data. We now try a smaller value of cost:\n\nsvmfit <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 1)\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 1)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  1 \n\nNumber of Support Vectors:  7\n\n ( 4 3 )\n\n\nNumber of Classes:  2 \n\nLevels: \n -1 1\n\nplot(svmfit, dat) \n\n\n\n\nUsing cost = 1, we misclassify a training observation, but we also obtain a much wider margin and make use of seven support vectors. It seems likely that this model will perform better on test data than the model with cost = 1e5."
  },
  {
    "objectID": "lab09-svm.html#non-linear-svm",
    "href": "lab09-svm.html#non-linear-svm",
    "title": "Lab 09 SVM",
    "section": "2 Non-linear SVM",
    "text": "2 Non-linear SVM\nIn order to fit an SVM using a non-linear kernel, we once again use the svm() function. However, now we use a diﬀerent value of the parameter kernel.\nTo fit an SVM with a polynomial kernel we use kernel = \"polynomial\", and to fit an SVM with a radial kernel we use kernel = \"radial\". In the former case we also use the degree argument to specify a degree for the polynomial kernel (the degree of “bendiness” in the separator), and in the latter case we use gamma to specify a value of \\(\\gamma\\) for the radial basis kernel. For details on these, see James et al. 2021 Ch 9.\nWe first generate some data with a non-linear class boundary, as follows:\n\nset.seed(1)\nx <- matrix(rnorm(200 * 2), ncol = 2)\nx[1:100, ] <- x [1:100, ] + 2\nx[ 101:150 , ] <- x [101:150, ] - 2\ny <- c(rep(1, 150),  rep(2, 50))\ndat <- data.frame(x = x, y = as.factor(y)) \n\n# always plot\nplot (x, col = y, pch = 16)\n\n\n\n\nThe data is randomly split into training and testing groups. We then fit the training data using the svm() function with a radial kernel and \\(\\gamma\\) = 1:\n\ntrain <- sample(200, 100)\nsvmfit <- svm(y ~ ., data = dat[train, ], \n              kernel = \"radial\", gamma = 1 ,cost = 1)\nplot(svmfit, dat[train, ]) # ok!\n\n\n\n\nThe plot shows that the resulting SVM has a decidedly non-linear boundary. The summary() function can be used to obtain some information about the SVM fit:\n\nsummary(svmfit) \n\n\nCall:\nsvm(formula = y ~ ., data = dat[train, ], kernel = \"radial\", gamma = 1, \n    cost = 1)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  radial \n       cost:  1 \n\nNumber of Support Vectors:  31\n\n ( 16 15 )\n\n\nNumber of Classes:  2 \n\nLevels: \n 1 2\n\n\nWe can see from the figure that there are a fair number of training errors in this SVM fit. If we increase the value of cost, we can reduce the number of training errors. However, this comes at the price of a more irregular decision boundary that seems to be at risk of overfitting the data.\n\nsvmfit <- svm(y ~ ., data = dat[train, ], kernel = \"radial\",\n              gamma = 1, cost = 1e5 )\nplot(svmfit, dat[train, ])\n\n\n\n\n\nTune it\nWe can perform cross-validation using tune() to select the best choice of \\(\\gamma\\) and cost for an SVM with a radial kernel:\n\nset.seed(1)\ntune.out <- tune(svm, y ~ ., data = dat[train, ], kernel = \"radial\",\nranges = list (\n  cost = c (0.1, 1, 10, 100, 1000),\n  gamma = c (0.5, 1, 2, 3, 4)\n  )\n)\nsummary(tune.out)\n\n\nParameter tuning of 'svm':\n\n- sampling method: 10-fold cross validation \n\n- best parameters:\n cost gamma\n    1   0.5\n\n- best performance: 0.07 \n\n- Detailed performance results:\n    cost gamma error dispersion\n1  1e-01   0.5  0.26 0.15776213\n2  1e+00   0.5  0.07 0.08232726\n3  1e+01   0.5  0.07 0.08232726\n4  1e+02   0.5  0.14 0.15055453\n5  1e+03   0.5  0.11 0.07378648\n6  1e-01   1.0  0.22 0.16193277\n7  1e+00   1.0  0.07 0.08232726\n8  1e+01   1.0  0.09 0.07378648\n9  1e+02   1.0  0.12 0.12292726\n10 1e+03   1.0  0.11 0.11005049\n11 1e-01   2.0  0.27 0.15670212\n12 1e+00   2.0  0.07 0.08232726\n13 1e+01   2.0  0.11 0.07378648\n14 1e+02   2.0  0.12 0.13165612\n15 1e+03   2.0  0.16 0.13498971\n16 1e-01   3.0  0.27 0.15670212\n17 1e+00   3.0  0.07 0.08232726\n18 1e+01   3.0  0.08 0.07888106\n19 1e+02   3.0  0.13 0.14181365\n20 1e+03   3.0  0.15 0.13540064\n21 1e-01   4.0  0.27 0.15670212\n22 1e+00   4.0  0.07 0.08232726\n23 1e+01   4.0  0.09 0.07378648\n24 1e+02   4.0  0.13 0.14181365\n25 1e+03   4.0  0.15 0.13540064\n\n\nTherefore, the best choice of parameters involves cost = 1 and gamma = 0.5. We can view the test set predictions for this model by applying the predict() function to the data. Notice that to do this we subset the dataframe dat using -train as an index set.\n\ntable(\n  true = dat[-train, \"y\"], pred = predict (\n    tune.out$best.model, newdata = dat[-train, ]\n    )\n  )\n\n    pred\ntrue  1  2\n   1 67 10\n   2  2 21\n\n\nOnly 12% of test observations are misclassified by this SVM."
  },
  {
    "objectID": "lab09-svm.html#roc-curves",
    "href": "lab09-svm.html#roc-curves",
    "title": "Lab 09 SVM",
    "section": "3 ROC curves",
    "text": "3 ROC curves\nThe {ROCR} package can be used to produce ROC curves (see ch 9 in James et al. 2021). We first write a short function to plot an ROC curve given a vector containing a numerical score for each observation, pred, and a vector containing the class label for each observation, truth.\n\nlibrary(ROCR)\n\nWarning: package 'ROCR' was built under R version 4.1.3\n\n# make function we will use below\nrocplot <- function(pred, truth , ...){\n  predob <- prediction (pred, truth)\n  perf <- performance (predob , \"tpr\", \"fpr\")\n  plot (perf, ...)\n  }\n\nSVMs and support vector classifiers output class labels for each observation. However, it is also possible to obtain fitted values for each observation, which are the numerical scores used to obtain the class labels. For instance, in the case of a support vector classifier, the fitted value for an observation \\(X = (X_1, X_2,. .., X_p)^T\\) takes the form \\(\\hat\\beta_0 + \\hat\\beta_1X_1 + \\hat\\beta_2X_2 + + \\hat\\beta_pX_p\\).\nIn essence, the sign of the fitted value determines on which side of the decision boundary the observation lies. Therefore, the relationship between the fitted value and the class prediction for a given observation is simple: if the fitted value exceeds zero then the observation is assigned to one class, and if it is less than zero then it is assigned to the other. In order to obtain the fitted values for a given SVM model fit, we use decision.values = TRUE when fitting svm(). Then the predict() function will output the fitted values.\n\nsvmfit.opt <- svm(y ~ ., data = dat[train, ], \n                  kernel = \"radial\", gamma = 2, cost = 1, \n                  decision.values = TRUE)\n\n# another utility function\nfitted <- attributes(\n  predict(svmfit.opt, dat[train, ], decision.values = TRUE)\n  )$decision.values\n\nNow we can produce the ROC plot. Note we use the negative of the fitted values so that negative values correspond to class 1 and positive values to class 2.\n\npar(mfrow = c(1, 1))\n\n# gamma = 2\nrocplot(-fitted, dat[train, \"y\"], main = \"Training Data\")\n\nsvmfit.flex <- svm(y ~ ., data = dat [train, ], \n                   kernel = \"radial\", gamma = 50 , \n                   cost = 1, decision.values = T)\n\nfitted <- attributes(\n  predict(svmfit.flex, dat[train, ], decision.values = T)\n  )$decision.values\n\n# gamma = 50\nrocplot(-fitted, dat[train, \"y\"], add = T, col = \"red\")\n\nlegend(x = .6, y=.8,\n       legend = c('gamma = 2', 'gamma = 50'),\n       bty = 'n', col = c(1,2), lty = 1)\n\n\n\n\nThe SVM appears to be producing accurate predictionsmade much better here by increasing \\(\\gamma\\) to produce a more flexible fit and generate further improvements in accuracy.\n\nTrain & TEST\nHowever, these ROC curves are all on the training data. We are really more interested in the level of prediction accuracy on the test data. When we compute the ROC curves on the test data, the model with \\(\\gamma\\) = 2 appears to provide the most accurate results.\n\nfitted <- attributes(\n  predict(svmfit.opt, dat[-train, ], decision.values = T)\n  )$decision.values\n\nrocplot(-fitted, dat[-train , \"y\"], main = \"Test Data\")\n\nfitted <- attributes(\n  predict(svmfit.flex, dat[-train, ], decision.values = T)\n  )$decision.values\n\nrocplot(-fitted, dat[-train , \"y\"], add = T, col = \"red\")\n\nlegend(x = .6, y=.8,\n       legend = c('gamma = 2', 'gamma = 50'),\n       bty = 'n', col = c(1,2), lty = 1)"
  },
  {
    "objectID": "lab09-svm.html#svm-with-multiple-classes",
    "href": "lab09-svm.html#svm-with-multiple-classes",
    "title": "Lab 09 SVM",
    "section": "4 SVM with multiple classes",
    "text": "4 SVM with multiple classes\nIf the response is a factor containing more than two levels, then the svm() function will perform multi-class classification using the one-versus-one approach. We explore that setting here by generating a third class of observations and fit an SVM to the data:\n\npar(mfrow=c(1,2))\n\nset.seed(1)\nx <- rbind(x, matrix(rnorm(50 * 2), ncol = 2))\ny <- c(y, rep(0, 50))\nx[y == 0 , 2] <- x[y == 0 , 2] + 2\n\ndat <- data.frame(x = x, y = as.factor(y)) \npar(mfrow = c(1 , 1))\nplot(x, col = ( y + 1), pch = 16)\n\n\n\n# Fit svm\nsvmfit <- svm (y ~., data = dat, kernel = \"radial\",\n               cost = 10 , gamma = 1)\nplot (svmfit, dat) \n\n\n\n\nThe {e1071} library can also be used to perform support vector regression, if the response vector that is passed in to svm() is numerical rather than a factor."
  },
  {
    "objectID": "lab09-svm.html#gene-expression-example",
    "href": "lab09-svm.html#gene-expression-example",
    "title": "Lab 09 SVM",
    "section": "5 Gene expression example",
    "text": "5 Gene expression example\nWe now examine the Khan data set, which consists of a number of tissue samples corresponding to four distinct types of small round blue cell tumors. For each tissue sample, gene expression measurements are available. The data set consists of training data, xtrain and ytrain, and testing data, xtest and ytest.\nWe examine the dimension of the data:\n\nlibrary(ISLR2)\n\nWarning: package 'ISLR2' was built under R version 4.1.1\n\nlibrary(e1071)\n\nnames(Khan) \n\n[1] \"xtrain\" \"xtest\"  \"ytrain\" \"ytest\" \n\ndim(Khan$xtrain) # lots of features/loci\n\n[1]   63 2308\n\ndim(Khan$xtest) # each row is a patient\n\n[1]   20 2308\n\nlength(Khan$ytrain)\n\n[1] 63\n\nlength(Khan$ytest)\n\n[1] 20\n\n\nThis data set consists of expression measurements for 2,308 genes. The training and test sets consist of 63 and 20 (patient) observations respectively.\n\ntable(Khan$ytrain) # train patient count in each classification\n\n\n 1  2  3  4 \n 8 23 12 20 \n\ntable(Khan$ytest) # test patient count in each classification\n\n\n1 2 3 4 \n3 6 6 5 \n\n\nWe will explore a support vector approach to predict cancer subtype using gene expression measurements. In this data set, there are a very large number of features relative to the number of observations. For this we should use a linear kernel, because the additional flexibility that will result from using a polynomial or radial kernel is unnecessary.\n\ndat <- data.frame(\n  x = Khan$xtrain,\n  y = as.factor(Khan$ytrain )\n  )\n\nout <- svm(y ~ ., data = dat, kernel = \"linear\", cost = 10)\nsummary(out)\n\n\nCall:\nsvm(formula = y ~ ., data = dat, kernel = \"linear\", cost = 10)\n\n\nParameters:\n   SVM-Type:  C-classification \n SVM-Kernel:  linear \n       cost:  10 \n\nNumber of Support Vectors:  58\n\n ( 20 20 11 7 )\n\n\nNumber of Classes:  4 \n\nLevels: \n 1 2 3 4\n\ntable(out$fitted, dat$y) # Boom...?\n\n   \n     1  2  3  4\n  1  8  0  0  0\n  2  0 23  0  0\n  3  0  0 12  0\n  4  0  0  0 20\n\n\nWe see that there are no training errors. In fact, this is not surprising, because the large number of variables relative to the number of observations makes it easy to find hyperplanes that fully separate the classes. We are most interested not in the support vector classifier’s performance on the training observations, but rather its performance on the test observations…\n\ndat.te <- data.frame(x = Khan$xtest, y = as.factor(Khan$ytest))\n\npred.te <- predict(out, newdata = dat.te)\n\ntable(pred.te, dat.te$y) # ok.. not bad*\n\n       \npred.te 1 2 3 4\n      1 3 0 0 0\n      2 0 6 2 0\n      3 0 0 4 0\n      4 0 0 0 5\n\n# *For cancer prediction it is of utmost importance to construct\n# perfect predictions.  This is not just a difficult technical\n# problem, but an ethical one of monumental consequences\n\nWe see that using cost = 10 yields two test set errors on this data."
  },
  {
    "objectID": "lab09-svm.html#exercises",
    "href": "lab09-svm.html#exercises",
    "title": "Lab 09 SVM",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\n\n1.1\nGenerate a simulated two-class data set with 100 observations and two features in which there is a visible but non-linear separation be- tween the two classes. Show that in this setting, a support vector machine with a polynomial kernel (with degree greater than 1) or a radial kernel will outperform a support vector classifier on the training data. Which technique performs best on the test data? Make plots and report training and test error rates in order to back up your assertions.\n\n\n\nExercise 2\nWe have seen that we can fit an SVM with a non-linear kernel in order to perform classification using a non-linear decision boundary. We will now see that we can also obtain a non-linear decision boundary by performing logistic regression using non-linear transformations of the features.\n\n2.1\nGenerate a data set with n = 500 and p = 2, such that the observations belong to two classes with a quadratic decision boundary between them. For instance, you can do this as follows:\n\n# Although it is beyond what is possible in this lab,\n# the practice of simulating data like this is \n# hugely powerful and useful\nx1 <- runif(500) - 0.5\nx2 <- runif(500) - 0.5\ny <- 1 * (x1^2 - x2^2 > 0)\n\n\n\n2.2\nPlot the observations, colored according to their class labels. Your plot should display \\(X_1\\) on the x-axis, and \\(X_2\\) on the y-axis.\n\n\n2.3\nFit a logistic regression model to the data, using \\(X_1\\) and \\(X_2\\) as predictors.\n\n\n2.4\nApply this model to the training data in order to obtain a predicted class label for each training observation. Plot the observations, colored according to the predicted class labels. The decision boundary should be linear.\n\n\n2.5\nNow fit a logistic regression model to the data using non-linear functions of \\(X_1\\) and \\(X_2\\) as predictors (e.g. \\(X^2\\), \\(X_1 \\times X_2\\), log(\\(X_2\\)), and so forth).\n\n\n2.6\nApply this model to the training data in order to obtain a predicted class label for each training observation. Plot the observations, colored according to the predicted class labels. The decision boundary should be obviously non-linear. If it is not, then repeat (2.1)-(2.5) to see if you can come up with an example in which the predicted class labels are obviously non-linear.\n\n\n2.7\nFit a support vector classifier to the data with \\(X_1\\) and \\(X_2\\) as predictors. Obtain a class prediction for each training observation. Plot the observations, colored according to the predicted class labels.\n\n\n2.8\nFit a SVM using a non-linear kernel to the data. Obtain a class prediction for each training observation. Plot the observations, colored according to the predicted class labels.\n\n\n2.9\nComment on your results."
  },
  {
    "objectID": "lab09-svm.html#resources",
    "href": "lab09-svm.html#resources",
    "title": "Lab 09 SVM",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab09-svm.html#harper-adams-data-science",
    "href": "lab09-svm.html#harper-adams-data-science",
    "title": "Lab 09 SVM",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab10-unsupervised.html",
    "href": "lab10-unsupervised.html",
    "title": "Lab 10 Unsupervised",
    "section": "",
    "text": "I just watched an old film called The Man Who Shot Liberty Valance that tells the story of a shockingly lawless time in the American West at some time in the 1800s, which is so long ago that it somehow makes the violence easier to accept. However, the USArrests data are from 1973…\n\nIn this lab, we perform PCA on the USArrests data set, which is part of the base R package. The rows of the data set contain the 50 US states, in alphabetical order.\n\nstates <- row.names(USArrests)\nstates\n\n [1] \"Alabama\"        \"Alaska\"         \"Arizona\"        \"Arkansas\"      \n [5] \"California\"     \"Colorado\"       \"Connecticut\"    \"Delaware\"      \n [9] \"Florida\"        \"Georgia\"        \"Hawaii\"         \"Idaho\"         \n[13] \"Illinois\"       \"Indiana\"        \"Iowa\"           \"Kansas\"        \n[17] \"Kentucky\"       \"Louisiana\"      \"Maine\"          \"Maryland\"      \n[21] \"Massachusetts\"  \"Michigan\"       \"Minnesota\"      \"Mississippi\"   \n[25] \"Missouri\"       \"Montana\"        \"Nebraska\"       \"Nevada\"        \n[29] \"New Hampshire\"  \"New Jersey\"     \"New Mexico\"     \"New York\"      \n[33] \"North Carolina\" \"North Dakota\"   \"Ohio\"           \"Oklahoma\"      \n[37] \"Oregon\"         \"Pennsylvania\"   \"Rhode Island\"   \"South Carolina\"\n[41] \"South Dakota\"   \"Tennessee\"      \"Texas\"          \"Utah\"          \n[45] \"Vermont\"        \"Virginia\"       \"Washington\"     \"West Virginia\" \n[49] \"Wisconsin\"      \"Wyoming\"       \n\n\nThe columns of the data set contain the four variables.\n\nnames(USArrests)\n\n[1] \"Murder\"   \"Assault\"  \"UrbanPop\" \"Rape\"    \n\n\nWe first briefly examine the data. We notice that the variables have vastly different means.\n\napply(USArrests, 2, mean)\n\n  Murder  Assault UrbanPop     Rape \n   7.788  170.760   65.540   21.232 \n\n\nNote that the apply() function allows us use a function, in this case the mean() function, on each row or column of a data set. The second input here denotes whether we wish to compute the mean of the rows, 1, or the columns, 2. We see that there are on average three times as many rapes as murders, and more than eight times as many assaults as rapes.\nWe can also examine the standard deviation of each variable using the apply() function.\n\napply(USArrests, 2, sd)\n\n   Murder   Assault  UrbanPop      Rape \n 4.355510 83.337661 14.474763  9.366385 \n\n\nNot surprisingly, the variables also have vastly different variances: the UrbanPop variable measures the percentage of the population in each state living in an urban area, which is not a comparable number to the number of rapes in each state per 100,000 individuals. If we failed to scale the variables before performing PCA, then most of the principal components that we observed would be driven by the Assault variable, since it has by far the largest mean and variance. Thus, it is important to standardize the variables to have mean zero and standard deviation one before performing PCA.\n\n\nWe now perform principal components analysis using the prcomp() function, which is one of several functions in R that perform PCA.\n\npr.out <- prcomp(USArrests, scale = TRUE)\n\nBy default, the prcomp() function centers the variables to have mean zero. By using the option scale = TRUE, we scale the variables to have standard deviation one. The output from prcomp() contains a number of useful quantities.\n\nnames(pr.out)\n\n[1] \"sdev\"     \"rotation\" \"center\"   \"scale\"    \"x\"       \n\n\nThe center and scale components correspond to the means and standard deviations of the variables that were used for scaling prior to implementing PCA.\n\npr.out$center\n\n  Murder  Assault UrbanPop     Rape \n   7.788  170.760   65.540   21.232 \n\npr.out$scale\n\n   Murder   Assault  UrbanPop      Rape \n 4.355510 83.337661 14.474763  9.366385 \n\n\nThe rotation matrix provides the principal component loadings; each column of pr.out$rotation contains the corresponding principal component loading vector. This function names it the rotation matrix, because when we matrix-multiply the \\(X\\) matrix by pr.out$rotation, it gives us the coordinates of the data in the rotated coordinate system. These coordinates are the principal component scores.\n\npr.out$rotation\n\n                PC1        PC2        PC3         PC4\nMurder   -0.5358995  0.4181809 -0.3412327  0.64922780\nAssault  -0.5831836  0.1879856 -0.2681484 -0.74340748\nUrbanPop -0.2781909 -0.8728062 -0.3780158  0.13387773\nRape     -0.5434321 -0.1673186  0.8177779  0.08902432\n\n\nWe see that there are four distinct principal components. This is to be expected because there are in general min(n 1, p) informative principal components in a data set with n observations and p variables.\nUsing the prcomp() function, we do not need to explicitly multiply the data by the principal component loading vectors in order to obtain the principal component score vectors. Rather the \\(50 \\times 4\\) matrix x has as its columns the principal component score vectors. That is, the kth column is the kth principal component score vector.\n\ndim(pr.out$x)\n\n[1] 50  4\n\n\n\n\n\nWe can plot the first two principal components as follows:\n\n# State name labels:\n# the coordinates of the pc1 and pc2 scores\n\n# The vectors:\n# the coordinates of the pc1 and pc2 rotation\n\nbiplot(pr.out, scale = 0)\n\n\n\n\nThe scale = 0 argument to biplot() ensures that the arrows are scaled to represent the loadings; other values for scale give slightly diﬀerent biplots with different interpretations.\n\n\n\nThe variance explained by each principal component is obtained by squaring the standard deviations:\n\npr.var <- pr.out$sdev^2\npr.var\n\n[1] 2.4802416 0.9897652 0.3565632 0.1734301\n\n\nIt is often useful to understand the proportion of variance explained by each principal component, we simply divide the variance explained by each principal component by the total variance explained by all four principal components:\n\npve <- pr.var / sum(pr.var)\npve\n\n[1] 0.62006039 0.24744129 0.08914080 0.04335752\n\n\nWe see that the first principal component explains 62.0% of the variance in the data, the next principal component explains 24.7% of the variance, and so forth. We can plot the PVE explained by each component, as well as the cumulative PVE, as follows:\n\npar(mfrow = c(1, 2))\n\nplot (pve, xlab = \"Principal Component\",\n      ylab = \"Proportion of Variance Explained\", \n      ylim = c(0, 1) , type = \"b\",\n      pch = 16, col = 'red')\n\nplot(cumsum(pve), xlab = \"Principal Component\",\n     ylab = \"Cumulative Proportion of Variance Explained\", \n     ylim = c(0, 1) , type = \"b\",\n     pch = 16, col = 'blue')\n\n\n\n\n\n\n\n\na <- c(1, 2, 8, -3)\ncumsum(a)\n\n[1]  1  3 11  8"
  },
  {
    "objectID": "lab10-unsupervised.html#matrix-completion",
    "href": "lab10-unsupervised.html#matrix-completion",
    "title": "Lab 10 Unsupervised",
    "section": "2 Matrix completion",
    "text": "2 Matrix completion\nWe now analyse the USArrests data. We turn the data frame into a matrix, after centering and scaling each column to have a mean of zero and a variance of one.\n\nX <- data.matrix(scale(USArrests))\npcob <- prcomp(X) \nsummary(pcob) \n\nImportance of components:\n                          PC1    PC2     PC3     PC4\nStandard deviation     1.5749 0.9949 0.59713 0.41645\nProportion of Variance 0.6201 0.2474 0.08914 0.04336\nCumulative Proportion  0.6201 0.8675 0.95664 1.00000\n\n\n\nsvd()\nA short digression is how PCA works mathematically. Solving a centered and scaled matrix of data to discover the axis of variation specific to each principal component is called singular value composition, SVD for short. Of course, we can do this in R too.\n\nsX <- svd(X)\n\n# v is equivalent to the loadings matrix in pca()\nnames(sX)\n\n[1] \"d\" \"u\" \"v\"\n\n# NB the value magnitudes are equal to pca loadings\nround(sX$v, 3)\n\n       [,1]   [,2]   [,3]   [,4]\n[1,] -0.536  0.418 -0.341  0.649\n[2,] -0.583  0.188 -0.268 -0.743\n[3,] -0.278 -0.873 -0.378  0.134\n[4,] -0.543 -0.167  0.818  0.089\n\n\nThe svd() function returns three components, u, d, and v. The matrix v is equivalent to the loading matrix from principal components.\n\nround(pcob$rotation, 3)\n\n            PC1    PC2    PC3    PC4\nMurder   -0.536  0.418 -0.341  0.649\nAssault  -0.583  0.188 -0.268 -0.743\nUrbanPop -0.278 -0.873 -0.378  0.134\nRape     -0.543 -0.167  0.818  0.089\n\n\nThe matrix u is equivalent to the matrix of standardized scores, and the standard deviations are in the vector d. We can recover the score vectors using the output of svd(). They are identical to the score vectors output by prcomp().\n\n# <3 matrix tricks\n\n# just first 5 rows\nround(t(sX$d * t(sX$u))[1:5, ], 3)\n\n       [,1]   [,2]   [,3]   [,4]\n[1,] -0.976  1.122 -0.440  0.155\n[2,] -1.931  1.062  2.020 -0.434\n[3,] -1.745 -0.738  0.054 -0.826\n[4,]  0.140  1.109  0.113 -0.181\n[5,] -2.499 -1.527  0.593 -0.339\n\nround(pcob$x[1:5, ], 3)\n\n              PC1    PC2    PC3    PC4\nAlabama    -0.976  1.122 -0.440  0.155\nAlaska     -1.931  1.062  2.020 -0.434\nArizona    -1.745 -0.738  0.054 -0.826\nArkansas    0.140  1.109  0.113 -0.181\nCalifornia -2.499 -1.527  0.593 -0.339\n\n\nNote it is possible to just carry out this using the prcomp() function, here we use the svd() function in order to illustrate its use."
  },
  {
    "objectID": "lab10-unsupervised.html#k-mean-clustering",
    "href": "lab10-unsupervised.html#k-mean-clustering",
    "title": "Lab 10 Unsupervised",
    "section": "3 K-mean clustering",
    "text": "3 K-mean clustering\nThe function kmeans() performs K-means clustering in R. We begin with a simple simulated example in which there truly are two clusters in the data: the first 25 observations have a mean shift relative to the next 25 observations.\n\nset.seed(2)\nx <- matrix(rnorm(50 * 2), ncol = 2) # fake\n\n# manufacture one cluster\nx[1:25, 1] <- x[1:25, 1] + 3\n\n# different cluster\nx[1:25, 2] <- x[1:25, 2] - 4\n\n# viz\npar(mfrow=c(1,1))\nplot(x, pch = 16, col = 'goldenrod',\n     main = 'Can you see any clusters?')\n\n\n\n\nWe now perform K-means clustering with K = 2.\n\n# YOU pick how many clusters with the centers arg.\nkm.out <- kmeans(x, centers = 2, nstart = 20)\n\n# predicted clusters\nkm.out$cluster\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2\n\n\nK-means clustering perfectly separates the observations into two clusters even though we did not supply any group information to kmeans(). We can plot the data, with each observation colored according to its cluster assignment.\n\nplot (x, col = (km.out$cluster),\n      main = \"K- Means Clustering Results with K = 2\", \n      xlab = \"\", ylab = \"\", pch = 20 , cex = 2)\n\n\n\n\nHere the observations can be easily plotted because they are two-dimensional. If there were more than two variables then we could instead perform PCA and plot the first two principal components score vectors.\nIn this example, we knew that there really were two clusters because we generated the data. However, for real data, in general we do not know the true number of clusters. We could instead have performed K-means clustering on this example with K = 3.\n\nset.seed(4)\nkm.out <- kmeans(x, 3, nstart = 20)\nkm.out\n\nK-means clustering with 3 clusters of sizes 17, 23, 10\n\nCluster means:\n        [,1]        [,2]\n1  3.7789567 -4.56200798\n2 -0.3820397 -0.08740753\n3  2.3001545 -2.69622023\n\nClustering vector:\n [1] 1 3 1 3 1 1 1 3 1 3 1 3 1 3 1 3 1 1 1 1 1 3 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 3 2 3 2 2 2 2\n\nWithin cluster sum of squares by cluster:\n[1] 25.74089 52.67700 19.56137\n (between_SS / total_SS =  79.3 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n\nplot (x, col = (km.out$cluster),\n      main = \"K- Means Clustering Results with K = 3\", \n      xlab = \"\", ylab = \"\", pch = 20 , cex = 2)\n\n\n\n\nWhen K = 3, K-means clustering splits up the “manufactured” clusters.\n\nImproving kmeans()\nTo run the kmeans() function in R with multiple initial cluster assignments, we use the nstart argument. If a value of nstart greater than one is used, then K-means clustering will be performed using multiple random assignments, and the kmeans() function will report only the best results. Here we compare using nstart = 1 to nstart = 20.\n\nset.seed(4)\nkm.out <- kmeans (x, 3, nstart = 1)\nkm.out$tot.withinss\n\n[1] 104.3319\n\nset.seed(4)\nkm.out <- kmeans(x, 3, nstart = 20)\nkm.out$tot.withinss\n\n[1] 97.97927\n\n\nNote that km.out$tot.withinss is the total within-cluster sum of squares, which we seek to minimize by performing K-means clustering. The individual within-cluster sum-of-squares are contained in the vector km.out$withinss.\nIt is strongly recommend to always run K-means clustering with a large value of nstart, such as 20 or 50, since otherwise an undesirable local optimum may be obtained.\nWhen performing K-means clustering, in addition to using multiple initial cluster assignments, it is also important to set a random seed using the set.seed() function. This way, the initial cluster assignments in Step 1 can be replicated, and the K-means output will be fully reproducible."
  },
  {
    "objectID": "lab10-unsupervised.html#hierarchical-clustering",
    "href": "lab10-unsupervised.html#hierarchical-clustering",
    "title": "Lab 10 Unsupervised",
    "section": "4 Hierarchical Clustering",
    "text": "4 Hierarchical Clustering\nHierarchical clustering attempts to identify “splits” in variable values that partition data into classifications based on associated values.\n\nhclust()\nThe hclust() function implements hierarchical clustering in R. In the following example we use the data from the previous lab to plot the hierarchical clustering “dendrogram” using complete, single, and average linkage clustering, with Euclidean distance (straight-line distance between points) as the dissimilarity measure. We begin by clustering observations using complete linkage.\n\n\ndist()\nThe dist() function is used to compute the 50 × 50 inter-observation Euclidean distance matrix.\n\nhc.complete <- hclust(dist(x), method = \"complete\")\n\nThere are several methods used; We could just as easily perform hierarchical clustering with average or single linkage instead:\n\nhc.average <- hclust(dist(x), method = \"average\")\nhc.single <- hclust(dist(x), method = \"single\")\n\nWe can now plot the dendrograms obtained using the usual plot() function. The numbers at the bottom of the plot identify each observation.\n\npar (mfrow = c(1 , 3))\n\nplot (hc.complete, main = \"Complete Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\nplot (hc.average, main = \"Average Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\nplot (hc.single, main = \"Single Linkage\", \n        xlab = \"\", sub = \"\", cex = .9)\n\n\n\n\n\n\ncutree()\nTo determine the cluster labels for each observation associated with a given cut of the dendrogram, we can use the cutree() function:\n\n# the methods may differ in IDed clusters\ncutree(hc.complete, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2\n[39] 2 2 2 2 2 2 2 2 2 2 2 2\n\ncutree(hc.average, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 1 2 2 2 2 2\n[39] 2 2 2 2 2 1 2 1 2 2 2 2\n\ncutree(hc.single, 2)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nThe second argument to cutree() is the number of clusters we wish to obtain. For this data, complete and average linkage generally separate the observations into their correct groups. However, single linkage identifies one point as belonging to its own cluster. A more sensible answer is obtained when four clusters are selected, although there are still two singletons.\n\ncutree(hc.single, 4)\n\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 3 3 3 3 3 3\n[39] 3 3 3 4 3 3 3 3 3 3 3 3\n\n\n\n\nscale()\nWe know analyzing variables of different scale and variance can affect your analysis. To scale the variables before performing hierarchical clustering of the observations, we use the scale() function:\n\npar(mfrow=c(1,1))\nxsc <- scale(x)\nplot( hclust(dist(xsc), method = \"complete\"), \n      main = \"Hierarchical Clustering with Scaled Features\")\n\n\n\n\n\n\nas.dist()\nCorrelation-based distance can be computed using the as.dist() function, which converts an arbitrary square symmetric matrix into a form that the hclust() function recognizes as a distance matrix. However, this only makes sense for data with at least three features since the absolute correlation between any two observations with measurements on two features is always 1. Hence, we will cluster a three-dimensional data set. This data set does not contain any true clusters.\n\nx <- matrix(rnorm(30 * 3), ncol = 3)\n\n# explore the nesting if you wish\ndd <- as.dist(1 - cor(t(x))) \n\nplot(hclust(dd, method = \"complete\"), \n       main = \"Complete Linkage with Correlation - Based Distance\", \n       xlab = \"\", sub = \"\")"
  },
  {
    "objectID": "lab10-unsupervised.html#data-story-genomics-data",
    "href": "lab10-unsupervised.html#data-story-genomics-data",
    "title": "Lab 10 Unsupervised",
    "section": "5 Data story: genomics data",
    "text": "5 Data story: genomics data\n\nNC160 data\nUnsupervised techniques are often used in the analysis of genomic data. In particular, PCA and hierarchical clustering are popular tools. We illustrate these techniques on the NCI60 cancer cell line microarray data, which consists of 6,830 gene expression measurements on 64 cancer cell lines.\nThe question here is whether there are any genes that cluster by cell line.\n\nlibrary(ISLR2)\n\nWarning: package 'ISLR2' was built under R version 4.1.1\n\nnci.labs <- NCI60$labs\nnci.data <- NCI60$data\n\nEach cell line is labeled with a cancer type, given in nci.labs. We do not make use of the cancer types in performing PCA and clustering, as these are unsupervised techniques. But after performing PCA and clustering, we will check to see the extent to which these cancer types agree with the results of these unsupervised techniques.\nThe data has 64 rows and 6,830 columns.\n\ndim(nci.data)\n\n[1]   64 6830\n\n\nWe begin by examining the cancer types for the cell lines.\n\n# cancer type labels for the lines\nnci.labs[1:4]\n\n[1] \"CNS\"   \"CNS\"   \"CNS\"   \"RENAL\"\n\n# count of types\ntable(nci.labs) \n\nnci.labs\n     BREAST         CNS       COLON K562A-repro K562B-repro    LEUKEMIA \n          7           5           7           1           1           6 \nMCF7A-repro MCF7D-repro    MELANOMA       NSCLC     OVARIAN    PROSTATE \n          1           1           8           9           6           2 \n      RENAL     UNKNOWN \n          9           1 \n\n\n\n\nPCA NC160\nWe first perform PCA on the data after scaling the variables (genes) to have standard deviation one, although one might reasonably argue that it is better not to scale the genes (i.e. this is somewhat subjective).\n\npr.out <- prcomp(nci.data, scale = TRUE)\n\nWe now plot the first few principal component score vectors, in order to visualize the data. The observations (cell lines) corresponding to a given cancer type will be plotted in the same color, so that we can see to what extent the observations within a cancer type are similar to each other. We first create a simple function that assigns a distinct color to each element of a numeric vector. The function will be used to assign a color to each of the 64 cell lines, based on the cancer type to which it corresponds.\n\n\nrainbow() function\n\n# make function to set different colour palette for categories\nCols <- function(vec){\n  cols <- rainbow(length(unique(vec)))\n  return(cols[as.numeric(as.factor(vec))])\n  }\n\nNote that the rainbow() function takes as its argument a positive integer, and returns a vector containing that number of distinct colors. We now can plot the principal component score vectors.\n\npar(mfrow = c(1, 2))\n\n# visualization of clusters for PC1 and PC2\nplot(pr.out$x[ , 1:2], col = Cols(nci.labs), pch = 19, \n     xlab = \"Z1\", ylab = \"Z2\")\n\n# visualization of clusters for PC1 and PC3\nplot (pr.out$x[ , c(1, 3)], col = Cols (nci.labs), pch = 19, \n      xlab = \"Z1\", ylab = \"Z3\")\n\n\n\n\nOn the whole, cell lines corresponding to a single cancer type do tend to have similar values on the first few principal component score vectors. This indicates that cell lines from the same cancer type tend to have pretty similar gene expression levels.\nWe can obtain a summary of the proportion of variance explained (PVE) of the first few principal components using the summary() method for a prcomp object:\n\n# just slice out first 5 PCs to peek\nsummary(pr.out)$importance[, 1:5]\n\n                            PC1      PC2      PC3      PC4      PC5\nStandard deviation     27.85347 21.48136 19.82046 17.03256 15.97181\nProportion of Variance  0.11359  0.06756  0.05752  0.04248  0.03735\nCumulative Proportion   0.11359  0.18115  0.23867  0.28115  0.31850\n\n\nUsing the plot() function, we can also plot the variance explained by the first few principal components.\n\npar(mfrow=c(1,1))\nplot(pr.out, xlab = 'PC1 through PC10')\n\n\n\n\n\n\nFancier var plots\nNote that the height of each bar in the bar plot is given by squaring the corresponding element of pr.out$sdev. However, it is more informative to plot the PVE of each principal component (i.e. a scree plot) and the cumulative PVE of each principal component. This can be done with just a little work.\n\npve <- 100 * pr.out$sdev^2 / sum(pr.out$sdev^2)\npar(mfrow = c(1, 2))\nplot(pve, type = \"o\", \n     ylab = \"PVE\", xlab = \"Principal Component\", \n     pch = 16, col = \"red\")\nplot(cumsum(pve), type = \"o\", \n     ylab = \"Cumulative PVE\", xlab = \"Principal Component\", \n      pch = 16, col = \"blue\")\n\n\n\n\nWe see that together, the first seven principal components explain around 40% of the variance in the data. This is not a huge amount of the variance. However, looking at the scree plot, we see that while each of the first seven principal components explain a substantial amount of variance, there is a marked decrease in the variance explained by further principal components. That is, there is an elbow in the plot after approximately the seventh principal component. This suggests that there may be little benefit to examining more than seven or so principal components (though even examining seven principal components may be difficult in itself).\n\n\nclustering NC160\nWe now proceed to hierarchically cluster the cell lines in the NCI60 data, with the goal of finding out whether or not the observations cluster into distinct types of cancer. To begin, we standardize the variables to have mean zero and standard deviation one. As mentioned earlier, this step is optional and should be performed only if we want each gene to be on the same scale.\n\nsd.data <- scale(nci.data )\n\nWe now perform hierarchical clustering of the observations using complete, single, and average linkage. Euclidean distance is used as the dissimilarity measure.\n\npar(mfrow = c(1,3))\n\ndata.dist <- dist(sd.data)\nplot(hclust(data.dist), xlab = \"\", sub = \"\", ylab = \"\", \n     labels = nci.labs, main = \"Complete Linkage\")\n\nplot(hclust(data.dist, method = \"average\"),\n     labels = nci.labs, main = \"Average Linkage\", \n     xlab = \"\", sub = \"\", ylab = \"\")\n\nplot(hclust(data.dist, method = \"single\"), \n     labels = nci.labs , main = \"Single Linkage\", \n     xlab = \"\", sub = \"\", ylab = \"\")\n\n\n\n\nThese figures are not aesthetically pleasing, but we can still see that the three methods resulted in very different clustering.\nTypically, single linkage will tend to yield “trailing” clusters: very large clusters onto which individual observations attach one-by-one. On the other hand, complete and average linkage tend to yield more balanced, attractive clusters. For this reason, complete and average linkage are generally preferred to single linkage. Clearly cell lines within a single cancer type do tend to cluster together, although the clustering is not perfect. We will use complete linkage hierarchical clustering for the analysis that follows.\n\n\nCutting clusters\nWe can cut the dendrogram at the height that will yield a particular number of clusters, say four:\n\nhc.out <- hclust(dist(sd.data ))\nhc.clusters <- cutree (hc.out, 4)\ntable(hc.clusters , nci.labs )\n\n           nci.labs\nhc.clusters BREAST CNS COLON K562A-repro K562B-repro LEUKEMIA MCF7A-repro\n          1      2   3     2           0           0        0           0\n          2      3   2     0           0           0        0           0\n          3      0   0     0           1           1        6           0\n          4      2   0     5           0           0        0           1\n           nci.labs\nhc.clusters MCF7D-repro MELANOMA NSCLC OVARIAN PROSTATE RENAL UNKNOWN\n          1           0        8     8       6        2     8       1\n          2           0        0     1       0        0     1       0\n          3           0        0     0       0        0     0       0\n          4           1        0     0       0        0     0       0\n\n\nThere are some clear patterns. All the leukemia cell lines fall in cluster 3, while the breast cancer cell lines are spread out over three different clusters. We can plot the cut on the dendrogram that produces these four clusters:\n\npar(mfrow = c(1, 1))\nplot (hc.out, labels = nci.labs )\nabline(h = 139, col = \"red\")\n\n\n\n\nThe abline() function draws a straight line on top of any existing plot in R. The argument h = 139 plots a horizontal line at height 139 on the dendrogram; this is the height that results in four distinct clusters. It is easy to verify that the resulting clusters are the same as the ones we obtained using cutree(hc.out, 4).\nPrinting the output of hclust gives a useful brief summary of the object:\n\nhc.out\n\n\nCall:\nhclust(d = dist(sd.data))\n\nCluster method   : complete \nDistance         : euclidean \nNumber of objects: 64 \n\n\nK-means clustering and hierarchical clustering with the dendrogram cut to obtain the same number of clusters can yield very diﬀerent results. How do these NCI60 hierarchical clustering results compare to what we get if we perform K-means clustering with K = 4?\n\nset.seed (2)\nkm.out <- kmeans(sd.data, 4, nstart = 20)\nkm.clusters <- km.out$cluster\ntable(km.clusters, hc.clusters ) \n\n           hc.clusters\nkm.clusters  1  2  3  4\n          1 11  0  0  9\n          2 20  7  0  0\n          3  9  0  0  0\n          4  0  0  8  0\n\n\nWe see that the four clusters obtained using hierarchical clustering and K-means clustering are somewhat diﬀerent. Cluster 4 in K-means clustering is identical to cluster 3 in hierarchical clustering. However, the other clusters diﬀer: for instance, cluster 2 in K-means clustering contains a portion of the observations assigned to cluster 1 by hierarchical clustering, as well as all of the observations assigned to cluster 2 by hierarchical clustering.\nRather than performing hierarchical clustering on the entire data matrix, we can simply perform hierarchical clustering on the first few principal component score vectors, as follows:\n\nhc.out <- hclust(dist(pr.out$x[, 1:5]) )\nplot (hc.out, labels = nci.labs,\n      main = \"Hier. Clust. on First Five Score Vectors\")\n\n\n\ntable(cutree(hc.out, 4), nci.labs )\n\n   nci.labs\n    BREAST CNS COLON K562A-repro K562B-repro LEUKEMIA MCF7A-repro MCF7D-repro\n  1      0   2     7           0           0        2           0           0\n  2      5   3     0           0           0        0           0           0\n  3      0   0     0           1           1        4           0           0\n  4      2   0     0           0           0        0           1           1\n   nci.labs\n    MELANOMA NSCLC OVARIAN PROSTATE RENAL UNKNOWN\n  1        1     8       5        2     7       0\n  2        7     1       1        0     2       1\n  3        0     0       0        0     0       0\n  4        0     0       0        0     0       0\n\n\nNot surprisingly, these results are diﬀerent from the ones that we obtained when we performed hierarchical clustering on the full data set. Sometimes performing clustering on the first few principal component score vectors can give better results than performing clustering on the full data. In this situation, we might view the principal component step as one of “denoising” the data. We could also perform K-means clustering on the first few principal component score vectors rather than the full data set."
  },
  {
    "objectID": "lab10-unsupervised.html#exercises",
    "href": "lab10-unsupervised.html#exercises",
    "title": "Lab 10 Unsupervised",
    "section": "6 Exercises",
    "text": "6 Exercises\n\nExercise 1\nWe mentioned the use of correlation-based distance and Euclidean distance as dissimilarity measures for hierarchical clustering. It turns out that these two measures are almost equivalent: if each observation has been centered to have mean zero and standard deviation one, and if we let \\(r_{ij}\\) denote the correlation between the ith and jth observations, then the quantity \\(1-r_{ij}\\) is proportional to the squared Euclidean distance between the \\(i^{th}\\) and \\(j^{th}\\) observations.\nOn the USArrests data, can you explore the data to show that this proportionality holds?\nHint: The Euclidean distance can be calculated using the dist() function, and correlations can be calculated using the cor() function.\n\n\nExercise 2\nWe also saw that the PVE can be obtained using the sdev output of the prcomp() function.\nOn the USArrests data, calculate PVE by using the sdev output of the prcomp() function\n\n\nExercise 3\nConsider the USArrests data. We will now perform hierarchical clustering on the states.\n\n3.1\nUsing hierarchical clustering with complete linkage and Euclidean distance, cluster the states.\n\n\n3.2\nCut the dendrogram at a height that results in three distinct clusters. Which states belong to which clusters?\n\n\n3.3\nHierarchically cluster the states using complete linkage and Euclidean distance, after scaling the variables to have standard deviation one.\n\n\n3.4\nWhat effect does scaling the variables have on the hierarchical clustering obtained? In your opinion, should the variables be scaled before the inter-observation dissimilarities are computed? Provide a justification for your answer."
  },
  {
    "objectID": "lab10-unsupervised.html#resources",
    "href": "lab10-unsupervised.html#resources",
    "title": "Lab 10 Unsupervised",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab10-unsupervised.html#harper-adams-data-science",
    "href": "lab10-unsupervised.html#harper-adams-data-science",
    "title": "Lab 10 Unsupervised",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lec00-module-intro.html#section",
    "href": "lec00-module-intro.html#section",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "",
    "text": "C7081 Statistical Analysis for Data Science\nEd Harris"
  },
  {
    "objectID": "lec00-module-intro.html#module-overview",
    "href": "lec00-module-intro.html#module-overview",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Module overview",
    "text": "Module overview\n\n\n\n\n“I am always ready to learn although I do not always like being taught.”\n\n-Winston Churchill"
  },
  {
    "objectID": "lec00-module-intro.html#module-overview-1",
    "href": "lec00-module-intro.html#module-overview-1",
    "title": "C7081-2022 Statistical analysis for data science",
    "section": "Module overview",
    "text": "Module overview\n\n\nOne week intensive format\nDaily catch-up meetings\nRecorded lectures, readings\nLabs are critical"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "The material in this module is designed to be experienced in an intensive one week format followed by an assessment meant to showcase data science skills (e.g. a github project website that could be part of your cv). For enrolled students, the work will be supported with several live sessions during the main week of delivery.\n\n\n\n\nDay\nTopics\nLabs\nReadings\n\n\n\n\nInduction\n welcome activity \nLab welcome exercise\n\n\n\nMon\nlive:\n am\n pm\n*lecture videos password: data4life\n 00 Module overview\n 01 Introduction 1.1 1.2\n 02 Statistical learning 2.1 2.2\nLab guidance\nLab 01 Linear algebra fun\nLab 02 R programming refresh\nJames et al. 2021 Ch 1,2\nEfron 2020\n\n\nTues\n am\n pm\n 03 Linear regression 3.1 3.2\n 04 Classification 4.1 4.2\nLab 03 Linear regression\nLab 04 Classification\nJames et al. 2021 Ch 3,4\nMelesse 2018\n\n\nWed\n am\n pm\n 05 Bootstrapping 5.1 5.2\n 06 Model selection 6.1 6.2 6.3\nLab 05 Resampling\nLab 06 Model selection\nJames et al. 2021 Ch 5,6\nAho 2014\n\n\nThurs\n(no vid) am\n(no vid) pm\n 07 Non-linear models 7.1 7.2\n 08 Decision trees 8.1 8.2 8.3 8.4\nLab 07 Non-linear models\nLab 08 Decision trees\nJames et al. 2021 Ch 7,8\nBarnard 2019\nOtukei 2010\n\n\nFri\nam\npm\n 09 Support vector machines 9.1 9.2\n 10 Unsupervised learning 10.1 10.2 10.3\nLab 09 SVM\nLab 10 Unsupervised learning\nJames et al. 2021 Ch 9,12\nEbrahimi 2017\nHowell 2020"
  },
  {
    "objectID": "schedule.html#references",
    "href": "schedule.html#references",
    "title": "Schedule",
    "section": "References",
    "text": "References\nTextbook: James et al. 2021 Introduction to statistical learning 2ed\nall refs zip\nAho, K., Derryberry, D., Peterson, T., 2014. Model selection for ecologists: the worldviews of AIC and BIC. Ecology 95, 631–636.\nBarnard, D.M., Germino, M.J., Pilliod, D.S., Arkle, R.S., Applestein, C., Davidson, B.E., Fisk, M.R., 2019. Cannot see the random forest for the decision trees: selecting predictive models for restoration ecology. Restoration Ecology 27, 1053–1063.\nEbrahimi, M.A., Khoshtaghaza, M.H., Minaei, S., Jamshidi, B., 2017. Vision-based pest detection based on SVM classification method. Computers and Electronics in Agriculture 137, 52–58.\nEfron, B., 2020. Prediction, Estimation, and Attribution. Journal of the American Statistical Association 115, 636–655.\nHowell, O., Wenping, C., Marsland, R., Mehta, P., 2020. Machine learning as ecology. J. Phys. A: Math. Theor. 53, 334001.\nJames, G., Witten, D., Hastie, T., Tibshirani, R., 2021. An Introduction to Statistical Learning: with Applications in R, Springer Texts in Statistics 2ed. Springer-Verlag, New York.\nMelesse, S., Sobratee, N., Workneh, T., 2016. Application of logistic regression statistical technique to evaluate tomato quality subjected to different pre- and post-harvest treatments. Biological Agriculture & Horticulture 32, 277–287.\nOtukei, J.R., Blaschke, T., 2010. Land cover change assessment using decision trees, support vector machines and maximum likelihood classification algorithms. International Journal of Applied Earth Observation and Geoinformation, Supplement Issue on “Remote Sensing for Africa – A Special Collection from the African Association for Remote Sensing of the Environment (AARSE)” 12, S27–S31."
  },
  {
    "objectID": "schedule.html#harper-adams-data-science",
    "href": "schedule.html#harper-adams-data-science",
    "title": "Schedule",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab00-guidance.html",
    "href": "lab00-guidance.html",
    "title": "Lab Guidance",
    "section": "",
    "text": "There are several recommendations you should follow to get the most out of these exercises and this module as a whole.\n\nSet up a separate script for each lab (e.g. an R script) to organize and document your work\nAnswer each question formally and fully\nUse a fully commented, reproducible script style with a Header, Contents, and clickable Section blocks. This will help you practice Best Practice (see what I did there?), and will make the script useful to yourself in the future as a reference (e.g., the next time you want to set up a K means analysis script…)\nType 100% of your own code: do not copy and paste anything (practice, practice + troubleshooting error messages for typos and other issues)\nConsider writing your lab scripts using R Markdown\nConsider setting up a Github repository for your lab scripts"
  },
  {
    "objectID": "lab00-guidance.html#harper-adams-data-science",
    "href": "lab00-guidance.html#harper-adams-data-science",
    "title": "Lab Guidance",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab00-welcome.html",
    "href": "lab00-welcome.html",
    "title": "Lab Welcome",
    "section": "",
    "text": "Yanai et al 2021 :: R script :: Markdown :: final data xlsx"
  },
  {
    "objectID": "lab00-welcome.html#lab-welcome-exercise",
    "href": "lab00-welcome.html#lab-welcome-exercise",
    "title": "Lab Welcome",
    "section": "Lab welcome exercise",
    "text": "Lab welcome exercise\nThis is a simple activity with a few parts to help get you into the mindset of practicing working with data. We will be doing work to allow you to use some specific skills, but the real point of this exercise is to begin to think about beginning to take responsibility for information you construct using data."
  },
  {
    "objectID": "lab00-welcome.html#bmi-data",
    "href": "lab00-welcome.html#bmi-data",
    "title": "Lab Welcome",
    "section": "1 BMI data",
    "text": "1 BMI data\n\n\n\n\nBMI chart\n\n\n\nThe Body Mass Index (BMI) is a numerical scale intended as a rough guideline to body weight relative to body size. There are a number of assumptions underlying the scale, and the BMI is considered imperfect, but is in wide use.\nThe BMI is calculated thus:\n\\(BMI = \\frac{weight(Kg)}{height(m^2)}\\)\nYou can calculate your own BMI here"
  },
  {
    "objectID": "lab00-welcome.html#data-should-be-tidy",
    "href": "lab00-welcome.html#data-should-be-tidy",
    "title": "Lab Welcome",
    "section": "2 Data should be tidy",
    "text": "2 Data should be tidy\n\n\n\n\nData should be tidy, like your room\n\n\n\nThe concept of tidy data is popular and widely considered best practice. The concept has been summarized in a highly cited paper by Wickham (2014).\nThe essence of the Tidy Data concept is:\n\nSimple data structure, one observation per row\nSimple variable names (informative, short, no spaces, weird characters)\nData explanation or “Data Dictionary” present\nNo extraneous information (like figures, summaries) embedded with the data storage"
  },
  {
    "objectID": "lab00-welcome.html#exercises",
    "href": "lab00-welcome.html#exercises",
    "title": "Lab Welcome",
    "section": "3 Exercises",
    "text": "3 Exercises\n\n3.1 Make tidy data\nUse the following tab-delimited data files: bmi_f.txt bmi_m.txt\nThe data look like this:\n\n\n\nbmi_f.txt\n\n\n\nID, subject ID within each file\nsteps, # steps / wk past 16 weeks\nbmi, bmi measure\nsex is indicated implicitly by males and females data being separated in different files\n\nYour task:\n\nConvert the data to a tidy data format in a single .xlsx file\nDo this using only R code\nData dictionary may be added with code or “manually”\nWe will scrutinize and discuss\n\n\n\n3.2 Analyse BMI data\nConsider three specific hypotheses:\n\nthat there is a statistically significant difference in the average number of steps taken by men and women\nthat there is a negative correlation between the number of steps and the BMI for women\nthat this correlation is positive for men\n\n\nPerform analysis ~30 mins\nDo not speak to others\nWe will discuss of findings as a group\n\n\n\n3.3 Make a data report using markdown\n\nMarkdown is a language\nR markdown is “R flavoured Markdown”\nFormat a “dynamic” report using R Markdown\n\nThe task here is to create a very brief report of your BMI analysis and findings, using R Markdown. The point here is really just to practice markdown and think of how to communicate results to others.\nA markdown document is “freeform” ; the structure I suggest here is a minimal example for good practice.\nTitle + other details - descriptive title, set in the YAML (“YAML ain’t Markup Language”: recursive acronym…) header Summary of major findings - written LAST\nBackground - like the introduction section in a scientific paper. The most important part is a list of OBJECTIVES\nResults Graphs, stats results, terse, clear, technical style\nBibliography (if relevant) References are usually cited in Background, or possibly in Results if there are methods citations\n\nMake your own report (~45 mins)\nStart a new R Markdown document in RStudio, HTML output (NB pdf, word options)\nStructured your doc with the sections: Title, Summary, Background, Results, Bibliography\nThere are usually several “unseen” sections that may contain your R code in code chunks\nWe will discuss and critique resulting reports and code (~45 mins)"
  },
  {
    "objectID": "lab00-welcome.html#resources",
    "href": "lab00-welcome.html#resources",
    "title": "Lab Welcome",
    "section": "Resources",
    "text": "Resources\nR Bootcamp Markdown page"
  },
  {
    "objectID": "lab00-welcome.html#harper-adams-data-science",
    "href": "lab00-welcome.html#harper-adams-data-science",
    "title": "Lab Welcome",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab01-lin-alg.html",
    "href": "lab01-lin-alg.html",
    "title": "Lab 01 Linear alg.",
    "section": "",
    "text": "Linear algebra is the (math) foundation of statistics and data science. While it is possible to practice data analysis without a robust knowledge of algebra, a little bit helps. The purpose here is to highlight and review the key linear algebra concepts and to demonstrate a few examples. By the end of this lab you should be able to:\n\nDescribe the structure of vectors and matrices\nPerform math functions with linear algebra structures\nDemonstrate awareness of linear algebra utility"
  },
  {
    "objectID": "lab01-lin-alg.html#vectors",
    "href": "lab01-lin-alg.html#vectors",
    "title": "Lab 01 Linear alg.",
    "section": "2 Vectors",
    "text": "2 Vectors\n\n2.1 The basic vector concept\nVectors can be conceptualized as a list of numerical values (elements) that may be arranged in columns or rows. A formal difference between column and row vectors is the notation for their arrangement, where a vector has n elements, a row vector is a matrix with \\([1 \\times n]\\) elements; a column vector has \\([n \\times 1]\\) elements.\nColumn vector:\n\\(a=\\begin{bmatrix} 2 \\\\ 1 \\\\ 3 \\end{bmatrix}\\)\nRow vector:\n\\(b=\\begin{bmatrix} 2, 1, 3 \\end{bmatrix}\\)\nVectors have a specific order such that:\n\\((2,1,3) \\neq (1,2,3)\\)\nWe can generalize the notation for a vector containing n elements as an n-vector such that:\n\\(a=\\begin{bmatrix} a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix}\\)\nwhere each element \\(a_i\\) is a numerical value and the vector can be written as \\(a=(a_1,\\dots,a_n)\\).\nWe can represent vectors graphically, e.g. here is an example in R graphing 2 2-vectors.There are some conventions in geometry and math notation here, that are not necessarily the same as the way we store data structures in a programming language…\n\n# imagine two vectors that each contain the x,y coordinates of a point\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\n\n\n\n\n\n\nVectors in R are always printed in the ‘row format’, regardless of math notation.\n\na <- c(4,2,3)\na\n\n[1] 4 2 3\n\n\n\n\n2.2 Transposing\nTansposing a vector is when a column or row vector is turned into the opposite orientation. The transpose is notated with the symbol \\(\\intercal\\)\nColumn to row format\n\\(\\begin{bmatrix} 4 \\\\ 8 \\\\ 5 \\end{bmatrix} ^ \\intercal = [4, 8, 5]\\)\nRow to column format\n\\([4, 8, 5] ^ \\intercal = \\begin{bmatrix} 4 \\\\ 8 \\\\ 5 \\end{bmatrix}\\)\n\n# transpose in R\na <- c(5,7,6)\n\n# the t() function forces the object as a matrix\nt(a)\n\n     [,1] [,2] [,3]\n[1,]    5    7    6\n\n# multiple transpose, just to demonstrate\nt(t(a))\n\n     [,1]\n[1,]    5\n[2,]    7\n[3,]    6\n\n\n\n\n2.3 Multiplication\nA number \\(b\\) and a vector \\(a\\) can be multiplied together\n\\(b \\times a =\\begin{bmatrix} b \\times a_1 \\\\ b \\times a_2 \\\\ \\vdots \\\\ b \\times a_n \\end{bmatrix}\\)\nThus\n\\(5 \\times \\begin{bmatrix} 1 \\\\ 2 \\\\ 3 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 10 \\\\ 15 \\end{bmatrix}\\)\n\n# vector multiplication in R\na <- c(2,4,5)\nb <- 3\n\na*b\n\n[1]  6 12 15\n\n\nGraphing vector multiplication\n\n# our 2 vectors from before\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\n\n\n\n\n\n\n\n\n2.4 Addition\nLet \\(a\\) and \\(b\\) be n-vectors, where \\(a\\) and \\(b\\) are of the same dimensions.\n\\(a + b = \\begin{bmatrix} a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{bmatrix} + \\begin{bmatrix} b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_n \\end{bmatrix} = \\begin{bmatrix} a_1 + b_1 \\\\ a_2 + b_2 \\\\ \\vdots \\\\ a_n + b_n \\end{bmatrix} = b+a\\)\nWith numbers\n\\(a + b = \\begin{bmatrix} 1 \\\\ 3 \\\\ 5 \\end{bmatrix} + \\begin{bmatrix} 4 \\\\ 2 \\\\ 8 \\end{bmatrix} = \\begin{bmatrix} 5 \\\\ 5 \\\\ 13 \\end{bmatrix}\\)\n\n# vector addition in R\na <- c(3, 5, 1)\nb <- c(14, 3, 5)\n\na + b\n\n[1] 17  8  6\n\n\n\n# our 2 vectors from before\nvec1 <- c(2,2)\nvec2 <- c(1,-0.5)\nvec3 <- vec1 + vec2\n\n\n\n\n\n\n\n\n2.5 Vector inner product\nThe inner product of a vector is obtained by multiplying two vectors and summing the result (NB this is sometimes called the dot product).\n\\(\\sum a*b = a \\cdot b = a_1b_1 + \\dots + a_nb_n\\)\nwith numbers\n\\(\\sum (\\begin{bmatrix} 1 \\\\ 3 \\\\ 5 \\end{bmatrix} \\times \\begin{bmatrix} 4 \\\\ 2 \\\\ 8 \\end{bmatrix}) = \\sum \\begin{bmatrix} 4 \\\\ 6 \\\\ 40 \\end{bmatrix} == 50\\)\n\n# dot product in R\na <- c(1,3,5)\nb <- c(4,2,8)\n\nsum(a * b)\n\n[1] 50\n\n\n\n# alternative syntax for the dot product\na %*% b\n\n     [,1]\n[1,]   50\n\n\n\n\n2.6 Magnitude (aka the “norm”) of a vector\nThere are several ways to measure the “bigness” of a vector, sometimes called the norms. Although we will not go into detail here, there are two types of norm to be aware of. These may seem a little esoteric for our purposes here, but they are used “under the bonnet” for many statistical and machine learning calculations (thus, you may encounter them and should probably be aware of them).\nL1 norm (aka the outer norm) - this is the overall absolute magnitude of vector values\nL2 norm (aka the inner norm) this is the linear (“Euclidean”) distance of the vector from the origin (the zero value in n-dimensional space).\n\nL1 norm\nThe L1 norm is calculated by summing the absolute value of all vector elements.\nTake a vector \\(a = (2, -4, 5)\\)\n\\(||a||_1 = \\sum(|a_1|+ \\dots + |a_n|)\\)\n\\(||a||_1 = (2 + 4 + 5) = 11\\)\n\n\nL2 norm\nThe L2 norm is calculated by taking the square root of the summed values of the squared values of each element of a vector.\nTake a vector \\(b = (-1, 0, 3)\\)\n\\(||b||_2 = \\sqrt(b_1^2+ \\dots + b_n^2)\\)\n\\(||b||_2 = \\sqrt(1 + 0 + 9) = 3.16\\)\n\n# norms in R\na <- c(2, -4, 5)\nb <- c(-1, 0, 3)\n\nsum(abs(a)) # L1\n\n[1] 11\n\nsqrt(sum(b^2)) # L2\n\n[1] 3.162278\n\n# alternative calculation using the norm() function\n# ?norm\n\nnorm(matrix(a), type = \"O\") # L1\n\n[1] 11\n\nnorm(matrix(b), type = \"2\") # L2\n\n[1] 3.162278\n\n\n\n\n\n2.7 Special vectors\nThere are a few special cases of vectors we may encounter (but which are certainly there “doing work” for us), like the 0-vector and the 1-vector. These are simply vectors where all values assume either zero or one, respectively. These are often used in linear models to encode data for matrix calculations (but we will leave it at that for now).\n\n# 0-matrix, n=10\nrep(0, 10)\n\n [1] 0 0 0 0 0 0 0 0 0 0\n\n# 1-matrix, n=8\nrep(1, 8)\n\n[1] 1 1 1 1 1 1 1 1\n\n\n\n\n2.8 Orthogonal vectors\nOrthogonal vectors are used in a number of statistical methods, e.g. multivariate statistics like principal component analysis (PCA). Here, orthogonal means perpendicular. We determine orthogonality by taking the inner product of two vectors.\nTake two vectors \\(a\\) and \\(b\\), they are orthogonal if and only if\n\\(a \\perp b \\iff a \\cdot b = 0\\)\n\na <- c(3,-3)\nb <- c(3, 3)\n\nsum(a*b) # yep, a and b are orthogonal!\n\n[1] 0"
  },
  {
    "objectID": "lab01-lin-alg.html#matrices",
    "href": "lab01-lin-alg.html#matrices",
    "title": "Lab 01 Linear alg.",
    "section": "3 Matrices",
    "text": "3 Matrices\n\n3.1 Description\nMatrices are described by the number of rows and columns they have. We may say a matrix \\(A\\) to have dimensions \\(r \\times c\\), (rows \\(\\times\\) columns).\n\\(A = \\begin{bmatrix} a_{11} & a_{12} & \\dots & a_{1c} \\\\ a_{21} & a_{22} & \\dots & a_{2c} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{r1} & a_{r2} & \\dots & a_{rc} \\end{bmatrix}\\)\n\n# make matrix, vector assembled \"by column\"\nA <- matrix(c(4,3,6,2,7,4,4,5,4), ncol = 3)\nA\n\n     [,1] [,2] [,3]\n[1,]    4    2    4\n[2,]    3    7    5\n[3,]    6    4    4\n\n\nA matrix can be constructed “by row” as well in R, with very different consequences.\n\n# make matrix, vector assembled \"by row\"\nB <- matrix(c(4,3,6,2,7,4,4,5,4), ncol = 3, byrow=T)\nB\n\n     [,1] [,2] [,3]\n[1,]    4    3    6\n[2,]    2    7    4\n[3,]    4    5    4\n\n\n\n\n3.2 Multiplying matrices\nFor a number \\(\\alpha\\) and a matrix \\(A\\), the product of \\(\\alpha A\\) is the matrix obtained by multiplying each element of \\(A\\) to \\(\\alpha\\).\n\\(\\alpha = 3\\)\n\\(A = \\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix}\\)\n\\(3 \\times\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} = \\begin{bmatrix} 3 & 9 \\\\ 6 & 12 \\\\ 3 & 3 \\end{bmatrix}\\)\n\n# matrix multiplication in R\nalpha <- 3\nA <- matrix(c(1,3,2,4,1,1), byrow=T, ncol=2)\nalpha*A\n\n     [,1] [,2]\n[1,]    3    9\n[2,]    6   12\n[3,]    3    3\n\n\n\n\n3.3 Transpose for matrices\nMatrix trasposition works similarly to vector transpostiion and is also denoted by \\(\\intercal\\)\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix}^ \\intercal = \\begin{bmatrix} 1 & 2 & 1 \\\\ 3 & 4 & 1 \\end{bmatrix}\\)\n\n# Matrix transpose in R\nA <- matrix(c(1,3,2,4,1,1), byrow=T, ncol=2)\nt(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    1\n[2,]    3    4    1\n\n\n\n\n3.4 Sum of matrices\nLet \\(A\\) and \\(B\\) be matrices of dimensions \\(r \\times c\\). We sum the matrices together element-wise. The matrices must be of exactly the same dimensions.\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} - \\begin{bmatrix} 7 & 1 \\\\ 1 & 1 \\\\ 4 & 4 \\end{bmatrix} = \\begin{bmatrix} 8 & 4 \\\\ 3 & 5 \\\\ 5 & 5 \\end{bmatrix}\\)\n\n# Adding matrices in R\nA <- matrix(c(1,3,2,4,1,1), byrow=3, ncol=2)\nB <- matrix(c(7,1,1,1,4,4), byrow=3, ncol=2)\n\nA +B\n\n     [,1] [,2]\n[1,]    8    4\n[2,]    3    5\n[3,]    5    5\n\n\n\n\n3.5 Multiplying matrix x vector\nLet \\(A\\) be an \\(r \\times c\\) matrix and let \\(B\\) be a column vector with \\(c\\) dimensions Note the number of elements in one dimension (here \\(c\\)) must be the same.\n\\(\\begin{bmatrix} a_{11} & a_{12} & \\dots & a_{1c} \\\\ a_{21} & a_{22} & \\dots & a_{2c} \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ a_{r1} & a_{r2} & \\dots & a_{rc} \\end{bmatrix} \\times \\begin{bmatrix} b_{1} \\\\ b_{2} \\\\ \\vdots \\\\ b_{c} \\end{bmatrix} = \\begin{bmatrix} a_{11} b_{1} + a_{12} b_{2} + \\dots + a_{1c}b_{c} \\\\ a_{21} b_{1} + a_{22} b_{2} + \\dots + a_{2c} b_{c} \\\\ \\vdots \\\\ a_{r1} b_{1} + a_{r2} b_{2} + \\dots + a_{rc} b_{c} \\end{bmatrix}\\)\nFor example:\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\\\ 1 & 1 \\end{bmatrix} \\times \\begin{bmatrix} 7 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 \\cdot 7 + 3 \\cdot 1 \\\\ 2 \\cdot 7 + 4 \\cdot 1 \\\\ 1 \\cdot 7 + 1 \\cdot 1 \\end{bmatrix}\\begin{bmatrix} 10 \\\\ 18 \\\\ 8 \\end{bmatrix}\\)\n\n# Matrix x vector multiplication in R\nA <- matrix(c(1,3,2,4,1,1), byrow=3, ncol=2)\nC <- c(7,1)\n\n# NB the %*% syntax, correct for matrix x vector\nA %*% C\n\n     [,1]\n[1,]   10\n[2,]   18\n[3,]    8\n\n# NB this will also evaluate, but has a different result...\n# Can you tell what is going on here?\nA * C\n\n     [,1] [,2]\n[1,]    7    3\n[2,]    2   28\n[3,]    7    1\n\n\n\n\n3.6 Multiplying matrix x matrix\n(Here it gets tricky)\nLet \\(A\\) be an \\(r \\times c\\) matrix and \\(B\\) be a \\(c \\times t\\) matrix, where the number of columns in \\(A\\) is equal to the number of rows in \\(B\\).\n\n# Matrix x matrix multiplication in R\nA <- matrix(c(1, 3, 2, 2, 8, 9), ncol = 2)\nB <- matrix(c(5, 8, 4, 2), ncol = 2)\n\n# NB the %*% syntax\nA %*% B\n\n     [,1] [,2]\n[1,]   21    8\n[2,]   79   28\n[3,]   82   26\n\n\n\n\n3.7 Vectors as matrics\nVectors can be treated as matrices and in R can be coerced to matrix objects, where a column vector of length \\(r\\) becomes an \\(r \\times 1\\) matrix or a row vector of length \\(c\\) becomes a \\(1 \\times c\\) matrix\n\n# Vectors as matrices in R\n\n# Vanilla numeric vector\n(A <- c(4,5,8)); class(A)\n\n[1] 4 5 8\n\n\n[1] \"numeric\"\n\n# Column matrix\n(A <- matrix(c(4,5,8), nrow=3)); class(A)\n\n     [,1]\n[1,]    4\n[2,]    5\n[3,]    8\n\n\n[1] \"matrix\" \"array\" \n\n# Row matrix\n(A <- matrix(c(4,5,8), ncol=3)); class(A)\n\n     [,1] [,2] [,3]\n[1,]    4    5    8\n\n\n[1] \"matrix\" \"array\" \n\n\n\n\n3.8 Special matrics\n– Square matrix An n × n matrix\n– Symmetric matrix A is if \\(A = A^\\intercal\\).\n– 0-matrix A matrix with 0 on all entries, often written simply as 0.\n– 1-matrix A matrix with 1 on all entries, often written simply as J.\n– Diagonal matrix A square matrix with 0 on all off–diagonal entries and elements d1, d2, … , dn on the diagonal, often written diag{d1, d2, … , dn}\n– Identity matrix is one with with all 1s on the diagonal, denoted I and satisfies that IA = AI = A.\n\n# 0-matrix\nmatrix(0, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    0    0    0\n[2,]    0    0    0\n\n# 1-matrix\nmatrix(1, nrow = 2, ncol = 3)\n\n     [,1] [,2] [,3]\n[1,]    1    1    1\n[2,]    1    1    1\n\n# Diagonal matrix\ndiag(c(1, 2, 3))\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    2    0\n[3,]    0    0    3\n\n# Identity matrix\ndiag(1, 3)\n\n     [,1] [,2] [,3]\n[1,]    1    0    0\n[2,]    0    1    0\n[3,]    0    0    1\n\n# Note what happens when diag() is applied to a matrix\n(D <- diag(c(4,3,5)))\n\n     [,1] [,2] [,3]\n[1,]    4    0    0\n[2,]    0    3    0\n[3,]    0    0    5\n\ndiag(D)\n\n[1] 4 3 5\n\n(A <- matrix(c(1,3,2,2,6,8,9,3,4), ncol = 3))\n\n     [,1] [,2] [,3]\n[1,]    1    2    9\n[2,]    3    6    3\n[3,]    2    8    4\n\ndiag(A)\n\n[1] 1 6 4\n\n\n\n\n3.9 Inverse of a matrix\nThe inverse of an \\(n × n\\) matrix \\(A\\) is the \\(n × n\\) matrix \\(B\\) (which is which when multiplied with A gives the identity matrix I. That is, \\(AB = BA = I\\).\nThus\n\\(B\\) is the inverse of \\(A\\), written as \\(B = A^{−1}\\) and\n\\(A\\) is the inverse of \\(B\\), written as \\(A = B^{−1}\\)\nNumeric example\n$ A =\n\\[\\begin{bmatrix} 1 & 3 \\\\  2 & 4 \\end{bmatrix}\\]\n$\n$ B =\n\\[\\begin{bmatrix} -2 & 1.5 \\\\  1 & -0.5 \\end{bmatrix}\\]\n$\nWe can show \\(AB = BA = I\\), thus \\(B=A^{-1}\\)\n\n# Inverse of matrices\n\n(A <- matrix(c(1,3,2,4), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(B <- matrix(c(-2,1.5,1,-0.5), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\nA%*%B\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1\n\nB%*%A == diag(1,2)\n\n     [,1] [,2]\n[1,] TRUE TRUE\n[2,] TRUE TRUE\n\n\n– Only square matrices can have an inverse, but not all square matrices have an inverse. – When the inverse exists, it is unique. – Finding the inverse of a large matrix A is numerically complicated (but computers do it for us).\n\n# Solving the inverse of a matrix in R using solve()\n\n(A <- matrix(c(1,3,2,4), ncol=2, byrow=T))\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(B <- solve(A))\n\n     [,1] [,2]\n[1,]   -2  1.5\n[2,]    1 -0.5\n\n# Prove the rule\nA %*% B\n\n     [,1] [,2]\n[1,]    1    0\n[2,]    0    1"
  },
  {
    "objectID": "lab01-lin-alg.html#special-topics",
    "href": "lab01-lin-alg.html#special-topics",
    "title": "Lab 01 Linear alg.",
    "section": "4 Special topics",
    "text": "4 Special topics\n\n4.1 Solving linear equations\nMatrix math is related to math that can be used to solve linear equation systems. This is a very large topic and we will only briefly touch upon it, but it is core in statistics and in machine learning. We can sometimes ignore the details, but awareness of this area of math will likely be beneficial.\nConsider these two linear equations\nEq 1: \\(x_1 + 3x_2 = 7\\)\nEq 2: \\(2x_1 + 4x_2 = 10\\)\nWe can write this “system” of equations in matrix form, from which is derived the notation for statistical linear models. Let’s define the matrices \\(A\\), \\(x\\) and \\(b\\) as:\n\\(\\begin{bmatrix} 1 & 3 \\\\ 2 & 4 \\end{bmatrix} \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix} = \\begin{bmatrix} 7 \\\\ 10 \\end{bmatrix}\\), i.e. \\(Ax = b\\)\nBecause \\(A^{-1}A = I\\) and \\(Ix=x\\):\n\\(x = A^{-1}b = \\begin{bmatrix} -2 & 1.5 \\\\ 1 & -0.5 \\end{bmatrix} \\begin{bmatrix} 7 \\\\ 10 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 2 \\end{bmatrix}\\)\nThis way of thinking is the foundation of the linear model and we can exploit it to isolate and “solve” for the x values. E.g. we can isolate and solve for \\(x_2\\) as:\nEq 1 (rerarranged): \\(x_2 = \\frac{7}{3}-\\frac{1}{3}x_1\\)\nEq 2 (rerarranged): \\(x_2 = \\frac{10}{4}-\\frac{2}{4}x_1\\)\n\\(x_2 = \\frac{7}{3}-\\frac{1}{3}x_1\\)\n\\(x_2 = \\frac{10}{4}-\\frac{2}{4}x_1\\)\nNow we can graphically represent these equations, which are two lines and which demonstrate the solutions\n\nplot(x=NULL, y=NULL,\n     xlim = c(-1,3), ylim = c(-1,3),\n     pch = 16, \n     xlab=expression('x'[1]), \n     ylab=expression('x'[2]))\nabline(h=c(-1:3),v=c(-1:3),\n       lty=2, col='green3')\nabline(h=0, v=0, lwd=2)\n\nabline(a=7/3, b=-1/3, col=\"red\", lwd=2)\nabline(a=10/4, b=-2/4, col=\"red\", lwd=2)\n\n\n\n\nThe lines represent the solved equations above, and it can be seen that they cross at a single point, the solutions for \\(x_1\\) and \\(x_2\\), \\(x_1 = 1\\) and \\(x_2=2\\), respectively.\n\nA <- matrix(c(1, 2, 3, 4), ncol = 2)\nb <- c(7, 10)\n(x <- solve(A) %*% b)\n\n     [,1]\n[1,]    1\n[2,]    2\n\n\nWhile in this example we see exactly 1 solution, there are several possibilities in general:\n\nExactly one solution – when the lines intersect in one point\nNo solutions – when the lines are parallel but not identical\nInfinitely many solutions – when the lines coincide.\n\n\n\n4.2 Matrix equalities\nHere are a few additional properties of matrices\n\\((A + B)^\\intercal = A^\\intercal + B^\\intercal\\)\n\\((AB)^\\intercal = B^\\intercal A^\\intercal\\)\n\\(A(B + C) = AB + AC\\)\n\\(AB = AC \\not\\Rightarrow B = C\\)\n\\(AB \\neq BA\\) (in general)\n\\(AI = IA = A\\)\nIf \\(\\alpha\\) is a number then \\(\\alpha AB = A(\\alpha B)\\)\n\n\n4.3 Least squares\nConsider the following paired values\n\ndf <- data.frame(x=c(1,2,3,4,5),\n                 y=c(3.7, 4.2,4.9,5.7,6.0))\ndf\n\n  x   y\n1 1 3.7\n2 2 4.2\n3 3 4.9\n4 4 5.7\n5 5 6.0\n\n\nWe can plot these values and note that the relationship is approvimately linear (i.e., a straight line can be drawn that comes close to all the values)\n\n\n\n\n\nWe can notate the linear relationship between \\(x\\) and \\(y\\) with\n\\(y_i = \\beta_0 +\\beta_1x_i\\) for \\(i = 1, \\dots, 5\\)\nThis can be written in matrix form\n\\(y = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ \\vdots \\\\ y_5 \\end{bmatrix} \\approx \\begin{bmatrix} 1 & x_1 \\\\ 1 & x_2 \\\\ \\vdots & \\vdots \\\\1 & x_5 \\\\ \\end{bmatrix} \\begin{bmatrix} \\beta_0 \\\\ \\beta_1\\end{bmatrix} = \\mathbf{X \\beta}\\)\nGiven that we have vectors \\(y\\) and \\(x\\), how can we find the vector \\(\\mathbf{\\beta}\\) to satisfy this equality such that \\(y=X \\beta\\)?\nActually, the answer is no because this would require the points to lie on an exactly straight line! However, it may be useful to find an estimate of \\(\\beta\\) such that \\(\\mathbf{X \\beta}\\) is “as close to \\(y\\) as possible”. Let’s call this estimate \\(\\hat{\\beta}\\)\nTo do this we would like to find \\(\\hat{\\beta}\\) that minimizes the equation\n\\(e=y- \\mathbf{X \\beta}\\)\nThe solution to this problem is the basis of linear regression and other linear statistical models:\n\\(\\hat{\\beta} = (X^\\intercal X)^{-1} X^\\intercal y\\)\n\ny <- c(3.7, 4.2,4.9,5.7,6.0)\nx <- c(1,2,3,4,5)\nX <- matrix(c(rep(1,5), x), ncol=2, byrow=F)\ncolnames(X) <- c('','x')\n\ny\n\n[1] 3.7 4.2 4.9 5.7 6.0\n\nX\n\n       x\n[1,] 1 1\n[2,] 1 2\n[3,] 1 3\n[4,] 1 4\n[5,] 1 5\n\n# this solves \"Beta hat\"\n# NB, the intercept and slope coeeficients for linear regression!\n(beta.hat <- solve(t(X) %*% X) %*% t(X) %*% y)\n\n  [,1]\n  3.07\nx 0.61"
  },
  {
    "objectID": "lab01-lin-alg.html#exercises",
    "href": "lab01-lin-alg.html#exercises",
    "title": "Lab 01 Linear alg.",
    "section": "5 Exercises",
    "text": "5 Exercises\n\n5.1 The bird table\nOn a sunny day, two tables are standing in an English country garden. On each table are *birds of unknown species are sitting having the time of their lives. A bird from the first table says to those on the second table: “Hi – if one of you come to our table then there will be the same number of us on each table”. “Yeah, right”, says a bird from the second table, “but if one of you comes to our table, then we will be twice as many on our table as on yours”.\n*(because this is a maths question, here we have the ability to assume by birds we may mean something theoretical, and the count of which may assume any value from the infinite set of integers positive or negative…)\nQuestion: How many birds are on each table?\n\nWrite up two equations with two unknowns\nSolve these equations using the methods you have learned from linear algebra\nSimply finding the solution by trial–and–error is invalid (and will probably lead to frustration, especially if the question is taken literally - i.e., USE THE TOOLS we practiced)"
  },
  {
    "objectID": "lab01-lin-alg.html#resources",
    "href": "lab01-lin-alg.html#resources",
    "title": "Lab 01 Linear alg.",
    "section": "Resources",
    "text": "Resources\nHere are a few web resources for self learning if you wish to go farther\n3Blue1Brown Essence of linear algebra\nKhan Academy linear algebra series\nCoursera Mathematics for machine learning linear algebra course (Imperial College London - free to audit)\nMIT x18.06 Gilbert Strang’s famous linear algebra course"
  },
  {
    "objectID": "lab01-lin-alg.html#harper-adams-data-science",
    "href": "lab01-lin-alg.html#harper-adams-data-science",
    "title": "Lab 01 Linear alg.",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  },
  {
    "objectID": "lab05-resampling.html",
    "href": "lab05-resampling.html",
    "title": "Lab 05 Resampling",
    "section": "",
    "text": "In this lab, we explore the resampling techniques covered in this chapter. Some of the commands in this lab may take a while to run on your computer.\n\n\nWe explore the use of the validation set approach in order to estimate the test error rates that result from ﬁtting various linear models on the Auto data set.\nBefore we begin, we use the set.seed() function in order to set a seed for R’s random number generator, so that the reader of this book will obtain precisely the same results as those shown below. It is generally a good idea to set a random seed when performing an analysis such as cross-validation that contains an element of randomness, so that the results obtained can be reproduced precisely at a later time.\n\n\n\nWe begin by using the sample() function to split the set of observations into two halves, by selecting a random subset of 196 observations out of the original 392 observations. We refer to these observations as the training set.\n\nlibrary(ISLR)\nset.seed(1)\ntrain <- sample(392, 196)\n\n(Here we use a shortcut in the sample command; see ?sample for details.) We then use the subset option in lm() to ﬁt a linear regression using only the observations corresponding to the training set.\n\nlm.fit <- lm(mpg ~ horsepower, data = Auto, subset = train)\n\nWe now use the predict() function to estimate the response for all 392 observations, and we use the mean() function to calculate the MSE of the 196 observations in the validation set. Note that the -train index below selects only the observations that are not in the training set.\n\nattach(Auto)\nmean((mpg - predict(lm.fit, Auto))[-train]^2)\n\n[1] 23.26601\n\n\nTherefore, the estimated test MSE for the linear regression ﬁt is 26.14.\n\n\n\nWe can use the poly() function to estimate the test error for polynomial and cubic regressions.\n\n# poly 2nd degree\nlm.fit2 <- lm(mpg ~ poly(horsepower, 2), \n              data = Auto, subset = train)\n\nmean((mpg - predict(lm.fit2, Auto))[-train ]^2)\n\n[1] 18.71646\n\n# poly 3rd degree\nlm.fit3 <- lm(mpg ~ poly(horsepower, 3), \n              data = Auto, subset = train )\nmean((mpg - predict(lm.fit3, Auto ))[-train ]^2)\n\n[1] 18.79401\n\n\nThese error rates are similar to each other, respectively. But, if we choose a different training set instead, then we will obtain somewhat diﬀerent errors on the validation set.\n\nset.seed(2)\ntrain <- sample(392, 196)\n\nlm.fit <- lm(mpg ~ horsepower, subset = train)\nmean((mpg - predict(lm.fit, Auto ))[ -train]^2)\n\n[1] 25.72651\n\nlm.fit2 <- lm(mpg ~ poly(horsepower, 2), data = Auto, subset = train)\nmean(( mpg - predict( lm.fit2 , Auto ))[ -train]^2)\n\n[1] 20.43036\n\nlm.fit3 <- lm (mpg ~ poly(horsepower, 3), data = Auto , subset = train)\nmean(( mpg - predict (lm.fit3, Auto ))[ -train]^2)\n\n[1] 20.38533\n\n\nAlthough the values are slightly different, these results are consistent with our previous ﬁndings: a model that predicts mpg using a quadratic function of horsepower performs better than a model that involves only a linear function of horsepower, and there is little evidence in favor of a model that uses a cubic function of horsepower."
  },
  {
    "objectID": "lab05-resampling.html#cross-validation",
    "href": "lab05-resampling.html#cross-validation",
    "title": "Lab 05 Resampling",
    "section": "2 Cross validation",
    "text": "2 Cross validation\n\nLeave-one-out CV\nT leave-one-out Cross-validation (LOOCV) estimate can be automatically computed for any generalized linear model using the glm() and cv.glm() functions. We can use the glm() function to perform logistic regression by passing in the family=\"binomial\" argument. But if we use glm() to ﬁt a model without passing in the family argument, then it performs linear regression, just like the lm() function. So for instance,\n\n\ncv.glm()\n\n# glm() approach\nglm.fit <- glm(mpg ~ horsepower, data = Auto)\ncoef(glm.fit )\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n# lm() approach\nlm.fit <- lm(mpg ~ horsepower, data = Auto)\ncoef(lm.fit)\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n\nyield identical linear regression models. In this lab, we will perform linear regression using the glm() function rather than the lm() function because the latter can be used together with cv.glm(). The cv.glm() function is part of the {boot} library.\n\nlibrary(boot)\nglm.fit <- glm(mpg ~ horsepower, data = Auto )\ncv.err <- cv.glm(Auto, glm.fit)\ncv.err$delta\n\n[1] 24.23151 24.23114\n\n\nThe cv.glm() function produces a list with several components. The two numbers in the delta vector contain the cross-validation results. In this case the numbers are identical (up to two decimal places) and correspond to the LOOCV statistic (Ch 5 James et al. 2021). Below, we discuss a situation in which the two numbers differ. Our cross-validation estimate for the test error is approximately 24.23.\n\n\nfor()\nWe can repeat this procedure for increasingly complex polynomial fits. To automate the process, we use the for() function to initiate a for loop which iteratively ﬁts polynomial regressions for polynomials of order i = 1 to i = 5, computes the associated cross-validation error, and stores it in the ith element of the vector cv.error. We begin by initializing the vector. This command will likely take some time to run.\n\nlibrary(tictoc) # time your computer\ncv.error <- rep(0 ,5)\ntic()\nfor (i in 1:5){\n  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto)\n  cv.error[i] <- cv.glm(Auto, glm.fit)$delta[1]\n}\ntoc() # Ed's PC\n\n4.79 sec elapsed\n\ncv.error\n\n[1] 24.23151 19.24821 19.33498 19.42443 19.03321\n\nplot(cv.error, type='b')\n\n\n\n\nWe see a sharp drop in the estimated test MSE between the linear and quadratic ﬁts, but then no clear improvement from using higher-order polynomials.\n\n\nK-fold CV\nThe cv.glm() function can also be used to implement k-fold CV. Below we use k = 10, a common choice for k, on the Auto data set. We once again set a random seed and initialize a vector in which we will store the CV errors corresponding to the polynomial ﬁts of orders one to ten.\n\nset.seed(17)\ncv.error.10 <- rep (0 ,10)\nfor(i in  1:10) {\n  glm.fit <- glm(mpg ~ poly(horsepower, i), data = Auto )\n  cv.error.10[i] = cv.glm(Auto, glm.fit, K = 10)$delta[1]\n}\ncv.error.10\n\n [1] 24.27207 19.26909 19.34805 19.29496 19.03198 18.89781 19.12061 19.14666\n [9] 18.87013 20.95520\n\nplot(cv.error.10, type='b')\n\n\n\n\nYou may notice that the computation time is much shorter than that of LOOCV. (In principle, the computation time for LOOCV for a least squares linear model should be faster than for k-fold CV, due to a mathematical shortcut for LOOCV (see Ch 5 James et al. 2021); however, unfortunately the cv.glm() function does not make use of this efficiency. We still see little evidence that using cubic or higher-order polynomial terms leads to lower test error than simply using a quadratic fit.\nThe two numbers associated with delta are essentially the same when LOOCV is performed. When we instead perform k-fold CV, then the two numbers associated with delta differ slightly. The first is the standard k-fold CV estimate and the second is a bias-corrected version. On this data set, we see the two estimates are very similar to each other."
  },
  {
    "objectID": "lab05-resampling.html#bootstrap",
    "href": "lab05-resampling.html#bootstrap",
    "title": "Lab 05 Resampling",
    "section": "3 Bootstrap",
    "text": "3 Bootstrap\nWe will illustrate the use of the bootstrap in a simple example, as well as on an example involving estimating the accuracy of the linear regression model on the Auto data set.\n\nboot()\nOne of the great advantages of the bootstrap approach is that it can be applied in almost all situations. No complicated mathematical calculations are required. Performing a bootstrap analysis in R entails only two steps. First, we must create a function that computes the statistic of interest. Second, we use the boot() function, which is part of the {boot} library, to perform the bootstrap by repeatedly sampling observations from the data set with replacement.\nThe Portfolio data set in the {ISLR} package is described in Section 5.2. To illustrate the use of the bootstrap on this data, we must ﬁrst create a function, alpha.fn(), which takes as input the (X, Y) data as well as a vector indicating which observations should be used to estimate α. The function then outputs the estimate for α based on the selected observations.\n\n# make a fun function\nalpha.fn <- function(data, index){\n  X <- data$X[index]\n  Y <- data$Y[index]\n  return((var(Y) - cov (X, Y))/(var(X)+ var(Y)-2 * cov(X,Y)))\n}\n\nThis function returns, or outputs, an estimate for α based on the observations indexed by the argument index. For instance, the following command tells R to estimate α using all 100 observations.\n\nalpha.fn(Portfolio, 1:100)\n\n[1] 0.5758321\n\n\nThe next command uses the sample() function to randomly select 100 observations from the range 1 to 100, with replacement. This is equivalent to constructing a new bootstrap data set and recomputing \\(\\hat\\alpha\\) based on the new data set.\n\nset.seed(1)\nalpha.fn(Portfolio, sample(100, 100, replace = T))\n\n[1] 0.7368375\n\n\nWe can implement a bootstrap analysis by performing this command many times, recording all of the corresponding estimates for α, and computing the resulting standard deviation. However, the boot() function automates this approach. Below we produce R = 1,000 bootstrap estimates for α.\n\nset.seed(1)\nboot(Portfolio, alpha.fn, R = 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Portfolio, statistic = alpha.fn, R = 1000)\n\n\nBootstrap Statistics :\n     original       bias    std. error\nt1* 0.5758321 -0.001596422  0.09376093\n\n\nThe ﬁnal output shows that using the original data, \\(\\hat\\alpha= 0.58\\), and that the bootstrap estimate for \\(SE\\hat\\alpha = 0.09\\).\n\n\nRegression accuracy\nThe bootstrap approach can be used to assess the variability of the coef- ﬁcient estimates and predictions from a statistical learning method. Here we use the bootstrap approach in order to assess the variability of the estimates for \\(\\beta_0\\) and \\(\\beta_1\\), the intercept and slope terms for the linear regression model that uses horsepower to predict mpg in the Auto data set. We will compare the estimates obtained using the bootstrap to those obtained using the formulas for \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\).\nWe ﬁrst create a simple function, boot.fn(), which takes in the Auto data set as well as a set of indices for the observations, and returns the intercept and slope estimates for the linear regression model. We then apply this function to the full set of 392 observations in order to compute the estimates of \\(\\beta_0\\) and \\(\\beta_1\\) on the entire data set using the usual linear regression coefficient estimate formulas. Note that we do not need the { and } at the beginning and end of the function because it is only one line long.\n\nplot(mpg ~ horsepower, data = Auto)\nabline(lm(mpg ~ horsepower, data = Auto))\n\n\n\n# function!\nboot.fn <- function(data, index)\n  return(coef(lm(mpg ~ horsepower, data = data, subset = index)))\nboot.fn(Auto, 1:392)\n\n(Intercept)  horsepower \n 39.9358610  -0.1578447 \n\n\nThe boot.fn() function can also be used in order to create bootstrap estimates for the intercept and slope terms by randomly sampling from among the observations with replacement. Here are two examples:\n\n# first with a seed\nset.seed(1)\nboot.fn(Auto, sample(392, 392, replace = T)) \n\n(Intercept)  horsepower \n 40.3404517  -0.1634868 \n\n# no seed\nboot.fn(Auto, sample(392, 392, replace = T)) \n\n(Intercept)  horsepower \n 40.1186906  -0.1577063 \n\n\n\n\nBootstrap\n\nboot(Auto, boot.fn, 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Auto, statistic = boot.fn, R = 1000)\n\n\nBootstrap Statistics :\n      original        bias    std. error\nt1* 39.9358610  0.0544513229 0.841289790\nt2* -0.1578447 -0.0006170901 0.007343073\n\n\nand\nThis indicates that the bootstrap estimate for \\(SE(\\hat\\beta_0)\\) is 0.84, and that the bootstrap estimate for \\(SE(\\hat\\beta_1)\\) is 0.0074. Standard formulas can be used to compute the standard errors for the regression coefficients in a linear model. These can be obtained using the summary() function.\n\nsummary(lm(mpg ~ horsepower, data = Auto))$coef\n\n              Estimate  Std. Error   t value      Pr(>|t|)\n(Intercept) 39.9358610 0.717498656  55.65984 1.220362e-187\nhorsepower  -0.1578447 0.006445501 -24.48914  7.031989e-81\n\n\nThe standard error estimates for \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\) somewhat diﬀerent from the estimates obtained using the bootstrap. Does this indicate a problem with the bootstrap? In fact, it suggests the opposite. Consider that estimation of these parameters rely on certain assumptions. For example, they depend on the unknown parameter \\(\\sigma^2\\), the noise variance. We then estimate \\(\\sigma^2\\) using the RSS. Now although the formula for the standard errors do not rely on the linear model being correct, the estimate for \\(\\sigma^2\\) does. Also, there is a non-linear relationship in the data, and so the residuals from a linear ﬁt will be inflated, and so will \\(\\sigma^2\\). Secondly, standard linear regression assume (somewhat unrealistically) that the \\(x_i\\) values are ﬁxed, and all the variability comes from the variation in the errors \\(\\epsilon_i\\). The bootstrap approach does not rely on any of these assumptions, and so it is likely giving a more accurate estimate of the standard errors of \\(SE(\\hat\\beta_0)\\) and \\(SE(\\hat\\beta_1)\\) than is the summary() function.\nBelow we compute the bootstrap standard error estimates and the standard linear regression estimates that result from ﬁtting the quadratic model to the data. Since this model provides a good ﬁt to the data, there is now a better correspondence between the bootstrap estimates and the standard estimates of \\(SE(\\hat\\beta_0)\\), \\(SE(\\hat\\beta_1)\\) and \\(SE(\\hat\\beta_2)\\).\n\nboot.fn <- function(data, index){\n  coefficients(lm(mpg ~ horsepower + I(horsepower^2), \n                  data=data, \n                  subset = index))\n}\n\nset.seed(1)\nboot(Auto, boot.fn, 1000)\n\n\nORDINARY NONPARAMETRIC BOOTSTRAP\n\n\nCall:\nboot(data = Auto, statistic = boot.fn, R = 1000)\n\n\nBootstrap Statistics :\n        original        bias     std. error\nt1* 56.900099702  3.511640e-02 2.0300222526\nt2* -0.466189630 -7.080834e-04 0.0324241984\nt3*  0.001230536  2.840324e-06 0.0001172164\n\nsummary(lm(mpg ~ horsepower + I(horsepower^2), data = Auto))$coef\n\n                    Estimate   Std. Error   t value      Pr(>|t|)\n(Intercept)     56.900099702 1.8004268063  31.60367 1.740911e-109\nhorsepower      -0.466189630 0.0311246171 -14.97816  2.289429e-40\nI(horsepower^2)  0.001230536 0.0001220759  10.08009  2.196340e-21"
  },
  {
    "objectID": "lab05-resampling.html#exercises",
    "href": "lab05-resampling.html#exercises",
    "title": "Lab 05 Resampling",
    "section": "4 Exercises",
    "text": "4 Exercises\n\nExercise 1\nWe have used logistic regression to predict the probability of default using income and balance on the Default data set. We will now estimate the test error of this logistic regression model using the validation set approach. Do not forget to set a random seed before beginning your analysis.\n\n1.1\nFit a logistic regression model that uses income and balance to predict default.\n\n\n1.2\nUsing the validation set approach, estimate the test error of this model. In order to do this, you must perform the following steps:\n\nSplit the sample set into a training set and a validation set.\nFit a multiple logistic regression model using only the training observations.\nObtain a prediction of default status for each individual in the validation set by computing the posterior probability of default for that individual, and classifying the individual to the default category if the posterior probability is greater than 0.5.\nCompute the validation set error, which is the fraction of the observations in the validation set that are misclassified.\n\n\n\n1.3\nRepeat the process in 1.2 three times, using three diﬀerent splits of the observations into a training set and a validation set. Comment on the results obtained.\n\n\n1.4\nNow consider a logistic regression model that predicts the probability of default using income, balance, and a dummy variable for student. Estimate the test error for this model using the validation set approach. Comment on whether or not including a dummy variable for student leads to a reduction in the test error rate."
  },
  {
    "objectID": "lab05-resampling.html#resources",
    "href": "lab05-resampling.html#resources",
    "title": "Lab 05 Resampling",
    "section": "Resources",
    "text": "Resources"
  },
  {
    "objectID": "lab05-resampling.html#harper-adams-data-science",
    "href": "lab05-resampling.html#harper-adams-data-science",
    "title": "Lab 05 Resampling",
    "section": "Harper Adams Data Science",
    "text": "Harper Adams Data Science\n\nThis module is a part of the MSc in Data Science for Global Agriculture, Food, and Environment at Harper Adams University, led by Ed Harris."
  }
]